(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(15),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,'html {\n    min-height: 100%;\n    font-size: 50%;\n    line-height: 1.5;\n}\n\nbody {\n    margin: 0;\n    background-color: #FCF6BD;;\n}\n\nbody.edit-task .edit-form {\n    display: flex;\n    visibility: visible;\n    opacity: 1;\n}\n\nheader {\n    display: none;\n    opacity: 0;\n    position: absolute;\n}\n\n#content {\n    display: flex;\n    min-height: 100vh;\n    font-size: 3em;\n}\n\nnav {\n    flex: 1;\n    max-width: 300px;\n    background-color: #FCF6BD;\n    background-color: #D0F4DE;\n    display: flex;\n    flex-direction: column;\n}\n\n.myprojects-heading {\n    align-self: center;\n    font-size: 1.2em;\n}\n\n.project-icon {\n    width: 8%;\n    height: 100%;\n}\n\n.nav-project-btn {\n    max-width: 100%;\n    flex: 1;\n    background-color: transparent;\n    border: none;\n    text-align: start;\n    font-size: 0.8em;\n    cursor: pointer;\n}\n\n.rm-project-btn {\n    max-width: 100%;\n    flex: 0.2;\n    background-color: transparent;\n    border: none;\n    color: red;\n    font-size: 0.8em;\n    cursor: pointer;\n}\n\n.core-projects {\n    display: flex;\n    flex-direction: column;\n    padding-top: 10px;\n}\n\n.user-projects {\n    display: flex;\n    flex-direction: column;\n    padding-top: 10px;\n}\n\n.user-project-nav {\n    display: flex;\n    padding-left: 20px;\n}\n\n.core-project-nav {\n    width: 100%;\n    display: flex;\n    padding-top: 10px;\n    padding-left: 20px;\n    background-color: #D0F4DE;\n}\n\n.core-project-nav:hover {\n    background-color: #D0F4DE;\n    background-color: #6bfca0\n}\n\n.user-project-nav:hover {\n    background-color: #6bfca0\n}\n\n.add-project.active {\n    display: block;\n    align-self: center;\n    margin-top: 10px;\n    cursor: pointer;\n    width: 50%;\n}\n\n.add-project {\n    display: none;\n}\n\n.add-project-form {\n    display: none;\n}\n\n.add-project-form.active {\n    display: block;\n    width: 50%;\n    align-self: center;\n}\n\n.add-project-input {\n    width: 100%;\n}\n\n.project {\n    flex: 3;\n    background-color: #D0F4DE;\n    background-color: #FCF6BD;\n    display: flex;\n    flex-direction: column;\n    padding-left: 50px;\n}\n\n\n.project-tasks {\n    display: flex;\n    flex-direction: column;\n}\n\n.task {\n    display: flex;\n    text-align: center;\n    align-items: center;\n}\n\n.task input {\n    display: none;\n}\n\n.task input + div:before {\n    content: "○";\n    margin-right: 10px;\n    align-self: center;\n    font-size: 2em;\n  }\n  \n.task input:checked + div:before {\n    content: "✔";\n}\n\n.task input:checked + div p {\n    text-decoration: line-through;\n}\n\n.task-title-date {\n    display: flex;\n    padding-left: 5px;\n    padding-right: 5px;\n    flex: 1;\n    text-align: center;\n}\n\n.task-title {\n    text-align: center;\n    padding-left: 5px;\n}\n\n.task-date{\n    padding-right: 5px;\n    background-color: #b8b1715e;\n    padding-left: 5px;\n}\n\n.task-btns {\n    display: inline;\n    text-align: center;\n    justify-self: center;\n    align-self: center;\n    flex: 1;\n}\n\n.rm-task-btn {\n    background-color: transparent;\n    border: none;\n    color: red;\n    font-size: 1em;\n    cursor: pointer;\n}\n\n.edit-task-btn {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n    font-size: 1em;\n}\n\n.store-task-btn {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n}\n\n.add-task-btn.active {\n    display: block;\n    align-self: center;\n    width: 25%;\n}\n\n.add-task-btn {\n    display: none;\n}\n\n.add-task-form.active {\n    display: block;\n    align-self: center;\n    width: 25%;\n}\n\n.add-task-form {\n    display: none;\n}\n\n.add-task-input {\n    width: 100%;\n    align-self: center;\n    padding-left: 10px;\n}\n\n.edit-form {\n    visibility: hidden;\n    opacity: 0;\n    min-height: 100%;\n    width: 300px;\n    background-color: #A9DEF9;\n    flex-direction: column;\n    justify-content: space-around;\n    padding-left: 20px;\n    box-sizing: border-box;\n    padding-right: 20px;\n}\n\n\n.submit-edit-btn {\n    align-self: center;\n}\n\n\n.submit-edit-btn  button {\n    cursor: pointer;\n}\n\n@media (max-width: 1000px) {\n\n    html {\n        font-size: 80%;\n    }\n\n    body {\n        margin: 0;\n        min-width: 100%;\n        display: flex;\n        flex-direction: column;\n    }\n\n    #content {\n        flex-direction: column;\n        min-width: 100vw;\n        overflow: hidden;\n    }\n\n    header {\n        display: block;\n        position: relative;\n        opacity: 1;\n        min-width: 100vw;\n        display: flex;\n        background-color: black;\n    }\n\n    .button-nav-open {\n        max-width: 4em;\n        max-height: 4em;\n        text-align: center;\n        font-size: 15em;\n        color: white;\n        background-color: transparent;\n        border: none;\n        padding: 0;\n        padding-left: 50px;\n    }\n\n    nav {\n        max-width: none;\n        min-width: 100vw;\n        display: none;\n        opacity: 0;\n    }  \n\n    .nav-enter {\n        display: flex;\n    }\n    \n    .nav-enter-active {\n        opacity: 1;\n    }\n\n    .project-icon {\n        font-size: 5em;\n        width: 0.5em;\n    }\n\n    .nav-project-btn {\n        font-size: 1.5em;\n        padding-left: 10px;\n        padding-top: 12px;\n    }\n\n    .core-project-nav {\n        padding-top: 20px;\n        padding-bottom: 20px;\n    }\n\n    .myprojects-heading {\n        font-size: 2.2em;\n    }\n\n    .user-projects {\n        flex: 1;\n    }\n\n    .add-project.active {\n        margin-top: 40px;\n        width: 100%;\n        font-size: 2em;\n        flex: 0.5;\n    }\n\n    .add-project-form.active {\n        margin-top: 40px;\n        display: flex;\n        width: 100%;\n        flex: 1;\n    }\n\n    .add-project-input {\n    width: 100%;\n    font-size: 2em;\n    }\n\n    h1 {\n       font-size: 3em;\n       flex: 0.1;\n       max-height: 10vh;\n    }\n\n    .project-tasks {\n        flex: 3;\n        max-height: 60vh;\n        overflow: scroll;\n    }\n\n    .task {\n        font-size: 2em;\n    }\n\n    .store-img {\n        font-size: 2em;\n        width: 2em;\n        height: 2em;\n    }\n\n    .add-task-btn.active {\n        width: 50%;\n        flex: 1;\n        font-size: 2em;\n        max-height: 10vh;\n        margin-top: 30px\n    }\n\n    .add-task-form.active {\n        width: 50%;\n        flex: 1;\n        margin-top: 30px\n    }\n\n    .add-task-input {\n        font-size: 2em;\n        height: 3em;\n    }\n\n    body.edit-task .edit-form {\n        position: absolute;\n        width: 100%;\n        justify-content: flex-start;\n        padding-top: 40px;\n    }\n\n    form.edit-form p {\n        font-size: 3em;\n        margin-bottom: 0;\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        max-height: 22vh;\n        margin: 0;\n    }\n\n    form.edit-form > p > input {\n        font-size: 1em;\n    }\n\n    select {\n        font-size: 1em;\n    }\n\n    .submit-edit-btn {\n        flex: 1;\n        max-height: 15vh;\n        width: 100%;\n        display: flex;\n        justify-content: center;\n    }\n\n    .submit-edit-btn button {\n        flex: 1;\n        font-size: 2em;\n    }\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['html {\n    min-height: 100%;\n    font-size: 50%;\n    line-height: 1.5;\n}\n\nbody {\n    margin: 0;\n    background-color: #FCF6BD;;\n}\n\nbody.edit-task .edit-form {\n    display: flex;\n    visibility: visible;\n    opacity: 1;\n}\n\nheader {\n    display: none;\n    opacity: 0;\n    position: absolute;\n}\n\n#content {\n    display: flex;\n    min-height: 100vh;\n    font-size: 3em;\n}\n\nnav {\n    flex: 1;\n    max-width: 300px;\n    background-color: #FCF6BD;\n    background-color: #D0F4DE;\n    display: flex;\n    flex-direction: column;\n}\n\n.myprojects-heading {\n    align-self: center;\n    font-size: 1.2em;\n}\n\n.project-icon {\n    width: 8%;\n    height: 100%;\n}\n\n.nav-project-btn {\n    max-width: 100%;\n    flex: 1;\n    background-color: transparent;\n    border: none;\n    text-align: start;\n    font-size: 0.8em;\n    cursor: pointer;\n}\n\n.rm-project-btn {\n    max-width: 100%;\n    flex: 0.2;\n    background-color: transparent;\n    border: none;\n    color: red;\n    font-size: 0.8em;\n    cursor: pointer;\n}\n\n.core-projects {\n    display: flex;\n    flex-direction: column;\n    padding-top: 10px;\n}\n\n.user-projects {\n    display: flex;\n    flex-direction: column;\n    padding-top: 10px;\n}\n\n.user-project-nav {\n    display: flex;\n    padding-left: 20px;\n}\n\n.core-project-nav {\n    width: 100%;\n    display: flex;\n    padding-top: 10px;\n    padding-left: 20px;\n    background-color: #D0F4DE;\n}\n\n.core-project-nav:hover {\n    background-color: #D0F4DE;\n    background-color: #6bfca0\n}\n\n.user-project-nav:hover {\n    background-color: #6bfca0\n}\n\n.add-project.active {\n    display: block;\n    align-self: center;\n    margin-top: 10px;\n    cursor: pointer;\n    width: 50%;\n}\n\n.add-project {\n    display: none;\n}\n\n.add-project-form {\n    display: none;\n}\n\n.add-project-form.active {\n    display: block;\n    width: 50%;\n    align-self: center;\n}\n\n.add-project-input {\n    width: 100%;\n}\n\n.project {\n    flex: 3;\n    background-color: #D0F4DE;\n    background-color: #FCF6BD;\n    display: flex;\n    flex-direction: column;\n    padding-left: 50px;\n}\n\n\n.project-tasks {\n    display: flex;\n    flex-direction: column;\n}\n\n.task {\n    display: flex;\n    text-align: center;\n    align-items: center;\n}\n\n.task input {\n    display: none;\n}\n\n.task input + div:before {\n    content: "○";\n    margin-right: 10px;\n    align-self: center;\n    font-size: 2em;\n  }\n  \n.task input:checked + div:before {\n    content: "✔";\n}\n\n.task input:checked + div p {\n    text-decoration: line-through;\n}\n\n.task-title-date {\n    display: flex;\n    padding-left: 5px;\n    padding-right: 5px;\n    flex: 1;\n    text-align: center;\n}\n\n.task-title {\n    text-align: center;\n    padding-left: 5px;\n}\n\n.task-date{\n    padding-right: 5px;\n    background-color: #b8b1715e;\n    padding-left: 5px;\n}\n\n.task-btns {\n    display: inline;\n    text-align: center;\n    justify-self: center;\n    align-self: center;\n    flex: 1;\n}\n\n.rm-task-btn {\n    background-color: transparent;\n    border: none;\n    color: red;\n    font-size: 1em;\n    cursor: pointer;\n}\n\n.edit-task-btn {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n    font-size: 1em;\n}\n\n.store-task-btn {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n}\n\n.add-task-btn.active {\n    display: block;\n    align-self: center;\n    width: 25%;\n}\n\n.add-task-btn {\n    display: none;\n}\n\n.add-task-form.active {\n    display: block;\n    align-self: center;\n    width: 25%;\n}\n\n.add-task-form {\n    display: none;\n}\n\n.add-task-input {\n    width: 100%;\n    align-self: center;\n    padding-left: 10px;\n}\n\n.edit-form {\n    visibility: hidden;\n    opacity: 0;\n    min-height: 100%;\n    width: 300px;\n    background-color: #A9DEF9;\n    flex-direction: column;\n    justify-content: space-around;\n    padding-left: 20px;\n    box-sizing: border-box;\n    padding-right: 20px;\n}\n\n\n.submit-edit-btn {\n    align-self: center;\n}\n\n\n.submit-edit-btn  button {\n    cursor: pointer;\n}\n\n@media (max-width: 1000px) {\n\n    html {\n        font-size: 80%;\n    }\n\n    body {\n        margin: 0;\n        min-width: 100%;\n        display: flex;\n        flex-direction: column;\n    }\n\n    #content {\n        flex-direction: column;\n        min-width: 100vw;\n        overflow: hidden;\n    }\n\n    header {\n        display: block;\n        position: relative;\n        opacity: 1;\n        min-width: 100vw;\n        display: flex;\n        background-color: black;\n    }\n\n    .button-nav-open {\n        max-width: 4em;\n        max-height: 4em;\n        text-align: center;\n        font-size: 15em;\n        color: white;\n        background-color: transparent;\n        border: none;\n        padding: 0;\n        padding-left: 50px;\n    }\n\n    nav {\n        max-width: none;\n        min-width: 100vw;\n        display: none;\n        opacity: 0;\n    }  \n\n    .nav-enter {\n        display: flex;\n    }\n    \n    .nav-enter-active {\n        opacity: 1;\n    }\n\n    .project-icon {\n        font-size: 5em;\n        width: 0.5em;\n    }\n\n    .nav-project-btn {\n        font-size: 1.5em;\n        padding-left: 10px;\n        padding-top: 12px;\n    }\n\n    .core-project-nav {\n        padding-top: 20px;\n        padding-bottom: 20px;\n    }\n\n    .myprojects-heading {\n        font-size: 2.2em;\n    }\n\n    .user-projects {\n        flex: 1;\n    }\n\n    .add-project.active {\n        margin-top: 40px;\n        width: 100%;\n        font-size: 2em;\n        flex: 0.5;\n    }\n\n    .add-project-form.active {\n        margin-top: 40px;\n        display: flex;\n        width: 100%;\n        flex: 1;\n    }\n\n    .add-project-input {\n    width: 100%;\n    font-size: 2em;\n    }\n\n    h1 {\n       font-size: 3em;\n       flex: 0.1;\n       max-height: 10vh;\n    }\n\n    .project-tasks {\n        flex: 3;\n        max-height: 60vh;\n        overflow: scroll;\n    }\n\n    .task {\n        font-size: 2em;\n    }\n\n    .store-img {\n        font-size: 2em;\n        width: 2em;\n        height: 2em;\n    }\n\n    .add-task-btn.active {\n        width: 50%;\n        flex: 1;\n        font-size: 2em;\n        max-height: 10vh;\n        margin-top: 30px\n    }\n\n    .add-task-form.active {\n        width: 50%;\n        flex: 1;\n        margin-top: 30px\n    }\n\n    .add-task-input {\n        font-size: 2em;\n        height: 3em;\n    }\n\n    body.edit-task .edit-form {\n        position: absolute;\n        width: 100%;\n        justify-content: flex-start;\n        padding-top: 40px;\n    }\n\n    form.edit-form p {\n        font-size: 3em;\n        margin-bottom: 0;\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        max-height: 22vh;\n        margin: 0;\n    }\n\n    form.edit-form > p > input {\n        font-size: 1em;\n    }\n\n    select {\n        font-size: 1em;\n    }\n\n    .submit-edit-btn {\n        flex: 1;\n        max-height: 15vh;\n        width: 100%;\n        display: flex;\n        justify-content: center;\n    }\n\n    .submit-edit-btn button {\n        flex: 1;\n        font-size: 2em;\n    }\n}'],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=n(t);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,r){"string"==typeof n&&(n=[[null,n,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);r&&a[c[0]]||(e&&(c[2]?c[2]="".concat(e," and ").concat(c[2]):c[2]=e),t.push(c))}},t}},15:n=>{function t(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}n.exports=function(n){var e,r,a=(r=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var r,a,i=[],o=!0,s=!1;try{for(e=e.call(n);!(o=(r=e.next()).done)&&(i.push(r.value),!t||i.length!==t);o=!0);}catch(n){s=!0,a=n}finally{try{o||null==e.return||e.return()}finally{if(s)throw a}}return i}}(e,r)||function(n,e){if(n){if("string"==typeof n)return t(n,e);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(n,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[1],o=a[3];if(!o)return i;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),d="/*# ".concat(c," */"),l=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[i].concat(l).concat([d]).join("\n")}return[i].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var i={},o=[],s=0;s<n.length;s++){var c=n[s],d=r.base?c[0]+r.base:c[0],l=i[d]||0,u="".concat(d," ").concat(l);i[d]=l+1;var A=e(u),f={css:c[1],media:c[2],sourceMap:c[3]};-1!==A?(t[A].references++,t[A].updater(f)):t.push({identifier:u,updater:a(f,r),references:1}),o.push(u)}return o}function a(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;e.update(n=t)}else e.remove()}}n.exports=function(n,a){var i=r(n=n||[],a=a||{});return function(n){n=n||[];for(var o=0;o<i.length;o++){var s=e(i[o]);t[s].references--}for(var c=r(n,a),d=0;d<i.length;d++){var l=e(i[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=c}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r=e.css,a=e.media,i=e.sourceMap;a?n.setAttribute("media",a):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,n)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},721:(n,t,e)=>{n.exports=e.p+"8b0764482e8019516ad6.png"},529:(n,t,e)=>{n.exports=e.p+"16fea52aac827e91dd9f.png"},82:(n,t,e)=>{n.exports=e.p+"ee9ad128812b5b3450a5.png"},861:(n,t,e)=>{n.exports=e.p+"e76c6684388e542abc05.png"},41:(n,t,e)=>{n.exports=e.p+"1e90d9acf720a6463d93.png"},987:(n,t,e)=>{n.exports=e.p+"77125d863b7005502ea3.png"}},t={};function e(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,exports:{}};return n[r](i,i.exports,e),i.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),(()=>{const n=function(){let n={};return{on:function(t,e){n[t]=n[t]||[],n[t].push(e)},off:function(t,e){if(n[t])for(let r=0;r<n[t].length;r++)if(n[t][r]===e){n[t].splice(r,1);break}},emit:function t(e,r){let a=!1;arguments.length>t.length&&(r=[...arguments].slice(1),a=!0),n[e]&&!a&&n[e].forEach((n=>n(r))),n[e]&&a&&n[e].forEach((n=>n(...r)))}}}();function t(n){if(null===n||!0===n||!1===n)return NaN;var t=Number(n);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function r(n,t){if(t.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+t.length+" present")}function a(n){r(1,arguments);var t=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===t?new Date(n.getTime()):"number"==typeof n||"[object Number]"===t?new Date(n):("string"!=typeof n&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function i(n,e){r(2,arguments);var i=a(n),o=t(e);return isNaN(o)?new Date(NaN):o?(i.setDate(i.getDate()+o),i):i}function o(n,e){r(2,arguments);var a=t(e);return i(n,-a)}function s(n){var t=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return t.setUTCFullYear(n.getFullYear()),n.getTime()-t.getTime()}function c(n){r(1,arguments);var t=a(n);return t.setHours(0,0,0,0),t}var d=864e5;function l(n,t){r(2,arguments);var e=c(n),a=c(t),i=e.getTime()-s(e),o=a.getTime()-s(a);return Math.round((i-o)/d)}function u(n){r(1,arguments);var t=a(n),e=t.getDay();return e}function A(n,t){r(2,arguments);var e=t-u(n);return e<=0&&(e+=7),i(n,e)}function f(n,e){r(1,arguments);var i=e||{},o=i.locale,s=o&&o.options&&o.options.weekStartsOn,c=null==s?0:t(s),d=null==i.weekStartsOn?c:t(i.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=a(n),u=l.getDay(),A=(u<d?7:0)+u-d;return l.setDate(l.getDate()-A),l.setHours(0,0,0,0),l}var p=6048e5,m=e(529),h=e(721),g=e(987),C=e(82),b=e(41),v=e(861);function y(n){r(1,arguments);var t=a(n);return!isNaN(t)}(function(){const t=n=>{const t=b,e=i.slice();function r(n){return e.reduce(((t,e)=>(e.title===n&&t++,t)),0)}let a=r(n);return function t(e){if(r(e)<1)return void(n=e);let i=e;i=n+`(${a})`,a++,t(i)}(n),{title:n,icon:t,displayRule:function(n){return n.project===this.title},type:"user"}},e=[{title:"Inbox",icon:m,displayRule:function(n){return n.project===this.title},type:"core",storeTaskBtn:!0,addTaskBtn:!0},{title:"Today",icon:h,get date(){return o(new Date,0)},displayRule:function(n){return 0===l(this.date,n.date)},type:"core"},{title:"Tomorrow",icon:g,get date(){return o(new Date,-1)},displayRule:function(n){return 0===l(this.date,n.date)},type:"core"},{title:"This Week",icon:C,get date(){return function(n){return r(1,arguments),A(a(n),0)}(new Date)},displayRule:function(n){return 0===function(n,t,e){r(2,arguments);var a=f(n,e),i=f(t,e),o=a.getTime()-s(a),c=i.getTime()-s(i);return Math.round((o-c)/p)}(this.date,n.date,{weekStartsOn:1})},type:"core"},{title:"Someday",icon:v,displayRule:function(n){return n.project===this.title},type:"core"}];let i=[];const c=JSON.parse(localStorage.getItem("projects"))||[];function d(n){const e=t(n);i.push(e),localStorage.setItem("projects",JSON.stringify(i.slice()))}return localStorage.getItem("projects")&&c.forEach((n=>d(n.title))),n.on("updateCoreProjects",(function(){const t=e.slice();n.emit("deliverCoreProjects",t)})),n.on("updateUserProjects",(function(){const t=i.slice();n.emit("deliverUserProjects",t)})),n.on("createProject",d),n.on("removeProject",(function(n){const t=i.findIndex((t=>t===n));i=[...i.slice(0,t),...i.slice(t+1)],localStorage.setItem("projects",JSON.stringify(i.slice()))})),{}})().projects;var B={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function w(n){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.width?String(t.width):n.defaultWidth,r=n.formats[e]||n.formats[n.defaultWidth];return r}}var x,I={date:w({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:w({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:w({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},k={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function E(n){return function(t,e){var r,a=e||{};if("formatting"===(a.context?String(a.context):"standalone")&&n.formattingValues){var i=n.defaultFormattingWidth||n.defaultWidth,o=a.width?String(a.width):i;r=n.formattingValues[o]||n.formattingValues[i]}else{var s=n.defaultWidth,c=a.width?String(a.width):n.defaultWidth;r=n.values[c]||n.values[s]}return r[n.argumentCallback?n.argumentCallback(t):t]}}function T(n){return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.width,a=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],i=t.match(a);if(!i)return null;var o,s=i[0],c=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],d=Array.isArray(c)?M(c,(function(n){return n.test(s)})):j(c,(function(n){return n.test(s)}));o=n.valueCallback?n.valueCallback(d):d,o=e.valueCallback?e.valueCallback(o):o;var l=t.slice(s.length);return{value:o,rest:l}}}function j(n,t){for(var e in n)if(n.hasOwnProperty(e)&&t(n[e]))return e}function M(n,t){for(var e=0;e<n.length;e++)if(t(n[e]))return e}const D={code:"en-US",formatDistance:function(n,t,e){var r;return e=e||{},r="string"==typeof B[n]?B[n]:1===t?B[n].one:B[n].other.replace("{{count}}",t),e.addSuffix?e.comparison>0?"in "+r:r+" ago":r},formatLong:I,formatRelative:function(n,t,e,r){return k[n]},localize:{ordinalNumber:function(n,t){var e=Number(n),r=e%100;if(r>20||r<10)switch(r%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:E({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:E({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return Number(n)-1}}),month:E({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:E({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:E({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(x={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.match(x.matchPattern);if(!e)return null;var r=e[0],a=n.match(x.parsePattern);if(!a)return null;var i=x.valueCallback?x.valueCallback(a[0]):a[0];i=t.valueCallback?t.valueCallback(i):i;var o=n.slice(r.length);return{value:i,rest:o}}),era:T({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:T({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:T({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:T({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:T({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function S(n,e){r(2,arguments);var i=a(n).getTime(),o=t(e);return new Date(i+o)}function Q(n,e){r(2,arguments);var a=t(e);return S(n,-a)}function U(n,t){for(var e=n<0?"-":"",r=Math.abs(n).toString();r.length<t;)r="0"+r;return e+r}const P=function(n,t){var e=n.getUTCFullYear(),r=e>0?e:1-e;return U("yy"===t?r%100:r,t.length)},O=function(n,t){var e=n.getUTCMonth();return"M"===t?String(e+1):U(e+1,2)},z=function(n,t){return U(n.getUTCDate(),t.length)},L=function(n,t){return U(n.getUTCHours()%12||12,t.length)},W=function(n,t){return U(n.getUTCHours(),t.length)},Y=function(n,t){return U(n.getUTCMinutes(),t.length)},N=function(n,t){return U(n.getUTCSeconds(),t.length)},F=function(n,t){var e=t.length,r=n.getUTCMilliseconds();return U(Math.floor(r*Math.pow(10,e-3)),t.length)};var q=864e5;function H(n){r(1,arguments);var t=1,e=a(n),i=e.getUTCDay(),o=(i<t?7:0)+i-t;return e.setUTCDate(e.getUTCDate()-o),e.setUTCHours(0,0,0,0),e}function X(n){r(1,arguments);var t=a(n),e=t.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(e+1,0,4),i.setUTCHours(0,0,0,0);var o=H(i),s=new Date(0);s.setUTCFullYear(e,0,4),s.setUTCHours(0,0,0,0);var c=H(s);return t.getTime()>=o.getTime()?e+1:t.getTime()>=c.getTime()?e:e-1}function $(n){r(1,arguments);var t=X(n),e=new Date(0);e.setUTCFullYear(t,0,4),e.setUTCHours(0,0,0,0);var a=H(e);return a}var R=6048e5;function G(n,e){r(1,arguments);var i=e||{},o=i.locale,s=o&&o.options&&o.options.weekStartsOn,c=null==s?0:t(s),d=null==i.weekStartsOn?c:t(i.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=a(n),u=l.getUTCDay(),A=(u<d?7:0)+u-d;return l.setUTCDate(l.getUTCDate()-A),l.setUTCHours(0,0,0,0),l}function J(n,e){r(1,arguments);var i=a(n,e),o=i.getUTCFullYear(),s=e||{},c=s.locale,d=c&&c.options&&c.options.firstWeekContainsDate,l=null==d?1:t(d),u=null==s.firstWeekContainsDate?l:t(s.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var A=new Date(0);A.setUTCFullYear(o+1,0,u),A.setUTCHours(0,0,0,0);var f=G(A,e),p=new Date(0);p.setUTCFullYear(o,0,u),p.setUTCHours(0,0,0,0);var m=G(p,e);return i.getTime()>=f.getTime()?o+1:i.getTime()>=m.getTime()?o:o-1}function Z(n,e){r(1,arguments);var a=e||{},i=a.locale,o=i&&i.options&&i.options.firstWeekContainsDate,s=null==o?1:t(o),c=null==a.firstWeekContainsDate?s:t(a.firstWeekContainsDate),d=J(n,e),l=new Date(0);l.setUTCFullYear(d,0,c),l.setUTCHours(0,0,0,0);var u=G(l,e);return u}var V=6048e5;function _(n,t){var e=n>0?"-":"+",r=Math.abs(n),a=Math.floor(r/60),i=r%60;if(0===i)return e+String(a);var o=t||"";return e+String(a)+o+U(i,2)}function K(n,t){return n%60==0?(n>0?"-":"+")+U(Math.abs(n)/60,2):nn(n,t)}function nn(n,t){var e=t||"",r=n>0?"-":"+",a=Math.abs(n);return r+U(Math.floor(a/60),2)+e+U(a%60,2)}const tn={G:function(n,t,e){var r=n.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return e.era(r,{width:"abbreviated"});case"GGGGG":return e.era(r,{width:"narrow"});case"GGGG":default:return e.era(r,{width:"wide"})}},y:function(n,t,e){if("yo"===t){var r=n.getUTCFullYear(),a=r>0?r:1-r;return e.ordinalNumber(a,{unit:"year"})}return P(n,t)},Y:function(n,t,e,r){var a=J(n,r),i=a>0?a:1-a;return"YY"===t?U(i%100,2):"Yo"===t?e.ordinalNumber(i,{unit:"year"}):U(i,t.length)},R:function(n,t){return U(X(n),t.length)},u:function(n,t){return U(n.getUTCFullYear(),t.length)},Q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return U(r,2);case"Qo":return e.ordinalNumber(r,{unit:"quarter"});case"QQQ":return e.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return e.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return U(r,2);case"qo":return e.ordinalNumber(r,{unit:"quarter"});case"qqq":return e.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return e.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,t,e){var r=n.getUTCMonth();switch(t){case"M":case"MM":return O(n,t);case"Mo":return e.ordinalNumber(r+1,{unit:"month"});case"MMM":return e.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return e.month(r,{width:"wide",context:"formatting"})}},L:function(n,t,e){var r=n.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return U(r+1,2);case"Lo":return e.ordinalNumber(r+1,{unit:"month"});case"LLL":return e.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return e.month(r,{width:"wide",context:"standalone"})}},w:function(n,t,e,i){var o=function(n,t){r(1,arguments);var e=a(n),i=G(e,t).getTime()-Z(e,t).getTime();return Math.round(i/V)+1}(n,i);return"wo"===t?e.ordinalNumber(o,{unit:"week"}):U(o,t.length)},I:function(n,t,e){var i=function(n){r(1,arguments);var t=a(n),e=H(t).getTime()-$(t).getTime();return Math.round(e/R)+1}(n);return"Io"===t?e.ordinalNumber(i,{unit:"week"}):U(i,t.length)},d:function(n,t,e){return"do"===t?e.ordinalNumber(n.getUTCDate(),{unit:"date"}):z(n,t)},D:function(n,t,e){var i=function(n){r(1,arguments);var t=a(n),e=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var i=t.getTime(),o=e-i;return Math.floor(o/q)+1}(n);return"Do"===t?e.ordinalNumber(i,{unit:"dayOfYear"}):U(i,t.length)},E:function(n,t,e){var r=n.getUTCDay();switch(t){case"E":case"EE":case"EEE":return e.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(r,{width:"short",context:"formatting"});case"EEEE":default:return e.day(r,{width:"wide",context:"formatting"})}},e:function(n,t,e,r){var a=n.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return U(i,2);case"eo":return e.ordinalNumber(i,{unit:"day"});case"eee":return e.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(a,{width:"short",context:"formatting"});case"eeee":default:return e.day(a,{width:"wide",context:"formatting"})}},c:function(n,t,e,r){var a=n.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return U(i,t.length);case"co":return e.ordinalNumber(i,{unit:"day"});case"ccc":return e.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(a,{width:"narrow",context:"standalone"});case"cccccc":return e.day(a,{width:"short",context:"standalone"});case"cccc":default:return e.day(a,{width:"wide",context:"standalone"})}},i:function(n,t,e){var r=n.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return U(a,t.length);case"io":return e.ordinalNumber(a,{unit:"day"});case"iii":return e.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(r,{width:"short",context:"formatting"});case"iiii":default:return e.day(r,{width:"wide",context:"formatting"})}},a:function(n,t,e){var r=n.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,t,e){var r,a=n.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,t,e){var r,a=n.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,t,e){if("ho"===t){var r=n.getUTCHours()%12;return 0===r&&(r=12),e.ordinalNumber(r,{unit:"hour"})}return L(n,t)},H:function(n,t,e){return"Ho"===t?e.ordinalNumber(n.getUTCHours(),{unit:"hour"}):W(n,t)},K:function(n,t,e){var r=n.getUTCHours()%12;return"Ko"===t?e.ordinalNumber(r,{unit:"hour"}):U(r,t.length)},k:function(n,t,e){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===t?e.ordinalNumber(r,{unit:"hour"}):U(r,t.length)},m:function(n,t,e){return"mo"===t?e.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):Y(n,t)},s:function(n,t,e){return"so"===t?e.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):N(n,t)},S:function(n,t){return F(n,t)},X:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return K(a);case"XXXX":case"XX":return nn(a);case"XXXXX":case"XXX":default:return nn(a,":")}},x:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"x":return K(a);case"xxxx":case"xx":return nn(a);case"xxxxx":case"xxx":default:return nn(a,":")}},O:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+_(a,":");case"OOOO":default:return"GMT"+nn(a,":")}},z:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+_(a,":");case"zzzz":default:return"GMT"+nn(a,":")}},t:function(n,t,e,r){var a=r._originalDate||n;return U(Math.floor(a.getTime()/1e3),t.length)},T:function(n,t,e,r){return U((r._originalDate||n).getTime(),t.length)}};function en(n,t){switch(n){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function rn(n,t){switch(n){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}const an={p:rn,P:function(n,t){var e,r=n.match(/(P+)(p+)?/),a=r[1],i=r[2];if(!i)return en(n,t);switch(a){case"P":e=t.dateTime({width:"short"});break;case"PP":e=t.dateTime({width:"medium"});break;case"PPP":e=t.dateTime({width:"long"});break;case"PPPP":default:e=t.dateTime({width:"full"})}return e.replace("{{date}}",en(a,t)).replace("{{time}}",rn(i,t))}};var on=["D","DD"],sn=["YY","YYYY"];function cn(n){return-1!==on.indexOf(n)}function dn(n){return-1!==sn.indexOf(n)}function ln(n,t,e){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://git.io/fxCyr"))}var un=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,An=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,fn=/^'([^]*?)'?$/,pn=/''/g,mn=/[a-zA-Z]/;function hn(n,e,i){r(2,arguments);var o=String(e),c=i||{},d=c.locale||D,l=d.options&&d.options.firstWeekContainsDate,u=null==l?1:t(l),A=null==c.firstWeekContainsDate?u:t(c.firstWeekContainsDate);if(!(A>=1&&A<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=d.options&&d.options.weekStartsOn,p=null==f?0:t(f),m=null==c.weekStartsOn?p:t(c.weekStartsOn);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!d.localize)throw new RangeError("locale must contain localize property");if(!d.formatLong)throw new RangeError("locale must contain formatLong property");var h=a(n);if(!y(h))throw new RangeError("Invalid time value");var g=s(h),C=Q(h,g),b={firstWeekContainsDate:A,weekStartsOn:m,locale:d,_originalDate:h},v=o.match(An).map((function(n){var t=n[0];return"p"===t||"P"===t?(0,an[t])(n,d.formatLong,b):n})).join("").match(un).map((function(t){if("''"===t)return"'";var r=t[0];if("'"===r)return gn(t);var a=tn[r];if(a)return!c.useAdditionalWeekYearTokens&&dn(t)&&ln(t,e,n),!c.useAdditionalDayOfYearTokens&&cn(t)&&ln(t,e,n),a(C,t,d.localize,b);if(r.match(mn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return t})).join("");return v}function gn(n){return n.match(fn)[1].replace(pn,"'")}const Cn=(n,t,e=!1,i=!1)=>(i&&(i=function(n){if(r(1,arguments),"string"==typeof n){var t=n.match(/(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})(?:\.(\d{0,7}))?(?:Z|(.)(\d{2}):?(\d{2})?)?/);return t?new Date(Date.UTC(+t[1],+t[2]-1,+t[3],+t[4]-(+t[9]||0)*("-"==t[8]?-1:1),+t[5]-(+t[10]||0)*("-"==t[8]?-1:1),+t[6],+((t[7]||"0")+"00").substring(0,3))):new Date(NaN)}return a(n)}(i)),{title:n,project:t,done:e,date:i,formatDate:function(){if(this.date)return hn(this.date,"d.MMM")}});!function(){let t=[];function e(n){const e=Cn(n.title,n.project,n.done,n.date);t.push(e),localStorage.setItem("tasks",JSON.stringify(t.slice()))}localStorage.getItem("tasks")&&JSON.parse(localStorage.getItem("tasks")).forEach((n=>e(n))),n.on("updateTasks",(function(){n.emit("deliverTasks",t.slice())})),n.on("createTask",e),n.on("removeTask",(function(n){const e=t.findIndex((t=>t===n));t=[...t.slice(0,e),...t.slice(e+1)],localStorage.setItem("tasks",JSON.stringify(t.slice()))})),n.on("editTask",(function(n,e){const r=t.findIndex((t=>t===n));Object.assign(t[r],e),localStorage.setItem("tasks",JSON.stringify(t.slice()))}))}();var bn=e(379),vn=e.n(bn),yn=e(795),Bn=e.n(yn),wn=e(569),xn=e.n(wn),In=e(565),kn=e.n(In),En=e(216),Tn=e.n(En),jn=e(589),Mn=e.n(jn),Dn=e(426),Sn={};Sn.styleTagTransform=Mn(),Sn.setAttributes=kn(),Sn.insert=xn().bind(null,"head"),Sn.domAPI=Bn(),Sn.insertStyleElement=Tn(),vn()(Dn.Z,Sn),Dn.Z&&Dn.Z.locals&&Dn.Z.locals,function(){let t=[],e=[],r=[],a=!1;const i=document.createElement("header");document.body.appendChild(i);const o=document.createElement("button");o.textContent="≡",o.classList.add("button-nav-open"),i.appendChild(o);const s=document.createElement("div");s.id="content",document.body.appendChild(s);const c=document.createElement("nav");c.id="nav",s.appendChild(c);const d=document.createElement("div");d.classList.add("core-projects"),c.appendChild(d);const l=document.createElement("h2");l.classList.add("myprojects-heading"),l.textContent="My Projects",c.appendChild(l);const u=document.createElement("div");u.classList.add("user-projects"),c.appendChild(u);const A=document.createElement("button");A.textContent="➕ New Project",A.classList.add("add-project","active"),c.appendChild(A);const f=document.createElement("form");f.classList.add("add-project-form"),f.innerHTML='<input class="add-project-input" name="newProjectTitle" type="text" placeholder="Project Title" value="New Project" required>',c.appendChild(f);const p=document.createElement("div");p.classList.add("project"),s.appendChild(p);const m=document.createElement("form");function h(){n.emit("updateTasks")}function g(){n.emit("updateCoreProjects"),n.emit("updateUserProjects")}function C(a,i){g(),a.innerHTML=i.map(((n,t)=>`\n            <div class="${n.type}-project-nav">\n            <img class="project-icon" src="${n.icon}">\n            <button data-idx="${t}" class="nav-project-btn">${n.title}</button>\n            ${"user"===n.type?`<button data-idx="${t}" class="rm-project-btn">❌</button>`:""}\n            </div>\n            `)).join(""),a.querySelectorAll(".nav-project-btn").forEach((n=>n.addEventListener("click",(function(){const n=parseInt(this.dataset.idx);b(i.slice()[n],p)})))),a.querySelectorAll(".rm-project-btn").forEach((o=>o.addEventListener("click",(function(){const o=parseInt(this.dataset.idx),s=i.slice()[o];var c;c=s,n.emit("removeProject",c),g(),g(),function(n,t){t.length>0&&t.map((t=>{t.project===n.title&&B(t)}))}(s,r),C(a,t),b(t[o-1]||e[0],p)}))))}function b(t,e){e.innerHTML="";const a=document.createElement("h1");a.textContent=t.title,e.appendChild(a);const i=document.createElement("div");i.classList.add("project-tasks"),e.appendChild(i),y(i,t,r),("user"===t.type||"addTaskBtn"in t)&&function(t,e,a){const i=document.createElement("button");i.classList.add("add-task-btn","active"),i.textContent="➕ New Task",t.appendChild(i);const o=document.createElement("form");o.classList.add("add-task-form"),o.innerHTML='<input class="add-task-input" name="newTaskTitle" type="text" placeholder="Task Title" value="New Task" required>',t.appendChild(o),i.addEventListener("click",(function(){o.classList.add("active"),i.classList.remove("active")})),o.addEventListener("submit",(function(t){t.preventDefault();const s=this.newTaskTitle.value;!function(t,e){n.emit("createTask",{project:t,title:e}),h()}(e.title,s),o.classList.remove("active"),i.classList.add("active"),y(a,e,r),this.reset()}))}(e,t,i)}function y(e,a,i){h(),e.innerHTML="",e.innerHTML=i.map(((n,t)=>{if(!a.displayRule(n))return;let e=n.title;return"core"===a.type&&n.project!==a.title&&(e+=" ("+n.project+")"),`\n            <label class="task" for="task${t}">\n            <input data-idx="${t}" class="task-checkbox" id="task${t}" type="checkbox" name="tasks" value="${n.title}" ${n.done?"checked":""}/>\n            <div class="task-title-date">${n.date?'<p class="task-date">'+n.formatDate()+"</p>":""}<p class="task-title" style="display: inline">${e}</p>\n            </div>\n            <div class="task-btns">\n            <button data-idx="${t}" class="rm-task-btn">❌</button>\n            <button data-idx="${t}" class="edit-task-btn">🖉</button>\n            ${"user"===a.type||"storeTaskBtn"in a?`<button data-idx="${t}" class="store-task-btn"><img class="store-img" src="${v}"></button>`:""}\n            </div>\n            </label>\n            `})).join(""),e.querySelectorAll(".rm-task-btn").forEach((n=>n.addEventListener("click",(function(){const n=parseInt(this.dataset.idx);B(r.slice()[n]),y(e,a,r)})))),e.querySelectorAll(".edit-task-btn").forEach((i=>i.addEventListener("click",(function(){const i=parseInt(this.dataset.idx);!function(e,a,i,o){o.innerHTML="";const s=document.querySelectorAll("button");s.forEach((n=>n.disabled=!0)),document.body.classList.add("edit-task");let c=!1;var d,l;e.date&&(c=hn(e.date,"yyyy-MM-dd")),o.innerHTML=`\n        <p>Title: <input type="text" name="titleinput" placeholder="Title" value="${e.title}" required></p>\n        <p>Project: <select name="projectselect"><option value="${e.project}">${e.project}</option>${d=t,l=e.project,d.map((n=>{if(n.title!==l)return`<option value="${n.title}">${n.title}</option>`})).join("")}</select></p>\n        <p>Due-date: <input type="date" name="dateinput" value="${c||""}"></p>\n        <div class="submit-edit-btn">\n        <button type="submit" name="submitbtn">Edit</button>\n        <button name="cancelbtn">Cancel</button>\n        </div>`,o.addEventListener("submit",(function t(c){if(c.preventDefault(),c.submitter===o.cancelbtn)return s.forEach((n=>n.disabled=!1)),o.removeEventListener("submit",t),o.reset(),void document.body.classList.remove("edit-task");const d=this.titleinput.value,l=this.projectselect.value;let u=this.dateinput.value||null;"string"==typeof u?(u=function(n){return new Date(n.replaceAll("-",","))}(u),n.emit("editTask",e,{title:d,project:l,date:u})):n.emit("editTask",e,{title:d,project:l}),y(a,i,r),document.body.classList.remove("edit-task"),s.forEach((n=>n.disabled=!1)),o.removeEventListener("submit",t)})),o.reset()}(r.slice()[i],e,a,m)})))),e.querySelectorAll(".store-task-btn").forEach((t=>t.addEventListener("click",(function(){const t=parseInt(this.dataset.idx),i=r.slice()[t];n.emit("editTask",i,{project:"Someday"}),y(e,a,r)})))),e.querySelectorAll(".task-checkbox").forEach((t=>t.addEventListener("click",(function(){const t=parseInt(this.dataset.idx),e=r.slice()[t],a=!e.done;n.emit("editTask",e,{done:a})}))))}function B(t){n.emit("removeTask",t),h()}m.classList.add("edit-form"),s.appendChild(m),n.on("deliverUserProjects",(function(n){t=n})),n.on("deliverCoreProjects",(function(n){e=n})),n.on("deliverTasks",(function(n){r=n})),g(),h(),C(d,e),C(u,t),b(e[0],p),A.addEventListener("click",(function(n){f.classList.add("active"),A.classList.remove("active")})),f.addEventListener("submit",(function(e){var r;e.preventDefault(),r=this.newProjectTitle.value,n.emit("createProject",r),g(),C(u,t),f.classList.remove("active"),A.classList.add("active"),this.reset()})),o.addEventListener("click",(()=>{var n;a?(a=!a,(n=c).classList.remove("nav-enter"),n.classList.remove("nav-enter-active")):function(n){a=!a,n.classList.add("nav-enter"),setTimeout((()=>n.classList.contains("nav-enter")&&n.classList.add("nav-enter-active")),150)}(c)}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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QUFPLHFCQVQzQixTQUF3QnljLEdBQ3RCekQsR0FBV0EsRUFDWHlELEVBQVFwRCxVQUFVQyxJQUFJLGFBQ3RCb0QsWUFBVyxJQUFNRCxFQUFRcEQsVUFBVXNELFNBQVMsY0FBZ0JGLEVBQVFwRCxVQUFVQyxJQUFJLHFCQUFxQixLQTBCckdzRCxDQUFlckQsTUF0WUgsSSIsInNvdXJjZXMiOlsid2VicGFjazovL3RvZG9saXN0Ly4vc3JjL3N0eWxlLmNzcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9hcGkuanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXMuanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL3RvZG9saXN0L3dlYnBhY2svYm9vdHN0cmFwIiwid2VicGFjazovL3RvZG9saXN0L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL3RvZG9saXN0L3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly90b2RvbGlzdC93ZWJwYWNrL3J1bnRpbWUvZ2xvYmFsIiwid2VicGFjazovL3RvZG9saXN0L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vdG9kb2xpc3Qvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9zcmMvZXZlbnRzLmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3RvSW50ZWdlci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL3RvRGF0ZS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkRGF5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3ViRGF5cy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdGFydE9mRGF5L2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9kaWZmZXJlbmNlSW5DYWxlbmRhckRheXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2dldERheS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbmV4dERheS9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vc3RhcnRPZldlZWsvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2RpZmZlcmVuY2VJbkNhbGVuZGFyV2Vla3MvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2lzVmFsaWQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9zcmMvcHJvamVjdHMuanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL25leHRTdW5kYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2Zvcm1hdERpc3RhbmNlL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0TG9uZy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL2VuLVVTL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9fbGliL2J1aWxkTG9jYWxpemVGbi9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vbG9jYWxlL19saWIvYnVpbGRNYXRjaEZuL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2xvY2FsZS9lbi1VUy9fbGliL2xvY2FsaXplL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9sb2NhbGUvZW4tVVMvX2xpYi9tYXRjaC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9zdWJNaWxsaXNlY29uZHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9saWdodEZvcm1hdHRlcnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL19saWIvZ2V0VVRDRGF5T2ZZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ0lTT1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENJU09XZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENJU09XZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9nZXRVVENXZWVrL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9mb3JtYXR0ZXJzL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vbm9kZV9tb2R1bGVzL2RhdGUtZm5zL2VzbS9fbGliL2Zvcm1hdC9sb25nRm9ybWF0dGVycy9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vX2xpYi9wcm90ZWN0ZWRUb2tlbnMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vdG9kb2xpc3QvLi9ub2RlX21vZHVsZXMvZGF0ZS1mbnMvZXNtL2Zvcm1hdC9pbmRleC5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL3NyYy90YXNrcy5qcyIsIndlYnBhY2s6Ly90b2RvbGlzdC8uL25vZGVfbW9kdWxlcy9kYXRlLWZucy9lc20vcGFyc2VKU09OL2luZGV4LmpzIiwid2VicGFjazovL3RvZG9saXN0Ly4vc3JjL3N0eWxlLmNzcz83MTYzIiwid2VicGFjazovL3RvZG9saXN0Ly4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xudmFyIF9fX0NTU19MT0FERVJfRVhQT1JUX19fID0gX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfQVBJX1NPVVJDRU1BUF9JTVBPUlRfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiaHRtbCB7XFxuICAgIG1pbi1oZWlnaHQ6IDEwMCU7XFxuICAgIGZvbnQtc2l6ZTogNTAlO1xcbiAgICBsaW5lLWhlaWdodDogMS41O1xcbn1cXG5cXG5ib2R5IHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkNGNkJEOztcXG59XFxuXFxuYm9keS5lZGl0LXRhc2sgLmVkaXQtZm9ybSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XFxuICAgIG9wYWNpdHk6IDE7XFxufVxcblxcbmhlYWRlciB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuXFxuI2NvbnRlbnQge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gICAgZm9udC1zaXplOiAzZW07XFxufVxcblxcbm5hdiB7XFxuICAgIGZsZXg6IDE7XFxuICAgIG1heC13aWR0aDogMzAwcHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGQ0Y2QkQ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNEMEY0REU7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbi5teXByb2plY3RzLWhlYWRpbmcge1xcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxuICAgIGZvbnQtc2l6ZTogMS4yZW07XFxufVxcblxcbi5wcm9qZWN0LWljb24ge1xcbiAgICB3aWR0aDogOCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG59XFxuXFxuLm5hdi1wcm9qZWN0LWJ0biB7XFxuICAgIG1heC13aWR0aDogMTAwJTtcXG4gICAgZmxleDogMTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgdGV4dC1hbGlnbjogc3RhcnQ7XFxuICAgIGZvbnQtc2l6ZTogMC44ZW07XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnJtLXByb2plY3QtYnRuIHtcXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgICBmbGV4OiAwLjI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGNvbG9yOiByZWQ7XFxuICAgIGZvbnQtc2l6ZTogMC44ZW07XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmNvcmUtcHJvamVjdHMge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcXG59XFxuXFxuLnVzZXItcHJvamVjdHMge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcXG59XFxuXFxuLnVzZXItcHJvamVjdC1uYXYge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XFxufVxcblxcbi5jb3JlLXByb2plY3QtbmF2IHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xcbiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNEMEY0REU7XFxufVxcblxcbi5jb3JlLXByb2plY3QtbmF2OmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0QwRjRERTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzZiZmNhMFxcbn1cXG5cXG4udXNlci1wcm9qZWN0LW5hdjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2YmZjYTBcXG59XFxuXFxuLmFkZC1wcm9qZWN0LmFjdGl2ZSB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxuICAgIG1hcmdpbi10b3A6IDEwcHg7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgd2lkdGg6IDUwJTtcXG59XFxuXFxuLmFkZC1wcm9qZWN0IHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmFkZC1wcm9qZWN0LWZvcm0ge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uYWRkLXByb2plY3QtZm9ybS5hY3RpdmUge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgd2lkdGg6IDUwJTtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbn1cXG5cXG4uYWRkLXByb2plY3QtaW5wdXQge1xcbiAgICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLnByb2plY3Qge1xcbiAgICBmbGV4OiAzO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRDBGNERFO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkNGNkJEO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDUwcHg7XFxufVxcblxcblxcbi5wcm9qZWN0LXRhc2tzIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXFxuLnRhc2sge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi50YXNrIGlucHV0IHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnRhc2sgaW5wdXQgKyBkaXY6YmVmb3JlIHtcXG4gICAgY29udGVudDogXFxcIuKXi1xcXCI7XFxuICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgICBmb250LXNpemU6IDJlbTtcXG4gIH1cXG4gIFxcbi50YXNrIGlucHV0OmNoZWNrZWQgKyBkaXY6YmVmb3JlIHtcXG4gICAgY29udGVudDogXFxcIuKclFxcXCI7XFxufVxcblxcbi50YXNrIGlucHV0OmNoZWNrZWQgKyBkaXYgcCB7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xcbn1cXG5cXG4udGFzay10aXRsZS1kYXRlIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgcGFkZGluZy1sZWZ0OiA1cHg7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDVweDtcXG4gICAgZmxleDogMTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4udGFzay10aXRsZSB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgcGFkZGluZy1sZWZ0OiA1cHg7XFxufVxcblxcbi50YXNrLWRhdGV7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDVweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2I4YjE3MTVlO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDVweDtcXG59XFxuXFxuLnRhc2stYnRucyB7XFxuICAgIGRpc3BsYXk6IGlubGluZTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgICBmbGV4OiAxO1xcbn1cXG5cXG4ucm0tdGFzay1idG4ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBjb2xvcjogcmVkO1xcbiAgICBmb250LXNpemU6IDFlbTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uZWRpdC10YXNrLWJ0biB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgZm9udC1zaXplOiAxZW07XFxufVxcblxcbi5zdG9yZS10YXNrLWJ0biB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmFkZC10YXNrLWJ0bi5hY3RpdmUge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgICB3aWR0aDogMjUlO1xcbn1cXG5cXG4uYWRkLXRhc2stYnRuIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmFkZC10YXNrLWZvcm0uYWN0aXZlIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcXG4gICAgd2lkdGg6IDI1JTtcXG59XFxuXFxuLmFkZC10YXNrLWZvcm0ge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uYWRkLXRhc2staW5wdXQge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxufVxcblxcbi5lZGl0LWZvcm0ge1xcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIG1pbi1oZWlnaHQ6IDEwMCU7XFxuICAgIHdpZHRoOiAzMDBweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0E5REVGOTtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxuICAgIHBhZGRpbmctbGVmdDogMjBweDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgcGFkZGluZy1yaWdodDogMjBweDtcXG59XFxuXFxuXFxuLnN1Ym1pdC1lZGl0LWJ0biB7XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcXG59XFxuXFxuXFxuLnN1Ym1pdC1lZGl0LWJ0biAgYnV0dG9uIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG5AbWVkaWEgKG1heC13aWR0aDogMTAwMHB4KSB7XFxuXFxuICAgIGh0bWwge1xcbiAgICAgICAgZm9udC1zaXplOiA4MCU7XFxuICAgIH1cXG5cXG4gICAgYm9keSB7XFxuICAgICAgICBtYXJnaW46IDA7XFxuICAgICAgICBtaW4td2lkdGg6IDEwMCU7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgfVxcblxcbiAgICAjY29udGVudCB7XFxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgICAgbWluLXdpZHRoOiAxMDB2dztcXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIH1cXG5cXG4gICAgaGVhZGVyIHtcXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgb3BhY2l0eTogMTtcXG4gICAgICAgIG1pbi13aWR0aDogMTAwdnc7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxuICAgIH1cXG5cXG4gICAgLmJ1dHRvbi1uYXYtb3BlbiB7XFxuICAgICAgICBtYXgtd2lkdGg6IDRlbTtcXG4gICAgICAgIG1heC1oZWlnaHQ6IDRlbTtcXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgIGZvbnQtc2l6ZTogMTVlbTtcXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICAgICAgYm9yZGVyOiBub25lO1xcbiAgICAgICAgcGFkZGluZzogMDtcXG4gICAgICAgIHBhZGRpbmctbGVmdDogNTBweDtcXG4gICAgfVxcblxcbiAgICBuYXYge1xcbiAgICAgICAgbWF4LXdpZHRoOiBub25lO1xcbiAgICAgICAgbWluLXdpZHRoOiAxMDB2dztcXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgICAgICBvcGFjaXR5OiAwO1xcbiAgICB9ICBcXG5cXG4gICAgLm5hdi1lbnRlciB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICB9XFxuICAgIFxcbiAgICAubmF2LWVudGVyLWFjdGl2ZSB7XFxuICAgICAgICBvcGFjaXR5OiAxO1xcbiAgICB9XFxuXFxuICAgIC5wcm9qZWN0LWljb24ge1xcbiAgICAgICAgZm9udC1zaXplOiA1ZW07XFxuICAgICAgICB3aWR0aDogMC41ZW07XFxuICAgIH1cXG5cXG4gICAgLm5hdi1wcm9qZWN0LWJ0biB7XFxuICAgICAgICBmb250LXNpemU6IDEuNWVtO1xcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xcbiAgICAgICAgcGFkZGluZy10b3A6IDEycHg7XFxuICAgIH1cXG5cXG4gICAgLmNvcmUtcHJvamVjdC1uYXYge1xcbiAgICAgICAgcGFkZGluZy10b3A6IDIwcHg7XFxuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMjBweDtcXG4gICAgfVxcblxcbiAgICAubXlwcm9qZWN0cy1oZWFkaW5nIHtcXG4gICAgICAgIGZvbnQtc2l6ZTogMi4yZW07XFxuICAgIH1cXG5cXG4gICAgLnVzZXItcHJvamVjdHMge1xcbiAgICAgICAgZmxleDogMTtcXG4gICAgfVxcblxcbiAgICAuYWRkLXByb2plY3QuYWN0aXZlIHtcXG4gICAgICAgIG1hcmdpbi10b3A6IDQwcHg7XFxuICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgIGZvbnQtc2l6ZTogMmVtO1xcbiAgICAgICAgZmxleDogMC41O1xcbiAgICB9XFxuXFxuICAgIC5hZGQtcHJvamVjdC1mb3JtLmFjdGl2ZSB7XFxuICAgICAgICBtYXJnaW4tdG9wOiA0MHB4O1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgZmxleDogMTtcXG4gICAgfVxcblxcbiAgICAuYWRkLXByb2plY3QtaW5wdXQge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgZm9udC1zaXplOiAyZW07XFxuICAgIH1cXG5cXG4gICAgaDEge1xcbiAgICAgICBmb250LXNpemU6IDNlbTtcXG4gICAgICAgZmxleDogMC4xO1xcbiAgICAgICBtYXgtaGVpZ2h0OiAxMHZoO1xcbiAgICB9XFxuXFxuICAgIC5wcm9qZWN0LXRhc2tzIHtcXG4gICAgICAgIGZsZXg6IDM7XFxuICAgICAgICBtYXgtaGVpZ2h0OiA2MHZoO1xcbiAgICAgICAgb3ZlcmZsb3c6IHNjcm9sbDtcXG4gICAgfVxcblxcbiAgICAudGFzayB7XFxuICAgICAgICBmb250LXNpemU6IDJlbTtcXG4gICAgfVxcblxcbiAgICAuc3RvcmUtaW1nIHtcXG4gICAgICAgIGZvbnQtc2l6ZTogMmVtO1xcbiAgICAgICAgd2lkdGg6IDJlbTtcXG4gICAgICAgIGhlaWdodDogMmVtO1xcbiAgICB9XFxuXFxuICAgIC5hZGQtdGFzay1idG4uYWN0aXZlIHtcXG4gICAgICAgIHdpZHRoOiA1MCU7XFxuICAgICAgICBmbGV4OiAxO1xcbiAgICAgICAgZm9udC1zaXplOiAyZW07XFxuICAgICAgICBtYXgtaGVpZ2h0OiAxMHZoO1xcbiAgICAgICAgbWFyZ2luLXRvcDogMzBweFxcbiAgICB9XFxuXFxuICAgIC5hZGQtdGFzay1mb3JtLmFjdGl2ZSB7XFxuICAgICAgICB3aWR0aDogNTAlO1xcbiAgICAgICAgZmxleDogMTtcXG4gICAgICAgIG1hcmdpbi10b3A6IDMwcHhcXG4gICAgfVxcblxcbiAgICAuYWRkLXRhc2staW5wdXQge1xcbiAgICAgICAgZm9udC1zaXplOiAyZW07XFxuICAgICAgICBoZWlnaHQ6IDNlbTtcXG4gICAgfVxcblxcbiAgICBib2R5LmVkaXQtdGFzayAuZWRpdC1mb3JtIHtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgICAgICAgcGFkZGluZy10b3A6IDQwcHg7XFxuICAgIH1cXG5cXG4gICAgZm9ybS5lZGl0LWZvcm0gcCB7XFxuICAgICAgICBmb250LXNpemU6IDNlbTtcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDA7XFxuICAgICAgICBmbGV4OiAxO1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICBtYXgtaGVpZ2h0OiAyMnZoO1xcbiAgICAgICAgbWFyZ2luOiAwO1xcbiAgICB9XFxuXFxuICAgIGZvcm0uZWRpdC1mb3JtID4gcCA+IGlucHV0IHtcXG4gICAgICAgIGZvbnQtc2l6ZTogMWVtO1xcbiAgICB9XFxuXFxuICAgIHNlbGVjdCB7XFxuICAgICAgICBmb250LXNpemU6IDFlbTtcXG4gICAgfVxcblxcbiAgICAuc3VibWl0LWVkaXQtYnRuIHtcXG4gICAgICAgIGZsZXg6IDE7XFxuICAgICAgICBtYXgtaGVpZ2h0OiAxNXZoO1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIH1cXG5cXG4gICAgLnN1Ym1pdC1lZGl0LWJ0biBidXR0b24ge1xcbiAgICAgICAgZmxleDogMTtcXG4gICAgICAgIGZvbnQtc2l6ZTogMmVtO1xcbiAgICB9XFxufVwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL3NyYy9zdHlsZS5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7SUFDSSxnQkFBZ0I7SUFDaEIsY0FBYztJQUNkLGdCQUFnQjtBQUNwQjs7QUFFQTtJQUNJLFNBQVM7SUFDVCx5QkFBeUI7QUFDN0I7O0FBRUE7SUFDSSxhQUFhO0lBQ2IsbUJBQW1CO0lBQ25CLFVBQVU7QUFDZDs7QUFFQTtJQUNJLGFBQWE7SUFDYixVQUFVO0lBQ1Ysa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixjQUFjO0FBQ2xCOztBQUVBO0lBQ0ksT0FBTztJQUNQLGdCQUFnQjtJQUNoQix5QkFBeUI7SUFDekIseUJBQXlCO0lBQ3pCLGFBQWE7SUFDYixzQkFBc0I7QUFDMUI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsZ0JBQWdCO0FBQ3BCOztBQUVBO0lBQ0ksU0FBUztJQUNULFlBQVk7QUFDaEI7O0FBRUE7SUFDSSxlQUFlO0lBQ2YsT0FBTztJQUNQLDZCQUE2QjtJQUM3QixZQUFZO0lBQ1osaUJBQWlCO0lBQ2pCLGdCQUFnQjtJQUNoQixlQUFlO0FBQ25COztBQUVBO0lBQ0ksZUFBZTtJQUNmLFNBQVM7SUFDVCw2QkFBNkI7SUFDN0IsWUFBWTtJQUNaLFVBQVU7SUFDVixnQkFBZ0I7SUFDaEIsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixzQkFBc0I7SUFDdEIsaUJBQWlCO0FBQ3JCOztBQUVBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxhQUFhO0lBQ2Isa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksV0FBVztJQUNYLGFBQWE7SUFDYixpQkFBaUI7SUFDakIsa0JBQWtCO0lBQ2xCLHlCQUF5QjtBQUM3Qjs7QUFFQTtJQUNJLHlCQUF5QjtJQUN6QjtBQUNKOztBQUVBO0lBQ0k7QUFDSjs7QUFFQTtJQUNJLGNBQWM7SUFDZCxrQkFBa0I7SUFDbEIsZ0JBQWdCO0lBQ2hCLGVBQWU7SUFDZixVQUFVO0FBQ2Q7O0FBRUE7SUFDSSxhQUFhO0FBQ2pCOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLGNBQWM7SUFDZCxVQUFVO0lBQ1Ysa0JBQWtCO0FBQ3RCOztBQUVBO0lBQ0ksV0FBVztBQUNmOztBQUVBO0lBQ0ksT0FBTztJQUNQLHlCQUF5QjtJQUN6Qix5QkFBeUI7SUFDekIsYUFBYTtJQUNiLHNCQUFzQjtJQUN0QixrQkFBa0I7QUFDdEI7OztBQUdBO0lBQ0ksYUFBYTtJQUNiLHNCQUFzQjtBQUMxQjs7QUFFQTtJQUNJLGFBQWE7SUFDYixrQkFBa0I7SUFDbEIsbUJBQW1CO0FBQ3ZCOztBQUVBO0lBQ0ksYUFBYTtBQUNqQjs7QUFFQTtJQUNJLFlBQVk7SUFDWixrQkFBa0I7SUFDbEIsa0JBQWtCO0lBQ2xCLGNBQWM7RUFDaEI7O0FBRUY7SUFDSSxZQUFZO0FBQ2hCOztBQUVBO0lBQ0ksNkJBQTZCO0FBQ2pDOztBQUVBO0lBQ0ksYUFBYTtJQUNiLGlCQUFpQjtJQUNqQixrQkFBa0I7SUFDbEIsT0FBTztJQUNQLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixpQkFBaUI7QUFDckI7O0FBRUE7SUFDSSxrQkFBa0I7SUFDbEIsMkJBQTJCO0lBQzNCLGlCQUFpQjtBQUNyQjs7QUFFQTtJQUNJLGVBQWU7SUFDZixrQkFBa0I7SUFDbEIsb0JBQW9CO0lBQ3BCLGtCQUFrQjtJQUNsQixPQUFPO0FBQ1g7O0FBRUE7SUFDSSw2QkFBNkI7SUFDN0IsWUFBWTtJQUNaLFVBQVU7SUFDVixjQUFjO0lBQ2QsZUFBZTtBQUNuQjs7QUFFQTtJQUNJLDZCQUE2QjtJQUM3QixZQUFZO0lBQ1osZUFBZTtJQUNmLGNBQWM7QUFDbEI7O0FBRUE7SUFDSSw2QkFBNkI7SUFDN0IsWUFBWTtJQUNaLGVBQWU7QUFDbkI7O0FBRUE7SUFDSSxjQUFjO0lBQ2Qsa0JBQWtCO0lBQ2xCLFVBQVU7QUFDZDs7QUFFQTtJQUNJLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxjQUFjO0lBQ2Qsa0JBQWtCO0lBQ2xCLFVBQVU7QUFDZDs7QUFFQTtJQUNJLGFBQWE7QUFDakI7O0FBRUE7SUFDSSxXQUFXO0lBQ1gsa0JBQWtCO0lBQ2xCLGtCQUFrQjtBQUN0Qjs7QUFFQTtJQUNJLGtCQUFrQjtJQUNsQixVQUFVO0lBQ1YsZ0JBQWdCO0lBQ2hCLFlBQVk7SUFDWix5QkFBeUI7SUFDekIsc0JBQXNCO0lBQ3RCLDZCQUE2QjtJQUM3QixrQkFBa0I7SUFDbEIsc0JBQXNCO0lBQ3RCLG1CQUFtQjtBQUN2Qjs7O0FBR0E7SUFDSSxrQkFBa0I7QUFDdEI7OztBQUdBO0lBQ0ksZUFBZTtBQUNuQjs7QUFFQTs7SUFFSTtRQUNJLGNBQWM7SUFDbEI7O0lBRUE7UUFDSSxTQUFTO1FBQ1QsZUFBZTtRQUNmLGFBQWE7UUFDYixzQkFBc0I7SUFDMUI7O0lBRUE7UUFDSSxzQkFBc0I7UUFDdEIsZ0JBQWdCO1FBQ2hCLGdCQUFnQjtJQUNwQjs7SUFFQTtRQUNJLGNBQWM7UUFDZCxrQkFBa0I7UUFDbEIsVUFBVTtRQUNWLGdCQUFnQjtRQUNoQixhQUFhO1FBQ2IsdUJBQXVCO0lBQzNCOztJQUVBO1FBQ0ksY0FBYztRQUNkLGVBQWU7UUFDZixrQkFBa0I7UUFDbEIsZUFBZTtRQUNmLFlBQVk7UUFDWiw2QkFBNkI7UUFDN0IsWUFBWTtRQUNaLFVBQVU7UUFDVixrQkFBa0I7SUFDdEI7O0lBRUE7UUFDSSxlQUFlO1FBQ2YsZ0JBQWdCO1FBQ2hCLGFBQWE7UUFDYixVQUFVO0lBQ2Q7O0lBRUE7UUFDSSxhQUFhO0lBQ2pCOztJQUVBO1FBQ0ksVUFBVTtJQUNkOztJQUVBO1FBQ0ksY0FBYztRQUNkLFlBQVk7SUFDaEI7O0lBRUE7UUFDSSxnQkFBZ0I7UUFDaEIsa0JBQWtCO1FBQ2xCLGlCQUFpQjtJQUNyQjs7SUFFQTtRQUNJLGlCQUFpQjtRQUNqQixvQkFBb0I7SUFDeEI7O0lBRUE7UUFDSSxnQkFBZ0I7SUFDcEI7O0lBRUE7UUFDSSxPQUFPO0lBQ1g7O0lBRUE7UUFDSSxnQkFBZ0I7UUFDaEIsV0FBVztRQUNYLGNBQWM7UUFDZCxTQUFTO0lBQ2I7O0lBRUE7UUFDSSxnQkFBZ0I7UUFDaEIsYUFBYTtRQUNiLFdBQVc7UUFDWCxPQUFPO0lBQ1g7O0lBRUE7SUFDQSxXQUFXO0lBQ1gsY0FBYztJQUNkOztJQUVBO09BQ0csY0FBYztPQUNkLFNBQVM7T0FDVCxnQkFBZ0I7SUFDbkI7O0lBRUE7UUFDSSxPQUFPO1FBQ1AsZ0JBQWdCO1FBQ2hCLGdCQUFnQjtJQUNwQjs7SUFFQTtRQUNJLGNBQWM7SUFDbEI7O0lBRUE7UUFDSSxjQUFjO1FBQ2QsVUFBVTtRQUNWLFdBQVc7SUFDZjs7SUFFQTtRQUNJLFVBQVU7UUFDVixPQUFPO1FBQ1AsY0FBYztRQUNkLGdCQUFnQjtRQUNoQjtJQUNKOztJQUVBO1FBQ0ksVUFBVTtRQUNWLE9BQU87UUFDUDtJQUNKOztJQUVBO1FBQ0ksY0FBYztRQUNkLFdBQVc7SUFDZjs7SUFFQTtRQUNJLGtCQUFrQjtRQUNsQixXQUFXO1FBQ1gsMkJBQTJCO1FBQzNCLGlCQUFpQjtJQUNyQjs7SUFFQTtRQUNJLGNBQWM7UUFDZCxnQkFBZ0I7UUFDaEIsT0FBTztRQUNQLGFBQWE7UUFDYixzQkFBc0I7UUFDdEIsZ0JBQWdCO1FBQ2hCLFNBQVM7SUFDYjs7SUFFQTtRQUNJLGNBQWM7SUFDbEI7O0lBRUE7UUFDSSxjQUFjO0lBQ2xCOztJQUVBO1FBQ0ksT0FBTztRQUNQLGdCQUFnQjtRQUNoQixXQUFXO1FBQ1gsYUFBYTtRQUNiLHVCQUF1QjtJQUMzQjs7SUFFQTtRQUNJLE9BQU87UUFDUCxjQUFjO0lBQ2xCO0FBQ0pcIixcInNvdXJjZXNDb250ZW50XCI6W1wiaHRtbCB7XFxuICAgIG1pbi1oZWlnaHQ6IDEwMCU7XFxuICAgIGZvbnQtc2l6ZTogNTAlO1xcbiAgICBsaW5lLWhlaWdodDogMS41O1xcbn1cXG5cXG5ib2R5IHtcXG4gICAgbWFyZ2luOiAwO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkNGNkJEOztcXG59XFxuXFxuYm9keS5lZGl0LXRhc2sgLmVkaXQtZm9ybSB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIHZpc2liaWxpdHk6IHZpc2libGU7XFxuICAgIG9wYWNpdHk6IDE7XFxufVxcblxcbmhlYWRlciB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG59XFxuXFxuI2NvbnRlbnQge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBtaW4taGVpZ2h0OiAxMDB2aDtcXG4gICAgZm9udC1zaXplOiAzZW07XFxufVxcblxcbm5hdiB7XFxuICAgIGZsZXg6IDE7XFxuICAgIG1heC13aWR0aDogMzAwcHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNGQ0Y2QkQ7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNEMEY0REU7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxufVxcblxcbi5teXByb2plY3RzLWhlYWRpbmcge1xcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxuICAgIGZvbnQtc2l6ZTogMS4yZW07XFxufVxcblxcbi5wcm9qZWN0LWljb24ge1xcbiAgICB3aWR0aDogOCU7XFxuICAgIGhlaWdodDogMTAwJTtcXG59XFxuXFxuLm5hdi1wcm9qZWN0LWJ0biB7XFxuICAgIG1heC13aWR0aDogMTAwJTtcXG4gICAgZmxleDogMTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XFxuICAgIGJvcmRlcjogbm9uZTtcXG4gICAgdGV4dC1hbGlnbjogc3RhcnQ7XFxuICAgIGZvbnQtc2l6ZTogMC44ZW07XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLnJtLXByb2plY3QtYnRuIHtcXG4gICAgbWF4LXdpZHRoOiAxMDAlO1xcbiAgICBmbGV4OiAwLjI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGNvbG9yOiByZWQ7XFxuICAgIGZvbnQtc2l6ZTogMC44ZW07XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmNvcmUtcHJvamVjdHMge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcXG59XFxuXFxuLnVzZXItcHJvamVjdHMge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBwYWRkaW5nLXRvcDogMTBweDtcXG59XFxuXFxuLnVzZXItcHJvamVjdC1uYXYge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XFxufVxcblxcbi5jb3JlLXByb2plY3QtbmF2IHtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIHBhZGRpbmctdG9wOiAxMHB4O1xcbiAgICBwYWRkaW5nLWxlZnQ6IDIwcHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNEMEY0REU7XFxufVxcblxcbi5jb3JlLXByb2plY3QtbmF2OmhvdmVyIHtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0QwRjRERTtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogIzZiZmNhMFxcbn1cXG5cXG4udXNlci1wcm9qZWN0LW5hdjpob3ZlciB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICM2YmZjYTBcXG59XFxuXFxuLmFkZC1wcm9qZWN0LmFjdGl2ZSB7XFxuICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICBhbGlnbi1zZWxmOiBjZW50ZXI7XFxuICAgIG1hcmdpbi10b3A6IDEwcHg7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgd2lkdGg6IDUwJTtcXG59XFxuXFxuLmFkZC1wcm9qZWN0IHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmFkZC1wcm9qZWN0LWZvcm0ge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uYWRkLXByb2plY3QtZm9ybS5hY3RpdmUge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgd2lkdGg6IDUwJTtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbn1cXG5cXG4uYWRkLXByb2plY3QtaW5wdXQge1xcbiAgICB3aWR0aDogMTAwJTtcXG59XFxuXFxuLnByb2plY3Qge1xcbiAgICBmbGV4OiAzO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRDBGNERFO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAjRkNGNkJEO1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDUwcHg7XFxufVxcblxcblxcbi5wcm9qZWN0LXRhc2tzIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG59XFxuXFxuLnRhc2sge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxufVxcblxcbi50YXNrIGlucHV0IHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLnRhc2sgaW5wdXQgKyBkaXY6YmVmb3JlIHtcXG4gICAgY29udGVudDogXFxcIuKXi1xcXCI7XFxuICAgIG1hcmdpbi1yaWdodDogMTBweDtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgICBmb250LXNpemU6IDJlbTtcXG4gIH1cXG4gIFxcbi50YXNrIGlucHV0OmNoZWNrZWQgKyBkaXY6YmVmb3JlIHtcXG4gICAgY29udGVudDogXFxcIuKclFxcXCI7XFxufVxcblxcbi50YXNrIGlucHV0OmNoZWNrZWQgKyBkaXYgcCB7XFxuICAgIHRleHQtZGVjb3JhdGlvbjogbGluZS10aHJvdWdoO1xcbn1cXG5cXG4udGFzay10aXRsZS1kYXRlIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgcGFkZGluZy1sZWZ0OiA1cHg7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDVweDtcXG4gICAgZmxleDogMTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbn1cXG5cXG4udGFzay10aXRsZSB7XFxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgcGFkZGluZy1sZWZ0OiA1cHg7XFxufVxcblxcbi50YXNrLWRhdGV7XFxuICAgIHBhZGRpbmctcmlnaHQ6IDVweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI2I4YjE3MTVlO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDVweDtcXG59XFxuXFxuLnRhc2stYnRucyB7XFxuICAgIGRpc3BsYXk6IGlubGluZTtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBqdXN0aWZ5LXNlbGY6IGNlbnRlcjtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgICBmbGV4OiAxO1xcbn1cXG5cXG4ucm0tdGFzay1idG4ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiB0cmFuc3BhcmVudDtcXG4gICAgYm9yZGVyOiBub25lO1xcbiAgICBjb2xvcjogcmVkO1xcbiAgICBmb250LXNpemU6IDFlbTtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG4uZWRpdC10YXNrLWJ0biB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG4gICAgZm9udC1zaXplOiAxZW07XFxufVxcblxcbi5zdG9yZS10YXNrLWJ0biB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGN1cnNvcjogcG9pbnRlcjtcXG59XFxuXFxuLmFkZC10YXNrLWJ0bi5hY3RpdmUge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgICB3aWR0aDogMjUlO1xcbn1cXG5cXG4uYWRkLXRhc2stYnRuIHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG59XFxuXFxuLmFkZC10YXNrLWZvcm0uYWN0aXZlIHtcXG4gICAgZGlzcGxheTogYmxvY2s7XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcXG4gICAgd2lkdGg6IDI1JTtcXG59XFxuXFxuLmFkZC10YXNrLWZvcm0ge1xcbiAgICBkaXNwbGF5OiBub25lO1xcbn1cXG5cXG4uYWRkLXRhc2staW5wdXQge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xcbiAgICBwYWRkaW5nLWxlZnQ6IDEwcHg7XFxufVxcblxcbi5lZGl0LWZvcm0ge1xcbiAgICB2aXNpYmlsaXR5OiBoaWRkZW47XFxuICAgIG9wYWNpdHk6IDA7XFxuICAgIG1pbi1oZWlnaHQ6IDEwMCU7XFxuICAgIHdpZHRoOiAzMDBweDtcXG4gICAgYmFja2dyb3VuZC1jb2xvcjogI0E5REVGOTtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxuICAgIHBhZGRpbmctbGVmdDogMjBweDtcXG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcXG4gICAgcGFkZGluZy1yaWdodDogMjBweDtcXG59XFxuXFxuXFxuLnN1Ym1pdC1lZGl0LWJ0biB7XFxuICAgIGFsaWduLXNlbGY6IGNlbnRlcjtcXG59XFxuXFxuXFxuLnN1Ym1pdC1lZGl0LWJ0biAgYnV0dG9uIHtcXG4gICAgY3Vyc29yOiBwb2ludGVyO1xcbn1cXG5cXG5AbWVkaWEgKG1heC13aWR0aDogMTAwMHB4KSB7XFxuXFxuICAgIGh0bWwge1xcbiAgICAgICAgZm9udC1zaXplOiA4MCU7XFxuICAgIH1cXG5cXG4gICAgYm9keSB7XFxuICAgICAgICBtYXJnaW46IDA7XFxuICAgICAgICBtaW4td2lkdGg6IDEwMCU7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgfVxcblxcbiAgICAjY29udGVudCB7XFxuICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgICAgICAgbWluLXdpZHRoOiAxMDB2dztcXG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIH1cXG5cXG4gICAgaGVhZGVyIHtcXG4gICAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgICAgICAgb3BhY2l0eTogMTtcXG4gICAgICAgIG1pbi13aWR0aDogMTAwdnc7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogYmxhY2s7XFxuICAgIH1cXG5cXG4gICAgLmJ1dHRvbi1uYXYtb3BlbiB7XFxuICAgICAgICBtYXgtd2lkdGg6IDRlbTtcXG4gICAgICAgIG1heC1oZWlnaHQ6IDRlbTtcXG4gICAgICAgIHRleHQtYWxpZ246IGNlbnRlcjtcXG4gICAgICAgIGZvbnQtc2l6ZTogMTVlbTtcXG4gICAgICAgIGNvbG9yOiB3aGl0ZTtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50O1xcbiAgICAgICAgYm9yZGVyOiBub25lO1xcbiAgICAgICAgcGFkZGluZzogMDtcXG4gICAgICAgIHBhZGRpbmctbGVmdDogNTBweDtcXG4gICAgfVxcblxcbiAgICBuYXYge1xcbiAgICAgICAgbWF4LXdpZHRoOiBub25lO1xcbiAgICAgICAgbWluLXdpZHRoOiAxMDB2dztcXG4gICAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgICAgICBvcGFjaXR5OiAwO1xcbiAgICB9ICBcXG5cXG4gICAgLm5hdi1lbnRlciB7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICB9XFxuICAgIFxcbiAgICAubmF2LWVudGVyLWFjdGl2ZSB7XFxuICAgICAgICBvcGFjaXR5OiAxO1xcbiAgICB9XFxuXFxuICAgIC5wcm9qZWN0LWljb24ge1xcbiAgICAgICAgZm9udC1zaXplOiA1ZW07XFxuICAgICAgICB3aWR0aDogMC41ZW07XFxuICAgIH1cXG5cXG4gICAgLm5hdi1wcm9qZWN0LWJ0biB7XFxuICAgICAgICBmb250LXNpemU6IDEuNWVtO1xcbiAgICAgICAgcGFkZGluZy1sZWZ0OiAxMHB4O1xcbiAgICAgICAgcGFkZGluZy10b3A6IDEycHg7XFxuICAgIH1cXG5cXG4gICAgLmNvcmUtcHJvamVjdC1uYXYge1xcbiAgICAgICAgcGFkZGluZy10b3A6IDIwcHg7XFxuICAgICAgICBwYWRkaW5nLWJvdHRvbTogMjBweDtcXG4gICAgfVxcblxcbiAgICAubXlwcm9qZWN0cy1oZWFkaW5nIHtcXG4gICAgICAgIGZvbnQtc2l6ZTogMi4yZW07XFxuICAgIH1cXG5cXG4gICAgLnVzZXItcHJvamVjdHMge1xcbiAgICAgICAgZmxleDogMTtcXG4gICAgfVxcblxcbiAgICAuYWRkLXByb2plY3QuYWN0aXZlIHtcXG4gICAgICAgIG1hcmdpbi10b3A6IDQwcHg7XFxuICAgICAgICB3aWR0aDogMTAwJTtcXG4gICAgICAgIGZvbnQtc2l6ZTogMmVtO1xcbiAgICAgICAgZmxleDogMC41O1xcbiAgICB9XFxuXFxuICAgIC5hZGQtcHJvamVjdC1mb3JtLmFjdGl2ZSB7XFxuICAgICAgICBtYXJnaW4tdG9wOiA0MHB4O1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAgZmxleDogMTtcXG4gICAgfVxcblxcbiAgICAuYWRkLXByb2plY3QtaW5wdXQge1xcbiAgICB3aWR0aDogMTAwJTtcXG4gICAgZm9udC1zaXplOiAyZW07XFxuICAgIH1cXG5cXG4gICAgaDEge1xcbiAgICAgICBmb250LXNpemU6IDNlbTtcXG4gICAgICAgZmxleDogMC4xO1xcbiAgICAgICBtYXgtaGVpZ2h0OiAxMHZoO1xcbiAgICB9XFxuXFxuICAgIC5wcm9qZWN0LXRhc2tzIHtcXG4gICAgICAgIGZsZXg6IDM7XFxuICAgICAgICBtYXgtaGVpZ2h0OiA2MHZoO1xcbiAgICAgICAgb3ZlcmZsb3c6IHNjcm9sbDtcXG4gICAgfVxcblxcbiAgICAudGFzayB7XFxuICAgICAgICBmb250LXNpemU6IDJlbTtcXG4gICAgfVxcblxcbiAgICAuc3RvcmUtaW1nIHtcXG4gICAgICAgIGZvbnQtc2l6ZTogMmVtO1xcbiAgICAgICAgd2lkdGg6IDJlbTtcXG4gICAgICAgIGhlaWdodDogMmVtO1xcbiAgICB9XFxuXFxuICAgIC5hZGQtdGFzay1idG4uYWN0aXZlIHtcXG4gICAgICAgIHdpZHRoOiA1MCU7XFxuICAgICAgICBmbGV4OiAxO1xcbiAgICAgICAgZm9udC1zaXplOiAyZW07XFxuICAgICAgICBtYXgtaGVpZ2h0OiAxMHZoO1xcbiAgICAgICAgbWFyZ2luLXRvcDogMzBweFxcbiAgICB9XFxuXFxuICAgIC5hZGQtdGFzay1mb3JtLmFjdGl2ZSB7XFxuICAgICAgICB3aWR0aDogNTAlO1xcbiAgICAgICAgZmxleDogMTtcXG4gICAgICAgIG1hcmdpbi10b3A6IDMwcHhcXG4gICAgfVxcblxcbiAgICAuYWRkLXRhc2staW5wdXQge1xcbiAgICAgICAgZm9udC1zaXplOiAyZW07XFxuICAgICAgICBoZWlnaHQ6IDNlbTtcXG4gICAgfVxcblxcbiAgICBib2R5LmVkaXQtdGFzayAuZWRpdC1mb3JtIHtcXG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbiAgICAgICAgcGFkZGluZy10b3A6IDQwcHg7XFxuICAgIH1cXG5cXG4gICAgZm9ybS5lZGl0LWZvcm0gcCB7XFxuICAgICAgICBmb250LXNpemU6IDNlbTtcXG4gICAgICAgIG1hcmdpbi1ib3R0b206IDA7XFxuICAgICAgICBmbGV4OiAxO1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICBtYXgtaGVpZ2h0OiAyMnZoO1xcbiAgICAgICAgbWFyZ2luOiAwO1xcbiAgICB9XFxuXFxuICAgIGZvcm0uZWRpdC1mb3JtID4gcCA+IGlucHV0IHtcXG4gICAgICAgIGZvbnQtc2l6ZTogMWVtO1xcbiAgICB9XFxuXFxuICAgIHNlbGVjdCB7XFxuICAgICAgICBmb250LXNpemU6IDFlbTtcXG4gICAgfVxcblxcbiAgICAuc3VibWl0LWVkaXQtYnRuIHtcXG4gICAgICAgIGZsZXg6IDE7XFxuICAgICAgICBtYXgtaGVpZ2h0OiAxNXZoO1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICAgICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIH1cXG5cXG4gICAgLnN1Ym1pdC1lZGl0LWJ0biBidXR0b24ge1xcbiAgICAgICAgZmxleDogMTtcXG4gICAgICAgIGZvbnQtc2l6ZTogMmVtO1xcbiAgICB9XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbi8vIGNzcyBiYXNlIGNvZGUsIGluamVjdGVkIGJ5IHRoZSBjc3MtbG9hZGVyXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoY3NzV2l0aE1hcHBpbmdUb1N0cmluZykge1xuICB2YXIgbGlzdCA9IFtdOyAvLyByZXR1cm4gdGhlIGxpc3Qgb2YgbW9kdWxlcyBhcyBjc3Mgc3RyaW5nXG5cbiAgbGlzdC50b1N0cmluZyA9IGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICAgIHJldHVybiB0aGlzLm1hcChmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgdmFyIGNvbnRlbnQgPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICByZXR1cm4gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGNvbnRlbnQsIFwifVwiKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfSkuam9pbihcIlwiKTtcbiAgfTsgLy8gaW1wb3J0IGEgbGlzdCBvZiBtb2R1bGVzIGludG8gdGhlIGxpc3RcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcblxuXG4gIGxpc3QuaSA9IGZ1bmN0aW9uIChtb2R1bGVzLCBtZWRpYVF1ZXJ5LCBkZWR1cGUpIHtcbiAgICBpZiAodHlwZW9mIG1vZHVsZXMgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wYXJhbS1yZWFzc2lnblxuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgXCJcIl1dO1xuICAgIH1cblxuICAgIHZhciBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzID0ge307XG5cbiAgICBpZiAoZGVkdXBlKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHByZWZlci1kZXN0cnVjdHVyaW5nXG4gICAgICAgIHZhciBpZCA9IHRoaXNbaV1bMF07XG5cbiAgICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgICBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2lkXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbW9kdWxlcy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBpdGVtID0gW10uY29uY2F0KG1vZHVsZXNbX2ldKTtcblxuICAgICAgaWYgKGRlZHVwZSAmJiBhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzW2l0ZW1bMF1dKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1jb250aW51ZVxuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhUXVlcnkpIHtcbiAgICAgICAgaWYgKCFpdGVtWzJdKSB7XG4gICAgICAgICAgaXRlbVsyXSA9IG1lZGlhUXVlcnk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsyXSA9IFwiXCIuY29uY2F0KG1lZGlhUXVlcnksIFwiIGFuZCBcIikuY29uY2F0KGl0ZW1bMl0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGxpc3QucHVzaChpdGVtKTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIGxpc3Q7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyB2YXIgX2kgPSBhcnIgPT0gbnVsbCA/IG51bGwgOiB0eXBlb2YgU3ltYm9sICE9PSBcInVuZGVmaW5lZFwiICYmIGFycltTeW1ib2wuaXRlcmF0b3JdIHx8IGFycltcIkBAaXRlcmF0b3JcIl07IGlmIChfaSA9PSBudWxsKSByZXR1cm47IHZhciBfYXJyID0gW107IHZhciBfbiA9IHRydWU7IHZhciBfZCA9IGZhbHNlOyB2YXIgX3MsIF9lOyB0cnkgeyBmb3IgKF9pID0gX2kuY2FsbChhcnIpOyAhKF9uID0gKF9zID0gX2kubmV4dCgpKS5kb25lKTsgX24gPSB0cnVlKSB7IF9hcnIucHVzaChfcy52YWx1ZSk7IGlmIChpICYmIF9hcnIubGVuZ3RoID09PSBpKSBicmVhazsgfSB9IGNhdGNoIChlcnIpIHsgX2QgPSB0cnVlOyBfZSA9IGVycjsgfSBmaW5hbGx5IHsgdHJ5IHsgaWYgKCFfbiAmJiBfaVtcInJldHVyblwiXSAhPSBudWxsKSBfaVtcInJldHVyblwiXSgpOyB9IGZpbmFsbHkgeyBpZiAoX2QpIHRocm93IF9lOyB9IH0gcmV0dXJuIF9hcnI7IH1cblxuZnVuY3Rpb24gX2FycmF5V2l0aEhvbGVzKGFycikgeyBpZiAoQXJyYXkuaXNBcnJheShhcnIpKSByZXR1cm4gYXJyOyB9XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKSB7XG4gIHZhciBfaXRlbSA9IF9zbGljZWRUb0FycmF5KGl0ZW0sIDQpLFxuICAgICAgY29udGVudCA9IF9pdGVtWzFdLFxuICAgICAgY3NzTWFwcGluZyA9IF9pdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHR5cGVvZiBidG9hID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgICB2YXIgYmFzZTY0ID0gYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoY3NzTWFwcGluZykpKSk7XG4gICAgdmFyIGRhdGEgPSBcInNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2NoYXJzZXQ9dXRmLTg7YmFzZTY0LFwiLmNvbmNhdChiYXNlNjQpO1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gXCIvKiMgXCIuY29uY2F0KGRhdGEsIFwiICovXCIpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gXCIvKiMgc291cmNlVVJMPVwiLmNvbmNhdChjc3NNYXBwaW5nLnNvdXJjZVJvb3QgfHwgXCJcIikuY29uY2F0KHNvdXJjZSwgXCIgKi9cIik7XG4gICAgfSk7XG4gICAgcmV0dXJuIFtjb250ZW50XS5jb25jYXQoc291cmNlVVJMcykuY29uY2F0KFtzb3VyY2VNYXBwaW5nXSkuam9pbihcIlxcblwiKTtcbiAgfVxuXG4gIHJldHVybiBbY29udGVudF0uam9pbihcIlxcblwiKTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBzdHlsZXNJbkRvbSA9IFtdO1xuXG5mdW5jdGlvbiBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKSB7XG4gIHZhciByZXN1bHQgPSAtMTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlc0luRG9tLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHN0eWxlc0luRG9tW2ldLmlkZW50aWZpZXIgPT09IGlkZW50aWZpZXIpIHtcbiAgICAgIHJlc3VsdCA9IGk7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5mdW5jdGlvbiBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucykge1xuICB2YXIgaWRDb3VudE1hcCA9IHt9O1xuICB2YXIgaWRlbnRpZmllcnMgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIgaXRlbSA9IGxpc3RbaV07XG4gICAgdmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG4gICAgdmFyIGNvdW50ID0gaWRDb3VudE1hcFtpZF0gfHwgMDtcbiAgICB2YXIgaWRlbnRpZmllciA9IFwiXCIuY29uY2F0KGlkLCBcIiBcIikuY29uY2F0KGNvdW50KTtcbiAgICBpZENvdW50TWFwW2lkXSA9IGNvdW50ICsgMTtcbiAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICB2YXIgb2JqID0ge1xuICAgICAgY3NzOiBpdGVtWzFdLFxuICAgICAgbWVkaWE6IGl0ZW1bMl0sXG4gICAgICBzb3VyY2VNYXA6IGl0ZW1bM11cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHN0eWxlc0luRG9tLnB1c2goe1xuICAgICAgICBpZGVudGlmaWVyOiBpZGVudGlmaWVyLFxuICAgICAgICB1cGRhdGVyOiBhZGRTdHlsZShvYmosIG9wdGlvbnMpLFxuICAgICAgICByZWZlcmVuY2VzOiAxXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZGVudGlmaWVycy5wdXNoKGlkZW50aWZpZXIpO1xuICB9XG5cbiAgcmV0dXJuIGlkZW50aWZpZXJzO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZShvYmosIG9wdGlvbnMpIHtcbiAgdmFyIGFwaSA9IG9wdGlvbnMuZG9tQVBJKG9wdGlvbnMpO1xuICBhcGkudXBkYXRlKG9iaik7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGVTdHlsZShuZXdPYmopIHtcbiAgICBpZiAobmV3T2JqKSB7XG4gICAgICBpZiAobmV3T2JqLmNzcyA9PT0gb2JqLmNzcyAmJiBuZXdPYmoubWVkaWEgPT09IG9iai5tZWRpYSAmJiBuZXdPYmouc291cmNlTWFwID09PSBvYmouc291cmNlTWFwKSB7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cblxuICAgICAgYXBpLnVwZGF0ZShvYmogPSBuZXdPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBhcGkucmVtb3ZlKCk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChsaXN0LCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuICBsaXN0ID0gbGlzdCB8fCBbXTtcbiAgdmFyIGxhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZShuZXdMaXN0KSB7XG4gICAgbmV3TGlzdCA9IG5ld0xpc3QgfHwgW107XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbaV07XG4gICAgICB2YXIgaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihpZGVudGlmaWVyKTtcbiAgICAgIHN0eWxlc0luRG9tW2luZGV4XS5yZWZlcmVuY2VzLS07XG4gICAgfVxuXG4gICAgdmFyIG5ld0xhc3RJZGVudGlmaWVycyA9IG1vZHVsZXNUb0RvbShuZXdMaXN0LCBvcHRpb25zKTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgX2lkZW50aWZpZXIgPSBsYXN0SWRlbnRpZmllcnNbX2ldO1xuXG4gICAgICB2YXIgX2luZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoX2lkZW50aWZpZXIpO1xuXG4gICAgICBpZiAoc3R5bGVzSW5Eb21bX2luZGV4XS5yZWZlcmVuY2VzID09PSAwKSB7XG4gICAgICAgIHN0eWxlc0luRG9tW19pbmRleF0udXBkYXRlcigpO1xuXG4gICAgICAgIHN0eWxlc0luRG9tLnNwbGljZShfaW5kZXgsIDEpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxhc3RJZGVudGlmaWVycyA9IG5ld0xhc3RJZGVudGlmaWVycztcbiAgfTtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbnZhciBtZW1vID0ge307XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuZnVuY3Rpb24gZ2V0VGFyZ2V0KHRhcmdldCkge1xuICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuICAgIHZhciBzdHlsZVRhcmdldCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTsgLy8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblxuICAgIGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIC8vIFRoaXMgd2lsbCB0aHJvdyBhbiBleGNlcHRpb24gaWYgYWNjZXNzIHRvIGlmcmFtZSBpcyBibG9ja2VkXG4gICAgICAgIC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gc3R5bGVUYXJnZXQuY29udGVudERvY3VtZW50LmhlYWQ7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8vIGlzdGFuYnVsIGlnbm9yZSBuZXh0XG4gICAgICAgIHN0eWxlVGFyZ2V0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcbiAgfVxuXG4gIHJldHVybiBtZW1vW3RhcmdldF07XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBpbnNlcnRCeVNlbGVjdG9yKGluc2VydCwgc3R5bGUpIHtcbiAgdmFyIHRhcmdldCA9IGdldFRhcmdldChpbnNlcnQpO1xuXG4gIGlmICghdGFyZ2V0KSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnQnIHBhcmFtZXRlciBpcyBpbnZhbGlkLlwiKTtcbiAgfVxuXG4gIHRhcmdldC5hcHBlbmRDaGlsZChzdHlsZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0QnlTZWxlY3RvcjsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBpbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhzdHlsZSwgb3B0aW9ucy5hdHRyaWJ1dGVzKTtcbiAgb3B0aW9ucy5pbnNlcnQoc3R5bGUpO1xuICByZXR1cm4gc3R5bGU7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gaW5zZXJ0U3R5bGVFbGVtZW50OyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcyhzdHlsZSkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgbm9uY2UpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGFwcGx5KHN0eWxlLCBvcHRpb25zLCBvYmopIHtcbiAgdmFyIGNzcyA9IG9iai5jc3M7XG4gIHZhciBtZWRpYSA9IG9iai5tZWRpYTtcbiAgdmFyIHNvdXJjZU1hcCA9IG9iai5zb3VyY2VNYXA7XG5cbiAgaWYgKG1lZGlhKSB7XG4gICAgc3R5bGUuc2V0QXR0cmlidXRlKFwibWVkaWFcIiwgbWVkaWEpO1xuICB9IGVsc2Uge1xuICAgIHN0eWxlLnJlbW92ZUF0dHJpYnV0ZShcIm1lZGlhXCIpO1xuICB9XG5cbiAgaWYgKHNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNzcyArPSBcIlxcbi8qIyBzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtiYXNlNjQsXCIuY29uY2F0KGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KHNvdXJjZU1hcCkpKSksIFwiICovXCIpO1xuICB9IC8vIEZvciBvbGQgSUVcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgICovXG5cblxuICBvcHRpb25zLnN0eWxlVGFnVHJhbnNmb3JtKGNzcywgc3R5bGUpO1xufVxuXG5mdW5jdGlvbiByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZS5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG5cbiAgc3R5bGUucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzdHlsZSk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGUgPSBvcHRpb25zLmluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKTtcbiAgcmV0dXJuIHtcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZShvYmopIHtcbiAgICAgIGFwcGx5KHN0eWxlLCBvcHRpb25zLCBvYmopO1xuICAgIH0sXG4gICAgcmVtb3ZlOiBmdW5jdGlvbiByZW1vdmUoKSB7XG4gICAgICByZW1vdmVTdHlsZUVsZW1lbnQoc3R5bGUpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZSkge1xuICBpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuICAgIHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGUuZmlyc3RDaGlsZCkge1xuICAgICAgc3R5bGUucmVtb3ZlQ2hpbGQoc3R5bGUuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzdHlsZVRhZ1RyYW5zZm9ybTsiLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdKG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuIiwiLy8gZ2V0RGVmYXVsdEV4cG9ydCBmdW5jdGlvbiBmb3IgY29tcGF0aWJpbGl0eSB3aXRoIG5vbi1oYXJtb255IG1vZHVsZXNcbl9fd2VicGFja19yZXF1aXJlX18ubiA9IChtb2R1bGUpID0+IHtcblx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG5cdFx0KCkgPT4gKG1vZHVsZVsnZGVmYXVsdCddKSA6XG5cdFx0KCkgPT4gKG1vZHVsZSk7XG5cdF9fd2VicGFja19yZXF1aXJlX18uZChnZXR0ZXIsIHsgYTogZ2V0dGVyIH0pO1xuXHRyZXR1cm4gZ2V0dGVyO1xufTsiLCIvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9ucyBmb3IgaGFybW9ueSBleHBvcnRzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLmQgPSAoZXhwb3J0cywgZGVmaW5pdGlvbikgPT4ge1xuXHRmb3IodmFyIGtleSBpbiBkZWZpbml0aW9uKSB7XG5cdFx0aWYoX193ZWJwYWNrX3JlcXVpcmVfXy5vKGRlZmluaXRpb24sIGtleSkgJiYgIV9fd2VicGFja19yZXF1aXJlX18ubyhleHBvcnRzLCBrZXkpKSB7XG5cdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywga2V5LCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZGVmaW5pdGlvbltrZXldIH0pO1xuXHRcdH1cblx0fVxufTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmcgPSAoZnVuY3Rpb24oKSB7XG5cdGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gJ29iamVjdCcpIHJldHVybiBnbG9iYWxUaGlzO1xuXHR0cnkge1xuXHRcdHJldHVybiB0aGlzIHx8IG5ldyBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXHR9IGNhdGNoIChlKSB7XG5cdFx0aWYgKHR5cGVvZiB3aW5kb3cgPT09ICdvYmplY3QnKSByZXR1cm4gd2luZG93O1xuXHR9XG59KSgpOyIsIl9fd2VicGFja19yZXF1aXJlX18ubyA9IChvYmosIHByb3ApID0+IChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBwcm9wKSkiLCJ2YXIgc2NyaXB0VXJsO1xuaWYgKF9fd2VicGFja19yZXF1aXJlX18uZy5pbXBvcnRTY3JpcHRzKSBzY3JpcHRVcmwgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcubG9jYXRpb24gKyBcIlwiO1xudmFyIGRvY3VtZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmRvY3VtZW50O1xuaWYgKCFzY3JpcHRVcmwgJiYgZG9jdW1lbnQpIHtcblx0aWYgKGRvY3VtZW50LmN1cnJlbnRTY3JpcHQpXG5cdFx0c2NyaXB0VXJsID0gZG9jdW1lbnQuY3VycmVudFNjcmlwdC5zcmNcblx0aWYgKCFzY3JpcHRVcmwpIHtcblx0XHR2YXIgc2NyaXB0cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFwic2NyaXB0XCIpO1xuXHRcdGlmKHNjcmlwdHMubGVuZ3RoKSBzY3JpcHRVcmwgPSBzY3JpcHRzW3NjcmlwdHMubGVuZ3RoIC0gMV0uc3JjXG5cdH1cbn1cbi8vIFdoZW4gc3VwcG9ydGluZyBicm93c2VycyB3aGVyZSBhbiBhdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIHlvdSBtdXN0IHNwZWNpZnkgYW4gb3V0cHV0LnB1YmxpY1BhdGggbWFudWFsbHkgdmlhIGNvbmZpZ3VyYXRpb25cbi8vIG9yIHBhc3MgYW4gZW1wdHkgc3RyaW5nIChcIlwiKSBhbmQgc2V0IHRoZSBfX3dlYnBhY2tfcHVibGljX3BhdGhfXyB2YXJpYWJsZSBmcm9tIHlvdXIgY29kZSB0byB1c2UgeW91ciBvd24gbG9naWMuXG5pZiAoIXNjcmlwdFVybCkgdGhyb3cgbmV3IEVycm9yKFwiQXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCBpbiB0aGlzIGJyb3dzZXJcIik7XG5zY3JpcHRVcmwgPSBzY3JpcHRVcmwucmVwbGFjZSgvIy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcPy4qJC8sIFwiXCIpLnJlcGxhY2UoL1xcL1teXFwvXSskLywgXCIvXCIpO1xuX193ZWJwYWNrX3JlcXVpcmVfXy5wID0gc2NyaXB0VXJsOyIsImNvbnN0IGV2ZW50c01vZHVsZSA9IChmdW5jdGlvbigpe1xuICAgIGxldCBldmVudHMgPSB7fTtcblxuICAgIGZ1bmN0aW9uIG9uKGV2ZW50TmFtZSwgZm4pe1xuICAgICAgICBldmVudHNbZXZlbnROYW1lXSA9IGV2ZW50c1tldmVudE5hbWVdIHx8IFtdO1xuICAgICAgICBldmVudHNbZXZlbnROYW1lXS5wdXNoKGZuKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBvZmYoZXZlbnROYW1lLCBmbikge1xuICAgICAgICBpZiAoZXZlbnRzW2V2ZW50TmFtZV0pIHtcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRzW2V2ZW50TmFtZV0ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZihldmVudHNbZXZlbnROYW1lXVtpXSA9PT0gZm4pIHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRzW2V2ZW50TmFtZV0uc3BsaWNlKGksIDEpO1xuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZW1pdCAoZXZlbnROYW1lLCBkYXRhKSB7XG4gICAgICAgIGxldCB4ID0gZmFsc2U7XG4gICAgICAgIGlmKGFyZ3VtZW50cy5sZW5ndGggPiBlbWl0Lmxlbmd0aCkge1xuICAgICAgICAgICAgZGF0YSA9IFsuLi5hcmd1bWVudHNdLnNsaWNlKDEpO1xuICAgICAgICAgICAgeCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgICAgaWYoZXZlbnRzW2V2ZW50TmFtZV0gJiYgIXgpIHtcbiAgICAgICAgICAgIGV2ZW50c1tldmVudE5hbWVdLmZvckVhY2goZm4gPT4gZm4oZGF0YSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmKGV2ZW50c1tldmVudE5hbWVdICYmIHgpIHtcbiAgICAgICAgICAgIGV2ZW50c1tldmVudE5hbWVdLmZvckVhY2goZm4gPT4gZm4oLi4uZGF0YSkpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgb24sXG4gICAgICAgIG9mZixcbiAgICAgICAgZW1pdFxuICAgIH1cbn0oKSk7XG5cbmV4cG9ydCBkZWZhdWx0IGV2ZW50c01vZHVsZSIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvSW50ZWdlcihkaXJ0eU51bWJlcikge1xuICBpZiAoZGlydHlOdW1iZXIgPT09IG51bGwgfHwgZGlydHlOdW1iZXIgPT09IHRydWUgfHwgZGlydHlOdW1iZXIgPT09IGZhbHNlKSB7XG4gICAgcmV0dXJuIE5hTjtcbiAgfVxuXG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpO1xuXG4gIGlmIChpc05hTihudW1iZXIpKSB7XG4gICAgcmV0dXJuIG51bWJlcjtcbiAgfVxuXG4gIHJldHVybiBudW1iZXIgPCAwID8gTWF0aC5jZWlsKG51bWJlcikgOiBNYXRoLmZsb29yKG51bWJlcik7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcmVxdWlyZWRBcmdzKHJlcXVpcmVkLCBhcmdzKSB7XG4gIGlmIChhcmdzLmxlbmd0aCA8IHJlcXVpcmVkKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihyZXF1aXJlZCArICcgYXJndW1lbnQnICsgKHJlcXVpcmVkID4gMSA/ICdzJyA6ICcnKSArICcgcmVxdWlyZWQsIGJ1dCBvbmx5ICcgKyBhcmdzLmxlbmd0aCArICcgcHJlc2VudCcpO1xuICB9XG59IiwiaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgdG9EYXRlXG4gKiBAY2F0ZWdvcnkgQ29tbW9uIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IENvbnZlcnQgdGhlIGdpdmVuIGFyZ3VtZW50IHRvIGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBDb252ZXJ0IHRoZSBnaXZlbiBhcmd1bWVudCB0byBhbiBpbnN0YW5jZSBvZiBEYXRlLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBhbiBpbnN0YW5jZSBvZiBEYXRlLCB0aGUgZnVuY3Rpb24gcmV0dXJucyBpdHMgY2xvbmUuXG4gKlxuICogSWYgdGhlIGFyZ3VtZW50IGlzIGEgbnVtYmVyLCBpdCBpcyB0cmVhdGVkIGFzIGEgdGltZXN0YW1wLlxuICpcbiAqIElmIHRoZSBhcmd1bWVudCBpcyBub25lIG9mIHRoZSBhYm92ZSwgdGhlIGZ1bmN0aW9uIHJldHVybnMgSW52YWxpZCBEYXRlLlxuICpcbiAqICoqTm90ZSoqOiAqYWxsKiBEYXRlIGFyZ3VtZW50cyBwYXNzZWQgdG8gYW55ICpkYXRlLWZucyogZnVuY3Rpb24gaXMgcHJvY2Vzc2VkIGJ5IGB0b0RhdGVgLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGFyZ3VtZW50IC0gdGhlIHZhbHVlIHRvIGNvbnZlcnRcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgcGFyc2VkIGRhdGUgaW4gdGhlIGxvY2FsIHRpbWUgem9uZVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENsb25lIHRoZSBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKG5ldyBEYXRlKDIwMTQsIDEsIDExLCAxMSwgMzAsIDMwKSlcbiAqIC8vPT4gVHVlIEZlYiAxMSAyMDE0IDExOjMwOjMwXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIENvbnZlcnQgdGhlIHRpbWVzdGFtcCB0byBkYXRlOlxuICogY29uc3QgcmVzdWx0ID0gdG9EYXRlKDEzOTIwOTg0MzAwMDApXG4gKiAvLz0+IFR1ZSBGZWIgMTEgMjAxNCAxMTozMDozMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHRvRGF0ZShhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGFyZ1N0ciA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChhcmd1bWVudCk7IC8vIENsb25lIHRoZSBkYXRlXG5cbiAgaWYgKGFyZ3VtZW50IGluc3RhbmNlb2YgRGF0ZSB8fCB0eXBlb2YgYXJndW1lbnQgPT09ICdvYmplY3QnICYmIGFyZ1N0ciA9PT0gJ1tvYmplY3QgRGF0ZV0nKSB7XG4gICAgLy8gUHJldmVudCB0aGUgZGF0ZSB0byBsb3NlIHRoZSBtaWxsaXNlY29uZHMgd2hlbiBwYXNzZWQgdG8gbmV3IERhdGUoKSBpbiBJRTEwXG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50LmdldFRpbWUoKSk7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnbnVtYmVyJyB8fCBhcmdTdHIgPT09ICdbb2JqZWN0IE51bWJlcl0nKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKGFyZ3VtZW50KTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoKHR5cGVvZiBhcmd1bWVudCA9PT0gJ3N0cmluZycgfHwgYXJnU3RyID09PSAnW29iamVjdCBTdHJpbmddJykgJiYgdHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuICAgICAgY29uc29sZS53YXJuKFwiU3RhcnRpbmcgd2l0aCB2Mi4wLjAtYmV0YS4xIGRhdGUtZm5zIGRvZXNuJ3QgYWNjZXB0IHN0cmluZ3MgYXMgZGF0ZSBhcmd1bWVudHMuIFBsZWFzZSB1c2UgYHBhcnNlSVNPYCB0byBwYXJzZSBzdHJpbmdzLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2ZqdWxlXCIpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29uc29sZVxuXG4gICAgICBjb25zb2xlLndhcm4obmV3IEVycm9yKCkuc3RhY2spO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkRGF5c1xuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBBZGQgdGhlIHNwZWNpZmllZCBudW1iZXIgb2YgZGF5cyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIHRvIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIGRheXMgdG8gYmUgYWRkZWQuIFBvc2l0aXZlIGRlY2ltYWxzIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5mbG9vcmAsIGRlY2ltYWxzIGxlc3MgdGhhbiB6ZXJvIHdpbGwgYmUgcm91bmRlZCB1c2luZyBgTWF0aC5jZWlsYC5cbiAqIEByZXR1cm5zIHtEYXRlfSAtIHRoZSBuZXcgZGF0ZSB3aXRoIHRoZSBkYXlzIGFkZGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IC0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gQWRkIDEwIGRheXMgdG8gMSBTZXB0ZW1iZXIgMjAxNDpcbiAqIGNvbnN0IHJlc3VsdCA9IGFkZERheXMobmV3IERhdGUoMjAxNCwgOCwgMSksIDEwKVxuICogLy89PiBUaHUgU2VwIDExIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBhZGREYXlzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuXG4gIGlmIChpc05hTihhbW91bnQpKSB7XG4gICAgcmV0dXJuIG5ldyBEYXRlKE5hTik7XG4gIH1cblxuICBpZiAoIWFtb3VudCkge1xuICAgIC8vIElmIDAgZGF5cywgbm8tb3AgdG8gYXZvaWQgY2hhbmdpbmcgdGltZXMgaW4gdGhlIGhvdXIgYmVmb3JlIGVuZCBvZiBEU1RcbiAgICByZXR1cm4gZGF0ZTtcbiAgfVxuXG4gIGRhdGUuc2V0RGF0ZShkYXRlLmdldERhdGUoKSArIGFtb3VudCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL19saWIvdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkRGF5cyBmcm9tIFwiLi4vYWRkRGF5cy9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3ViRGF5c1xuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBkYXlzIGZyb20gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgZGF5cyB0byBiZSBzdWJ0cmFjdGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIGRheXMgc3VidHJhY3RlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBTdWJ0cmFjdCAxMCBkYXlzIGZyb20gMSBTZXB0ZW1iZXIgMjAxNDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN1YkRheXMobmV3IERhdGUoMjAxNCwgOCwgMSksIDEwKVxuICogLy89PiBGcmkgQXVnIDIyIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdWJEYXlzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gYWRkRGF5cyhkaXJ0eURhdGUsIC1hbW91bnQpO1xufSIsIi8qKlxuICogR29vZ2xlIENocm9tZSBhcyBvZiA2Ny4wLjMzOTYuODcgaW50cm9kdWNlZCB0aW1lem9uZXMgd2l0aCBvZmZzZXQgdGhhdCBpbmNsdWRlcyBzZWNvbmRzLlxuICogVGhleSB1c3VhbGx5IGFwcGVhciBmb3IgZGF0ZXMgdGhhdCBkZW5vdGUgdGltZSBiZWZvcmUgdGhlIHRpbWV6b25lcyB3ZXJlIGludHJvZHVjZWRcbiAqIChlLmcuIGZvciAnRXVyb3BlL1ByYWd1ZScgdGltZXpvbmUgdGhlIG9mZnNldCBpcyBHTVQrMDA6NTc6NDQgYmVmb3JlIDEgT2N0b2JlciAxODkxXG4gKiBhbmQgR01UKzAxOjAwOjAwIGFmdGVyIHRoYXQgZGF0ZSlcbiAqXG4gKiBEYXRlI2dldFRpbWV6b25lT2Zmc2V0IHJldHVybnMgdGhlIG9mZnNldCBpbiBtaW51dGVzIGFuZCB3b3VsZCByZXR1cm4gNTcgZm9yIHRoZSBleGFtcGxlIGFib3ZlLFxuICogd2hpY2ggd291bGQgbGVhZCB0byBpbmNvcnJlY3QgY2FsY3VsYXRpb25zLlxuICpcbiAqIFRoaXMgZnVuY3Rpb24gcmV0dXJucyB0aGUgdGltZXpvbmUgb2Zmc2V0IGluIG1pbGxpc2Vjb25kcyB0aGF0IHRha2VzIHNlY29uZHMgaW4gYWNjb3VudC5cbiAqL1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhkYXRlKSB7XG4gIHZhciB1dGNEYXRlID0gbmV3IERhdGUoRGF0ZS5VVEMoZGF0ZS5nZXRGdWxsWWVhcigpLCBkYXRlLmdldE1vbnRoKCksIGRhdGUuZ2V0RGF0ZSgpLCBkYXRlLmdldEhvdXJzKCksIGRhdGUuZ2V0TWludXRlcygpLCBkYXRlLmdldFNlY29uZHMoKSwgZGF0ZS5nZXRNaWxsaXNlY29uZHMoKSkpO1xuICB1dGNEYXRlLnNldFVUQ0Z1bGxZZWFyKGRhdGUuZ2V0RnVsbFllYXIoKSk7XG4gIHJldHVybiBkYXRlLmdldFRpbWUoKSAtIHV0Y0RhdGUuZ2V0VGltZSgpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgc3RhcnRPZkRheVxuICogQGNhdGVnb3J5IERheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgZGF5IGZvciB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybiB0aGUgc3RhcnQgb2YgYSBkYXkgZm9yIHRoZSBnaXZlbiBkYXRlLlxuICogVGhlIHJlc3VsdCB3aWxsIGJlIGluIHRoZSBsb2NhbCB0aW1lem9uZS5cbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIEBwYXJhbSB7RGF0ZXxOdW1iZXJ9IGRhdGUgLSB0aGUgb3JpZ2luYWwgZGF0ZVxuICogQHJldHVybnMge0RhdGV9IHRoZSBzdGFydCBvZiBhIGRheVxuICogQHRocm93cyB7VHlwZUVycm9yfSAxIGFyZ3VtZW50IHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFRoZSBzdGFydCBvZiBhIGRheSBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZEYXkobmV3IERhdGUoMjAxNCwgOCwgMiwgMTEsIDU1LCAwKSlcbiAqIC8vPT4gVHVlIFNlcCAwMiAyMDE0IDAwOjAwOjAwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3RhcnRPZkRheShkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mRGF5IGZyb20gXCIuLi9zdGFydE9mRGF5L2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9EQVkgPSA4NjQwMDAwMDtcbi8qKlxuICogQG5hbWUgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzXG4gKiBAY2F0ZWdvcnkgRGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIGRheXMgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBHZXQgdGhlIG51bWJlciBvZiBjYWxlbmRhciBkYXlzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLiBUaGlzIG1lYW5zIHRoYXQgdGhlIHRpbWVzIGFyZSByZW1vdmVkXG4gKiBmcm9tIHRoZSBkYXRlcyBhbmQgdGhlbiB0aGUgZGlmZmVyZW5jZSBpbiBkYXlzIGlzIGNhbGN1bGF0ZWQuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcmV0dXJucyB7TnVtYmVyfSB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIGRheXNcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgY2FsZW5kYXIgZGF5cyBhcmUgYmV0d2VlblxuICogLy8gMiBKdWx5IDIwMTEgMjM6MDA6MDAgYW5kIDIgSnVseSAyMDEyIDAwOjAwOjAwP1xuICogY29uc3QgcmVzdWx0ID0gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKFxuICogICBuZXcgRGF0ZSgyMDEyLCA2LCAyLCAwLCAwKSxcbiAqICAgbmV3IERhdGUoMjAxMSwgNiwgMiwgMjMsIDApXG4gKiApXG4gKiAvLz0+IDM2NlxuICogLy8gSG93IG1hbnkgY2FsZW5kYXIgZGF5cyBhcmUgYmV0d2VlblxuICogLy8gMiBKdWx5IDIwMTEgMjM6NTk6MDAgYW5kIDMgSnVseSAyMDExIDAwOjAxOjAwP1xuICogY29uc3QgcmVzdWx0ID0gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKFxuICogICBuZXcgRGF0ZSgyMDExLCA2LCAzLCAwLCAxKSxcbiAqICAgbmV3IERhdGUoMjAxMSwgNiwgMiwgMjMsIDU5KVxuICogKVxuICogLy89PiAxXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzKGRpcnR5RGF0ZUxlZnQsIGRpcnR5RGF0ZVJpZ2h0KSB7XG4gIHJlcXVpcmVkQXJncygyLCBhcmd1bWVudHMpO1xuICB2YXIgc3RhcnRPZkRheUxlZnQgPSBzdGFydE9mRGF5KGRpcnR5RGF0ZUxlZnQpO1xuICB2YXIgc3RhcnRPZkRheVJpZ2h0ID0gc3RhcnRPZkRheShkaXJ0eURhdGVSaWdodCk7XG4gIHZhciB0aW1lc3RhbXBMZWZ0ID0gc3RhcnRPZkRheUxlZnQuZ2V0VGltZSgpIC0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhzdGFydE9mRGF5TGVmdCk7XG4gIHZhciB0aW1lc3RhbXBSaWdodCA9IHN0YXJ0T2ZEYXlSaWdodC5nZXRUaW1lKCkgLSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKHN0YXJ0T2ZEYXlSaWdodCk7IC8vIFJvdW5kIHRoZSBudW1iZXIgb2YgZGF5cyB0byB0aGUgbmVhcmVzdCBpbnRlZ2VyXG4gIC8vIGJlY2F1c2UgdGhlIG51bWJlciBvZiBtaWxsaXNlY29uZHMgaW4gYSBkYXkgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSBkYXkgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKCh0aW1lc3RhbXBMZWZ0IC0gdGltZXN0YW1wUmlnaHQpIC8gTUlMTElTRUNPTkRTX0lOX0RBWSk7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBnZXREYXlcbiAqIEBjYXRlZ29yeSBXZWVrZGF5IEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgZGF5IG9mIHRoZSB3ZWVrIG9mIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBkYXkgb2YgdGhlIHdlZWsgb2YgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGdpdmVuIGRhdGVcbiAqIEByZXR1cm5zIHswfDF8MnwzfDR8NXw2fSB0aGUgZGF5IG9mIHdlZWssIDAgcmVwcmVzZW50cyBTdW5kYXlcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGljaCBkYXkgb2YgdGhlIHdlZWsgaXMgMjkgRmVicnVhcnkgMjAxMj9cbiAqIGNvbnN0IHJlc3VsdCA9IGdldERheShuZXcgRGF0ZSgyMDEyLCAxLCAyOSkpXG4gKiAvLz0+IDNcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXREYXkoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXREYXkoKTtcbiAgcmV0dXJuIGRheTtcbn0iLCJpbXBvcnQgYWRkRGF5cyBmcm9tIFwiLi4vYWRkRGF5cy9pbmRleC5qc1wiO1xuaW1wb3J0IGdldERheSBmcm9tIFwiLi4vZ2V0RGF5L2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBuZXh0RGF5XG4gKiBAY2F0ZWdvcnkgV2Vla2RheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBXaGVuIGlzIHRoZSBuZXh0IGRheSBvZiB0aGUgd2Vlaz9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFdoZW4gaXMgdGhlIG5leHQgZGF5IG9mIHRoZSB3ZWVrPyAwLTYgdGhlIGRheSBvZiB0aGUgd2VlaywgMCByZXByZXNlbnRzIFN1bmRheS5cbiAqXG4gKiBAcGFyYW0ge0RhdGUgfCBudW1iZXJ9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHBhcmFtIHtEYXl9IGRheSAtIGRheSBvZiB0aGUgd2Vla1xuICogQHJldHVybnMge0RhdGV9IC0gdGhlIGRhdGUgaXMgdGhlIG5leHQgZGF5IG9mIHdlZWtcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gLSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGVuIGlzIHRoZSBuZXh0IE1vbmRheSBhZnRlciBNYXIsIDIwLCAyMDIwP1xuICogY29uc3QgcmVzdWx0ID0gbmV4dERheShuZXcgRGF0ZSgyMDIwLCAyLCAyMCksIDEpXG4gKiAvLz0+IE1vbiBNYXIgMjMgMjAyMCAwMDowMDowMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGVuIGlzIHRoZSBuZXh0IFR1ZXNkYXkgYWZ0ZXIgTWFyLCAyMSwgMjAyMD9cbiAqIGNvbnN0IHJlc3VsdCA9IG5leHREYXkobmV3IERhdGUoMjAyMCwgMiwgMjEpLCAyKVxuICogLy89PiBUdWUgTWFyIDI0IDIwMjAgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBuZXh0RGF5KGRhdGUsIGRheSkge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGRlbHRhID0gZGF5IC0gZ2V0RGF5KGRhdGUpO1xuICBpZiAoZGVsdGEgPD0gMCkgZGVsdGEgKz0gNztcbiAgcmV0dXJuIGFkZERheXMoZGF0ZSwgZGVsdGEpO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHN0YXJ0T2ZXZWVrXG4gKiBAY2F0ZWdvcnkgV2VlayBIZWxwZXJzXG4gKiBAc3VtbWFyeSBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgdGhlIGdpdmVuIGRhdGUuXG4gKiBUaGUgcmVzdWx0IHdpbGwgYmUgaW4gdGhlIGxvY2FsIHRpbWV6b25lLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgc3RhcnQgb2YgYSB3ZWVrXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gVGhlIHN0YXJ0IG9mIGEgd2VlayBmb3IgMiBTZXB0ZW1iZXIgMjAxNCAxMTo1NTowMDpcbiAqIGNvbnN0IHJlc3VsdCA9IHN0YXJ0T2ZXZWVrKG5ldyBEYXRlKDIwMTQsIDgsIDIsIDExLCA1NSwgMCkpXG4gKiAvLz0+IFN1biBBdWcgMzEgMjAxNCAwMDowMDowMFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0aGUgd2VlayBzdGFydHMgb24gTW9uZGF5LCB0aGUgc3RhcnQgb2YgdGhlIHdlZWsgZm9yIDIgU2VwdGVtYmVyIDIwMTQgMTE6NTU6MDA6XG4gKiBjb25zdCByZXN1bHQgPSBzdGFydE9mV2VlayhuZXcgRGF0ZSgyMDE0LCA4LCAyLCAxMSwgNTUsIDApLCB7IHdlZWtTdGFydHNPbjogMSB9KVxuICogLy89PiBNb24gU2VwIDAxIDIwMTQgMDA6MDA6MDBcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mV2VlayhkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy53ZWVrU3RhcnRzT247XG4gIHZhciBkZWZhdWx0V2Vla1N0YXJ0c09uID0gbG9jYWxlV2Vla1N0YXJ0c09uID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGxvY2FsZVdlZWtTdGFydHNPbik7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSBvcHRpb25zLndlZWtTdGFydHNPbiA9PSBudWxsID8gZGVmYXVsdFdlZWtTdGFydHNPbiA6IHRvSW50ZWdlcihvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0RGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXREYXRlKGRhdGUuZ2V0RGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0SG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCBzdGFydE9mV2VlayBmcm9tIFwiLi4vc3RhcnRPZldlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7XG4vKipcbiAqIEBuYW1lIGRpZmZlcmVuY2VJbkNhbGVuZGFyV2Vla3NcbiAqIEBjYXRlZ29yeSBXZWVrIEhlbHBlcnNcbiAqIEBzdW1tYXJ5IEdldCB0aGUgbnVtYmVyIG9mIGNhbGVuZGFyIHdlZWtzIGJldHdlZW4gdGhlIGdpdmVuIGRhdGVzLlxuICpcbiAqIEBkZXNjcmlwdGlvblxuICogR2V0IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgd2Vla3MgYmV0d2VlbiB0aGUgZ2l2ZW4gZGF0ZXMuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlTGVmdCAtIHRoZSBsYXRlciBkYXRlXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlUmlnaHQgLSB0aGUgZWFybGllciBkYXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdIC0gYW4gb2JqZWN0IHdpdGggb3B0aW9ucy5cbiAqIEBwYXJhbSB7TG9jYWxlfSBbb3B0aW9ucy5sb2NhbGU9ZGVmYXVsdExvY2FsZV0gLSB0aGUgbG9jYWxlIG9iamVjdC4gU2VlIFtMb2NhbGVde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvTG9jYWxlfVxuICogQHBhcmFtIHswfDF8MnwzfDR8NXw2fSBbb3B0aW9ucy53ZWVrU3RhcnRzT249MF0gLSB0aGUgaW5kZXggb2YgdGhlIGZpcnN0IGRheSBvZiB0aGUgd2VlayAoMCAtIFN1bmRheSlcbiAqIEByZXR1cm5zIHtOdW1iZXJ9IHRoZSBudW1iZXIgb2YgY2FsZW5kYXIgd2Vla3NcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMiBhcmd1bWVudHMgcmVxdWlyZWRcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gSG93IG1hbnkgY2FsZW5kYXIgd2Vla3MgYXJlIGJldHdlZW4gNSBKdWx5IDIwMTQgYW5kIDIwIEp1bHkgMjAxND9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyV2Vla3MoXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDYsIDIwKSxcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgNSlcbiAqIClcbiAqIC8vPT4gM1xuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBJZiB0aGUgd2VlayBzdGFydHMgb24gTW9uZGF5LFxuICogLy8gaG93IG1hbnkgY2FsZW5kYXIgd2Vla3MgYXJlIGJldHdlZW4gNSBKdWx5IDIwMTQgYW5kIDIwIEp1bHkgMjAxND9cbiAqIGNvbnN0IHJlc3VsdCA9IGRpZmZlcmVuY2VJbkNhbGVuZGFyV2Vla3MoXG4gKiAgIG5ldyBEYXRlKDIwMTQsIDYsIDIwKSxcbiAqICAgbmV3IERhdGUoMjAxNCwgNiwgNSksXG4gKiAgIHsgd2Vla1N0YXJ0c09uOiAxIH1cbiAqIClcbiAqIC8vPT4gMlxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGRpZmZlcmVuY2VJbkNhbGVuZGFyV2Vla3MoZGlydHlEYXRlTGVmdCwgZGlydHlEYXRlUmlnaHQsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIHN0YXJ0T2ZXZWVrTGVmdCA9IHN0YXJ0T2ZXZWVrKGRpcnR5RGF0ZUxlZnQsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciBzdGFydE9mV2Vla1JpZ2h0ID0gc3RhcnRPZldlZWsoZGlydHlEYXRlUmlnaHQsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciB0aW1lc3RhbXBMZWZ0ID0gc3RhcnRPZldlZWtMZWZ0LmdldFRpbWUoKSAtIGdldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMoc3RhcnRPZldlZWtMZWZ0KTtcbiAgdmFyIHRpbWVzdGFtcFJpZ2h0ID0gc3RhcnRPZldlZWtSaWdodC5nZXRUaW1lKCkgLSBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzKHN0YXJ0T2ZXZWVrUmlnaHQpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKCh0aW1lc3RhbXBMZWZ0IC0gdGltZXN0YW1wUmlnaHQpIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgaXNWYWxpZFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBJcyB0aGUgZ2l2ZW4gZGF0ZSB2YWxpZD9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFJldHVybnMgZmFsc2UgaWYgYXJndW1lbnQgaXMgSW52YWxpZCBEYXRlIGFuZCB0cnVlIG90aGVyd2lzZS5cbiAqIEFyZ3VtZW50IGlzIGNvbnZlcnRlZCB0byBEYXRlIHVzaW5nIGB0b0RhdGVgLiBTZWUgW3RvRGF0ZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGV9XG4gKiBJbnZhbGlkIERhdGUgaXMgYSBEYXRlLCB3aG9zZSB0aW1lIHZhbHVlIGlzIE5hTi5cbiAqXG4gKiBUaW1lIHZhbHVlIG9mIERhdGU6IGh0dHA6Ly9lczUuZ2l0aHViLmlvLyN4MTUuOS4xLjFcbiAqXG4gKiAjIyMgdjIuMC4wIGJyZWFraW5nIGNoYW5nZXM6XG4gKlxuICogLSBbQ2hhbmdlcyB0aGF0IGFyZSBjb21tb24gZm9yIHRoZSB3aG9sZSBsaWJyYXJ5XShodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvYmxvYi9tYXN0ZXIvZG9jcy91cGdyYWRlR3VpZGUubWQjQ29tbW9uLUNoYW5nZXMpLlxuICpcbiAqIC0gTm93IGBpc1ZhbGlkYCBkb2Vzbid0IHRocm93IGFuIGV4Y2VwdGlvblxuICogICBpZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgbm90IGFuIGluc3RhbmNlIG9mIERhdGUuXG4gKiAgIEluc3RlYWQsIGFyZ3VtZW50IGlzIGNvbnZlcnRlZCBiZWZvcmVoYW5kIHVzaW5nIGB0b0RhdGVgLlxuICpcbiAqICAgRXhhbXBsZXM6XG4gKlxuICogICB8IGBpc1ZhbGlkYCBhcmd1bWVudCAgICAgICAgfCBCZWZvcmUgdjIuMC4wIHwgdjIuMC4wIG9ud2FyZCB8XG4gKiAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLXxcbiAqICAgfCBgbmV3IERhdGUoKWAgICAgICAgICAgICAgIHwgYHRydWVgICAgICAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZSgnMjAxNi0wMS0wMScpYCAgfCBgdHJ1ZWAgICAgICAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYG5ldyBEYXRlKCcnKWAgICAgICAgICAgICB8IGBmYWxzZWAgICAgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgbmV3IERhdGUoMTQ4ODM3MDgzNTA4MSlgIHwgYHRydWVgICAgICAgICB8IGB0cnVlYCAgICAgICAgfFxuICogICB8IGBuZXcgRGF0ZShOYU4pYCAgICAgICAgICAgfCBgZmFsc2VgICAgICAgIHwgYGZhbHNlYCAgICAgICB8XG4gKiAgIHwgYCcyMDE2LTAxLTAxJ2AgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqICAgfCBgJydgICAgICAgICAgICAgICAgICAgICAgIHwgYFR5cGVFcnJvcmAgICB8IGBmYWxzZWAgICAgICAgfFxuICogICB8IGAxNDg4MzcwODM1MDgxYCAgICAgICAgICAgfCBgVHlwZUVycm9yYCAgIHwgYHRydWVgICAgICAgICB8XG4gKiAgIHwgYE5hTmAgICAgICAgICAgICAgICAgICAgICB8IGBUeXBlRXJyb3JgICAgfCBgZmFsc2VgICAgICAgIHxcbiAqXG4gKiAgIFdlIGludHJvZHVjZSB0aGlzIGNoYW5nZSB0byBtYWtlICpkYXRlLWZucyogY29uc2lzdGVudCB3aXRoIEVDTUFTY3JpcHQgYmVoYXZpb3JcbiAqICAgdGhhdCB0cnkgdG8gY29lcmNlIGFyZ3VtZW50cyB0byB0aGUgZXhwZWN0ZWQgdHlwZVxuICogICAod2hpY2ggaXMgYWxzbyB0aGUgY2FzZSB3aXRoIG90aGVyICpkYXRlLWZucyogZnVuY3Rpb25zKS5cbiAqXG4gKiBAcGFyYW0geyp9IGRhdGUgLSB0aGUgZGF0ZSB0byBjaGVja1xuICogQHJldHVybnMge0Jvb2xlYW59IHRoZSBkYXRlIGlzIHZhbGlkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDEgYXJndW1lbnQgcmVxdWlyZWRcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRm9yIHRoZSB2YWxpZCBkYXRlOlxuICogdmFyIHJlc3VsdCA9IGlzVmFsaWQobmV3IERhdGUoMjAxNCwgMSwgMzEpKVxuICogLy89PiB0cnVlXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIEZvciB0aGUgdmFsdWUsIGNvbnZlcnRhYmxlIGludG8gYSBkYXRlOlxuICogdmFyIHJlc3VsdCA9IGlzVmFsaWQoMTM5MzgwNDgwMDAwMClcbiAqIC8vPT4gdHJ1ZVxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBGb3IgdGhlIGludmFsaWQgZGF0ZTpcbiAqIHZhciByZXN1bHQgPSBpc1ZhbGlkKG5ldyBEYXRlKCcnKSlcbiAqIC8vPT4gZmFsc2VcbiAqL1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBpc1ZhbGlkKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgcmV0dXJuICFpc05hTihkYXRlKTtcbn0iLCJpbXBvcnQgRXZlbnRzIGZyb20gJy4vZXZlbnRzLmpzJ1xuaW1wb3J0IHsgc3ViRGF5cywgZGlmZmVyZW5jZUluQ2FsZW5kYXJEYXlzLCBkaWZmZXJlbmNlSW5DYWxlbmRhcldlZWtzLCBuZXh0U3VuZGF5IH0gZnJvbSAnZGF0ZS1mbnMnXG5pbXBvcnQgSW5ib3ggZnJvbSAnLi9pbWcvaW5ib3gucG5nJ1xuaW1wb3J0IFRvZGF5IGZyb20gJy4vaW1nL2NhbGVuZGFyLnBuZydcbmltcG9ydCBUb21vcnJvdyBmcm9tICcuL2ltZy90b21vcnJvdy5wbmcnXG5pbXBvcnQgTmV4dHdlZWsgZnJvbSAnLi9pbWcvbmV4dC13ZWVrLnBuZydcbmltcG9ydCBUb2RvbGlzdCBmcm9tICcuL2ltZy90by1kby1saXN0LnBuZydcbmltcG9ydCBPcGVuYm94IGZyb20gJy4vaW1nL29wZW4tYm94LnBuZydcbiBcblxuY29uc3QgcHJvamVjdHNNb2R1bGUgPSAoZnVuY3Rpb24oKXtcblxuICBjb25zdCBwcm9qZWN0RmFjdG9yeSA9ICh0aXRsZSkgPT4ge1xuXG4gICAgY29uc3QgaWNvbiA9IFRvZG9saXN0XG4gICAgY29uc3QgdHlwZSA9ICd1c2VyJ1xuICAgIGZ1bmN0aW9uIGRpc3BsYXlSdWxlKHRhc2spIHtcbiAgICAgIHJldHVybiB0YXNrLnByb2plY3QgPT09IHRoaXMudGl0bGUgPyB0cnVlIDogZmFsc2VcbiAgICB9XG4gIFxuICBjb25zdCBhcnIgPSB1c2VyUHJvamVjdHMuc2xpY2UoKVxuICBcbiAgLy8gcmV0dXJuIG51bWJlciBvZiBwcm9qZWN0cyB3aXRoIHRoZSBzYW1lIHRpdGxlXG4gIGZ1bmN0aW9uIGdldFJlcGV0aXRpb25zKHRpdGxlKSB7XG4gICAgcmV0dXJuIGFyci5yZWR1Y2UoKGNvdW50LCBwcm9qZWN0KSA9PiB7XG4gICAgICBpZihwcm9qZWN0LnRpdGxlID09PSB0aXRsZSkgY291bnQrK1xuICAgICAgcmV0dXJuIGNvdW50XG4gICAgfSwwKTtcbiAgfVxuICBcbiAgbGV0IGNvdW50ID0gZ2V0UmVwZXRpdGlvbnModGl0bGUpXG4gIFxuICAvLyBpZiB0aGVyZSBpcyAxIG9yIG1vcmUgcHJvamVjdHMgd2l0aCB0aGUgc2FtZSB0aXRsZSwgdXBkYXRlIG5ldyBwcm9qZWN0IHRpdGxlIHRvIGJlIGRpZmZlcmVudFxuICBmdW5jdGlvbiB1cGRhdGVUaXRsZShwcm9qZWN0VGl0bGUpIHtcbiAgICBjb25zdCByZXBlYXRlZCA9IGdldFJlcGV0aXRpb25zKHByb2plY3RUaXRsZSlcbiAgICBpZiAocmVwZWF0ZWQgPCAxKSB7XG4gICAgICB0aXRsZSA9IHByb2plY3RUaXRsZVxuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIFxuICAgIGxldCBuZXdUaXRsZSA9IHByb2plY3RUaXRsZVxuICAgIG5ld1RpdGxlID0gdGl0bGUgKyBgKCR7Y291bnR9KWBcbiAgICBjb3VudCsrXG4gICAgdXBkYXRlVGl0bGUobmV3VGl0bGUpXG4gIH1cbiAgXG4gIHVwZGF0ZVRpdGxlKHRpdGxlKTtcbiAgXG4gICAgcmV0dXJuIHtcbiAgICAgICB0aXRsZSxcbiAgICAgICBpY29uLFxuICAgICAgIGRpc3BsYXlSdWxlLFxuICAgICAgIHR5cGVcbiAgICB9O1xuICB9O1xuXG4gICAgY29uc3QgQ09SRVBST0pFQ1RTID0gW1xuICAgIHtcbiAgICAgIHRpdGxlOidJbmJveCcsXG4gICAgICBpY29uOiBJbmJveCxcbiAgICAgIGRpc3BsYXlSdWxlOiBmdW5jdGlvbih0YXNrKXtcbiAgICAgICAgaWYodGFzay5wcm9qZWN0ID09PSB0aGlzLnRpdGxlKSB7XG4gICAgICAgICAgcmV0dXJuIHRydWUgXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0eXBlOiAnY29yZScsXG4gICAgICBzdG9yZVRhc2tCdG46IHRydWUsXG4gICAgICBhZGRUYXNrQnRuOiB0cnVlXG4gICAgfSxcbiAgICB7XG4gICAgICB0aXRsZTogJ1RvZGF5JyxcbiAgICAgIGljb246IFRvZGF5LFxuICAgICAgZ2V0IGRhdGUoKSB7XG4gICAgICByZXR1cm4gc3ViRGF5cyhuZXcgRGF0ZSgpLCAwKVxuICAgICAgfSxcbiAgICAgIGRpc3BsYXlSdWxlOiBmdW5jdGlvbih0YXNrKSB7XG4gICAgICAgIGlmKGRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyh0aGlzLmRhdGUsIHRhc2suZGF0ZSkgPT09IDApIHtcbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdHlwZTogJ2NvcmUnLFxuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6ICdUb21vcnJvdycsXG4gICAgICBpY29uOiBUb21vcnJvdyxcbiAgICAgIGdldCBkYXRlKCkge1xuICAgICAgICByZXR1cm4gc3ViRGF5cyhuZXcgRGF0ZSgpLCAtMSlcbiAgICAgICAgfSxcbiAgICAgICAgZGlzcGxheVJ1bGU6IGZ1bmN0aW9uKHRhc2spIHtcbiAgICAgICAgICBpZihkaWZmZXJlbmNlSW5DYWxlbmRhckRheXModGhpcy5kYXRlLCB0YXNrLmRhdGUpID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIHR5cGU6ICdjb3JlJ1xuICAgIH0sXG4gICAge1xuICAgICAgdGl0bGU6J1RoaXMgV2VlaycsXG4gICAgICBpY29uOiBOZXh0d2VlayxcbiAgICAgIGdldCBkYXRlKCkge1xuICAgICAgICByZXR1cm4gbmV4dFN1bmRheShuZXcgRGF0ZSgpKTtcbiAgICAgIH0sXG4gICAgICBkaXNwbGF5UnVsZTogZnVuY3Rpb24odGFzaykge1xuICAgICAgICBpZihkaWZmZXJlbmNlSW5DYWxlbmRhcldlZWtzKHRoaXMuZGF0ZSwgdGFzay5kYXRlLCB7IHdlZWtTdGFydHNPbjogMX0pID09PSAwKSB7XG4gICAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICB0eXBlOiAnY29yZSdcbiAgICB9LFxuICAgIHtcbiAgICAgIHRpdGxlOidTb21lZGF5JyxcbiAgICAgIGljb246IE9wZW5ib3gsXG4gICAgICBkaXNwbGF5UnVsZTogZnVuY3Rpb24odGFzayl7XG4gICAgICAgIGlmKHRhc2sucHJvamVjdCA9PT0gdGhpcy50aXRsZSkge1xuICAgICAgICAgIHJldHVybiB0cnVlIFxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9LFxuICAgICAgdHlwZTogJ2NvcmUnXG4gICAgfSxcbiAgXTtcblxuICAgIGxldCB1c2VyUHJvamVjdHMgPSBbXVxuICAgIFxuICAgIGNvbnN0IGxvY2FsUHJvamVjdHMgPSBKU09OLnBhcnNlKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCdwcm9qZWN0cycpKSB8fCBbXVxuICAgIFxuICAgIC8vIHJlY3JlYXRlIG9iamVjdHMgZnJvbSBsb2NhbCBzdG9yYWdlXG4gICBpZihsb2NhbFN0b3JhZ2UuZ2V0SXRlbSgncHJvamVjdHMnKSkge1xuICAgIGxvY2FsUHJvamVjdHMuZm9yRWFjaChwID0+IHtcbiAgICAgIHJldHVybiBhZGRQcm9qZWN0KHAudGl0bGUpO1xuICAgIH0pO1xuICAgIH1cblxuICAgIEV2ZW50cy5vbigndXBkYXRlQ29yZVByb2plY3RzJywgZ2V0Q29yZVByb2plY3RzKTtcbiAgICBFdmVudHMub24oJ3VwZGF0ZVVzZXJQcm9qZWN0cycsIGdldFVzZXJQcm9qZWN0cyk7XG4gICAgRXZlbnRzLm9uKCdjcmVhdGVQcm9qZWN0JywgYWRkUHJvamVjdCk7XG4gICAgRXZlbnRzLm9uKCdyZW1vdmVQcm9qZWN0JywgcmVtb3ZlUHJvamVjdCk7XG5cbiAgICBmdW5jdGlvbiBnZXRVc2VyUHJvamVjdHMoKSB7XG4gICAgICBjb25zdCBwcm9qZWN0cyA9IHVzZXJQcm9qZWN0cy5zbGljZSgpO1xuICAgICAgRXZlbnRzLmVtaXQoJ2RlbGl2ZXJVc2VyUHJvamVjdHMnLCBwcm9qZWN0cyk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gZ2V0Q29yZVByb2plY3RzKCkge1xuICAgICAgY29uc3QgcHJvamVjdHMgPSBDT1JFUFJPSkVDVFMuc2xpY2UoKTtcbiAgICAgIEV2ZW50cy5lbWl0KCdkZWxpdmVyQ29yZVByb2plY3RzJywgcHJvamVjdHMpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFkZFByb2plY3QgKHRpdGxlKSB7XG4gICAgICAgY29uc3QgcHJvamVjdCA9IHByb2plY3RGYWN0b3J5KHRpdGxlKTtcbiAgICAgICB1c2VyUHJvamVjdHMucHVzaChwcm9qZWN0KTtcbiAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgncHJvamVjdHMnLCBKU09OLnN0cmluZ2lmeSh1c2VyUHJvamVjdHMuc2xpY2UoKSkpO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZVByb2plY3QocHJvamVjdCkge1xuICAgICAgY29uc3QgaW5kZXggPSB1c2VyUHJvamVjdHMuZmluZEluZGV4KHAgPT4gcCA9PT0gcHJvamVjdCk7XG4gICAgIHVzZXJQcm9qZWN0cyA9IFsuLi51c2VyUHJvamVjdHMuc2xpY2UoMCwgaW5kZXgpLCAuLi51c2VyUHJvamVjdHMuc2xpY2UoaW5kZXggKyAxKV07XG4gICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdwcm9qZWN0cycsIEpTT04uc3RyaW5naWZ5KHVzZXJQcm9qZWN0cy5zbGljZSgpKSk7XG4gICAgfSAgXG5cbiAgcmV0dXJuIHtcbiAgfVxufSgpKTtcblxuXG5leHBvcnQgZGVmYXVsdCBwcm9qZWN0c01vZHVsZS5wcm9qZWN0cyAiLCJpbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuaW1wb3J0IG5leHREYXkgZnJvbSBcIi4uL25leHREYXkvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBuZXh0U3VuZGF5XG4gKiBAY2F0ZWdvcnkgV2Vla2RheSBIZWxwZXJzXG4gKiBAc3VtbWFyeSBXaGVuIGlzIHRoZSBuZXh0IFN1bmRheT9cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFdoZW4gaXMgdGhlIG5leHQgU3VuZGF5P1xuICpcbiAqIEBwYXJhbSB7RGF0ZSB8IG51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIHN0YXJ0IGNvdW50aW5nIGZyb21cbiAqIEByZXR1cm5zIHtEYXRlfSB0aGUgbmV4dCBTdW5kYXlcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBXaGVuIGlzIHRoZSBuZXh0IFN1bmRheSBhZnRlciBNYXIsIDIyLCAyMDIwP1xuICogY29uc3QgcmVzdWx0ID0gbmV4dFN1bmRheShuZXcgRGF0ZSgyMDIwLCAyLCAyMikpXG4gKiAvLz0+IFN1biBNYXIgMjkgMjAyMCAwMDowMDowMFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIG5leHRTdW5kYXkoZGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgcmV0dXJuIG5leHREYXkodG9EYXRlKGRhdGUpLCAwKTtcbn0iLCJ2YXIgZm9ybWF0RGlzdGFuY2VMb2NhbGUgPSB7XG4gIGxlc3NUaGFuWFNlY29uZHM6IHtcbiAgICBvbmU6ICdsZXNzIHRoYW4gYSBzZWNvbmQnLFxuICAgIG90aGVyOiAnbGVzcyB0aGFuIHt7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICB4U2Vjb25kczoge1xuICAgIG9uZTogJzEgc2Vjb25kJyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBzZWNvbmRzJ1xuICB9LFxuICBoYWxmQU1pbnV0ZTogJ2hhbGYgYSBtaW51dGUnLFxuICBsZXNzVGhhblhNaW51dGVzOiB7XG4gICAgb25lOiAnbGVzcyB0aGFuIGEgbWludXRlJyxcbiAgICBvdGhlcjogJ2xlc3MgdGhhbiB7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgeE1pbnV0ZXM6IHtcbiAgICBvbmU6ICcxIG1pbnV0ZScsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gbWludXRlcydcbiAgfSxcbiAgYWJvdXRYSG91cnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIGhvdXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4SG91cnM6IHtcbiAgICBvbmU6ICcxIGhvdXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IGhvdXJzJ1xuICB9LFxuICB4RGF5czoge1xuICAgIG9uZTogJzEgZGF5JyxcbiAgICBvdGhlcjogJ3t7Y291bnR9fSBkYXlzJ1xuICB9LFxuICBhYm91dFhXZWVrczoge1xuICAgIG9uZTogJ2Fib3V0IDEgd2VlaycsXG4gICAgb3RoZXI6ICdhYm91dCB7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIHhXZWVrczoge1xuICAgIG9uZTogJzEgd2VlaycsXG4gICAgb3RoZXI6ICd7e2NvdW50fX0gd2Vla3MnXG4gIH0sXG4gIGFib3V0WE1vbnRoczoge1xuICAgIG9uZTogJ2Fib3V0IDEgbW9udGgnLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgeE1vbnRoczoge1xuICAgIG9uZTogJzEgbW9udGgnLFxuICAgIG90aGVyOiAne3tjb3VudH19IG1vbnRocydcbiAgfSxcbiAgYWJvdXRYWWVhcnM6IHtcbiAgICBvbmU6ICdhYm91dCAxIHllYXInLFxuICAgIG90aGVyOiAnYWJvdXQge3tjb3VudH19IHllYXJzJ1xuICB9LFxuICB4WWVhcnM6IHtcbiAgICBvbmU6ICcxIHllYXInLFxuICAgIG90aGVyOiAne3tjb3VudH19IHllYXJzJ1xuICB9LFxuICBvdmVyWFllYXJzOiB7XG4gICAgb25lOiAnb3ZlciAxIHllYXInLFxuICAgIG90aGVyOiAnb3ZlciB7e2NvdW50fX0geWVhcnMnXG4gIH0sXG4gIGFsbW9zdFhZZWFyczoge1xuICAgIG9uZTogJ2FsbW9zdCAxIHllYXInLFxuICAgIG90aGVyOiAnYWxtb3N0IHt7Y291bnR9fSB5ZWFycydcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGZvcm1hdERpc3RhbmNlKHRva2VuLCBjb3VudCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHJlc3VsdDtcblxuICBpZiAodHlwZW9mIGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl07XG4gIH0gZWxzZSBpZiAoY291bnQgPT09IDEpIHtcbiAgICByZXN1bHQgPSBmb3JtYXREaXN0YW5jZUxvY2FsZVt0b2tlbl0ub25lO1xuICB9IGVsc2Uge1xuICAgIHJlc3VsdCA9IGZvcm1hdERpc3RhbmNlTG9jYWxlW3Rva2VuXS5vdGhlci5yZXBsYWNlKCd7e2NvdW50fX0nLCBjb3VudCk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5hZGRTdWZmaXgpIHtcbiAgICBpZiAob3B0aW9ucy5jb21wYXJpc29uID4gMCkge1xuICAgICAgcmV0dXJuICdpbiAnICsgcmVzdWx0O1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzdWx0ICsgJyBhZ28nO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRGb3JtYXRMb25nRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiB7fTtcbiAgICAvLyBUT0RPOiBSZW1vdmUgU3RyaW5nKClcbiAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgdmFyIGZvcm1hdCA9IGFyZ3MuZm9ybWF0c1t3aWR0aF0gfHwgYXJncy5mb3JtYXRzW2FyZ3MuZGVmYXVsdFdpZHRoXTtcbiAgICByZXR1cm4gZm9ybWF0O1xuICB9O1xufSIsImltcG9ydCBidWlsZEZvcm1hdExvbmdGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZEZvcm1hdExvbmdGbi9pbmRleC5qc1wiO1xudmFyIGRhdGVGb3JtYXRzID0ge1xuICBmdWxsOiAnRUVFRSwgTU1NTSBkbywgeScsXG4gIGxvbmc6ICdNTU1NIGRvLCB5JyxcbiAgbWVkaXVtOiAnTU1NIGQsIHknLFxuICBzaG9ydDogJ01NL2RkL3l5eXknXG59O1xudmFyIHRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiAnaDptbTpzcyBhIHp6enonLFxuICBsb25nOiAnaDptbTpzcyBhIHonLFxuICBtZWRpdW06ICdoOm1tOnNzIGEnLFxuICBzaG9ydDogJ2g6bW0gYSdcbn07XG52YXIgZGF0ZVRpbWVGb3JtYXRzID0ge1xuICBmdWxsOiBcInt7ZGF0ZX19ICdhdCcge3t0aW1lfX1cIixcbiAgbG9uZzogXCJ7e2RhdGV9fSAnYXQnIHt7dGltZX19XCIsXG4gIG1lZGl1bTogJ3t7ZGF0ZX19LCB7e3RpbWV9fScsXG4gIHNob3J0OiAne3tkYXRlfX0sIHt7dGltZX19J1xufTtcbnZhciBmb3JtYXRMb25nID0ge1xuICBkYXRlOiBidWlsZEZvcm1hdExvbmdGbih7XG4gICAgZm9ybWF0czogZGF0ZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSksXG4gIHRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiB0aW1lRm9ybWF0cyxcbiAgICBkZWZhdWx0V2lkdGg6ICdmdWxsJ1xuICB9KSxcbiAgZGF0ZVRpbWU6IGJ1aWxkRm9ybWF0TG9uZ0ZuKHtcbiAgICBmb3JtYXRzOiBkYXRlVGltZUZvcm1hdHMsXG4gICAgZGVmYXVsdFdpZHRoOiAnZnVsbCdcbiAgfSlcbn07XG5leHBvcnQgZGVmYXVsdCBmb3JtYXRMb25nOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGJ1aWxkTWF0Y2hQYXR0ZXJuRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKHN0cmluZykge1xuICAgIHZhciBvcHRpb25zID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiB7fTtcbiAgICB2YXIgbWF0Y2hSZXN1bHQgPSBzdHJpbmcubWF0Y2goYXJncy5tYXRjaFBhdHRlcm4pO1xuICAgIGlmICghbWF0Y2hSZXN1bHQpIHJldHVybiBudWxsO1xuICAgIHZhciBtYXRjaGVkU3RyaW5nID0gbWF0Y2hSZXN1bHRbMF07XG4gICAgdmFyIHBhcnNlUmVzdWx0ID0gc3RyaW5nLm1hdGNoKGFyZ3MucGFyc2VQYXR0ZXJuKTtcbiAgICBpZiAoIXBhcnNlUmVzdWx0KSByZXR1cm4gbnVsbDtcbiAgICB2YXIgdmFsdWUgPSBhcmdzLnZhbHVlQ2FsbGJhY2sgPyBhcmdzLnZhbHVlQ2FsbGJhY2socGFyc2VSZXN1bHRbMF0pIDogcGFyc2VSZXN1bHRbMF07XG4gICAgdmFsdWUgPSBvcHRpb25zLnZhbHVlQ2FsbGJhY2sgPyBvcHRpb25zLnZhbHVlQ2FsbGJhY2sodmFsdWUpIDogdmFsdWU7XG4gICAgdmFyIHJlc3QgPSBzdHJpbmcuc2xpY2UobWF0Y2hlZFN0cmluZy5sZW5ndGgpO1xuICAgIHJldHVybiB7XG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICByZXN0OiByZXN0XG4gICAgfTtcbiAgfTtcbn0iLCJ2YXIgZm9ybWF0UmVsYXRpdmVMb2NhbGUgPSB7XG4gIGxhc3RXZWVrOiBcIidsYXN0JyBlZWVlICdhdCcgcFwiLFxuICB5ZXN0ZXJkYXk6IFwiJ3llc3RlcmRheSBhdCcgcFwiLFxuICB0b2RheTogXCIndG9kYXkgYXQnIHBcIixcbiAgdG9tb3Jyb3c6IFwiJ3RvbW9ycm93IGF0JyBwXCIsXG4gIG5leHRXZWVrOiBcImVlZWUgJ2F0JyBwXCIsXG4gIG90aGVyOiAnUCdcbn07XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBmb3JtYXRSZWxhdGl2ZSh0b2tlbiwgX2RhdGUsIF9iYXNlRGF0ZSwgX29wdGlvbnMpIHtcbiAgcmV0dXJuIGZvcm1hdFJlbGF0aXZlTG9jYWxlW3Rva2VuXTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBidWlsZExvY2FsaXplRm4oYXJncykge1xuICByZXR1cm4gZnVuY3Rpb24gKGRpcnR5SW5kZXgsIGRpcnR5T3B0aW9ucykge1xuICAgIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICAgIHZhciBjb250ZXh0ID0gb3B0aW9ucy5jb250ZXh0ID8gU3RyaW5nKG9wdGlvbnMuY29udGV4dCkgOiAnc3RhbmRhbG9uZSc7XG4gICAgdmFyIHZhbHVlc0FycmF5O1xuXG4gICAgaWYgKGNvbnRleHQgPT09ICdmb3JtYXR0aW5nJyAmJiBhcmdzLmZvcm1hdHRpbmdWYWx1ZXMpIHtcbiAgICAgIHZhciBkZWZhdWx0V2lkdGggPSBhcmdzLmRlZmF1bHRGb3JtYXR0aW5nV2lkdGggfHwgYXJncy5kZWZhdWx0V2lkdGg7XG4gICAgICB2YXIgd2lkdGggPSBvcHRpb25zLndpZHRoID8gU3RyaW5nKG9wdGlvbnMud2lkdGgpIDogZGVmYXVsdFdpZHRoO1xuICAgICAgdmFsdWVzQXJyYXkgPSBhcmdzLmZvcm1hdHRpbmdWYWx1ZXNbd2lkdGhdIHx8IGFyZ3MuZm9ybWF0dGluZ1ZhbHVlc1tkZWZhdWx0V2lkdGhdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgX2RlZmF1bHRXaWR0aCA9IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YXIgX3dpZHRoID0gb3B0aW9ucy53aWR0aCA/IFN0cmluZyhvcHRpb25zLndpZHRoKSA6IGFyZ3MuZGVmYXVsdFdpZHRoO1xuXG4gICAgICB2YWx1ZXNBcnJheSA9IGFyZ3MudmFsdWVzW193aWR0aF0gfHwgYXJncy52YWx1ZXNbX2RlZmF1bHRXaWR0aF07XG4gICAgfVxuXG4gICAgdmFyIGluZGV4ID0gYXJncy5hcmd1bWVudENhbGxiYWNrID8gYXJncy5hcmd1bWVudENhbGxiYWNrKGRpcnR5SW5kZXgpIDogZGlydHlJbmRleDsgLy8gQHRzLWlnbm9yZTogRm9yIHNvbWUgcmVhc29uIFR5cGVTY3JpcHQganVzdCBkb24ndCB3YW50IHRvIG1hdGNoIGl0LCBubyBtYXR0ZXIgaG93IGhhcmQgd2UgdHJ5LiBJIGNoYWxsYW5nZSB5b3UgdG8gdHJ5IHRvIHJlbW92ZSBpdCFcblxuICAgIHJldHVybiB2YWx1ZXNBcnJheVtpbmRleF07XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYnVpbGRNYXRjaEZuKGFyZ3MpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgICB2YXIgb3B0aW9ucyA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDoge307XG4gICAgdmFyIHdpZHRoID0gb3B0aW9ucy53aWR0aDtcbiAgICB2YXIgbWF0Y2hQYXR0ZXJuID0gd2lkdGggJiYgYXJncy5tYXRjaFBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLm1hdGNoUGF0dGVybnNbYXJncy5kZWZhdWx0TWF0Y2hXaWR0aF07XG4gICAgdmFyIG1hdGNoUmVzdWx0ID0gc3RyaW5nLm1hdGNoKG1hdGNoUGF0dGVybik7XG5cbiAgICBpZiAoIW1hdGNoUmVzdWx0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgbWF0Y2hlZFN0cmluZyA9IG1hdGNoUmVzdWx0WzBdO1xuICAgIHZhciBwYXJzZVBhdHRlcm5zID0gd2lkdGggJiYgYXJncy5wYXJzZVBhdHRlcm5zW3dpZHRoXSB8fCBhcmdzLnBhcnNlUGF0dGVybnNbYXJncy5kZWZhdWx0UGFyc2VXaWR0aF07XG4gICAgdmFyIGtleSA9IEFycmF5LmlzQXJyYXkocGFyc2VQYXR0ZXJucykgPyBmaW5kSW5kZXgocGFyc2VQYXR0ZXJucywgZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobWF0Y2hlZFN0cmluZyk7XG4gICAgfSkgOiBmaW5kS2V5KHBhcnNlUGF0dGVybnMsIGZ1bmN0aW9uIChwYXR0ZXJuKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi50ZXN0KG1hdGNoZWRTdHJpbmcpO1xuICAgIH0pO1xuICAgIHZhciB2YWx1ZTtcbiAgICB2YWx1ZSA9IGFyZ3MudmFsdWVDYWxsYmFjayA/IGFyZ3MudmFsdWVDYWxsYmFjayhrZXkpIDoga2V5O1xuICAgIHZhbHVlID0gb3B0aW9ucy52YWx1ZUNhbGxiYWNrID8gb3B0aW9ucy52YWx1ZUNhbGxiYWNrKHZhbHVlKSA6IHZhbHVlO1xuICAgIHZhciByZXN0ID0gc3RyaW5nLnNsaWNlKG1hdGNoZWRTdHJpbmcubGVuZ3RoKTtcbiAgICByZXR1cm4ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcmVzdDogcmVzdFxuICAgIH07XG4gIH07XG59XG5cbmZ1bmN0aW9uIGZpbmRLZXkob2JqZWN0LCBwcmVkaWNhdGUpIHtcbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmIChvYmplY3QuaGFzT3duUHJvcGVydHkoa2V5KSAmJiBwcmVkaWNhdGUob2JqZWN0W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59XG5cbmZ1bmN0aW9uIGZpbmRJbmRleChhcnJheSwgcHJlZGljYXRlKSB7XG4gIGZvciAodmFyIGtleSA9IDA7IGtleSA8IGFycmF5Lmxlbmd0aDsga2V5KyspIHtcbiAgICBpZiAocHJlZGljYXRlKGFycmF5W2tleV0pKSB7XG4gICAgICByZXR1cm4ga2V5O1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB1bmRlZmluZWQ7XG59IiwiaW1wb3J0IGZvcm1hdERpc3RhbmNlIGZyb20gXCIuL19saWIvZm9ybWF0RGlzdGFuY2UvaW5kZXguanNcIjtcbmltcG9ydCBmb3JtYXRMb25nIGZyb20gXCIuL19saWIvZm9ybWF0TG9uZy9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdFJlbGF0aXZlIGZyb20gXCIuL19saWIvZm9ybWF0UmVsYXRpdmUvaW5kZXguanNcIjtcbmltcG9ydCBsb2NhbGl6ZSBmcm9tIFwiLi9fbGliL2xvY2FsaXplL2luZGV4LmpzXCI7XG5pbXBvcnQgbWF0Y2ggZnJvbSBcIi4vX2xpYi9tYXRjaC9pbmRleC5qc1wiO1xuLyoqXG4gKiBAdHlwZSB7TG9jYWxlfVxuICogQGNhdGVnb3J5IExvY2FsZXNcbiAqIEBzdW1tYXJ5IEVuZ2xpc2ggbG9jYWxlIChVbml0ZWQgU3RhdGVzKS5cbiAqIEBsYW5ndWFnZSBFbmdsaXNoXG4gKiBAaXNvLTYzOS0yIGVuZ1xuICogQGF1dGhvciBTYXNoYSBLb3NzIFtAa29zc25vY29ycF17QGxpbmsgaHR0cHM6Ly9naXRodWIuY29tL2tvc3Nub2NvcnB9XG4gKiBAYXV0aG9yIExlc2hhIEtvc3MgW0BsZXNoYWtvc3Nde0BsaW5rIGh0dHBzOi8vZ2l0aHViLmNvbS9sZXNoYWtvc3N9XG4gKi9cblxudmFyIGxvY2FsZSA9IHtcbiAgY29kZTogJ2VuLVVTJyxcbiAgZm9ybWF0RGlzdGFuY2U6IGZvcm1hdERpc3RhbmNlLFxuICBmb3JtYXRMb25nOiBmb3JtYXRMb25nLFxuICBmb3JtYXRSZWxhdGl2ZTogZm9ybWF0UmVsYXRpdmUsXG4gIGxvY2FsaXplOiBsb2NhbGl6ZSxcbiAgbWF0Y2g6IG1hdGNoLFxuICBvcHRpb25zOiB7XG4gICAgd2Vla1N0YXJ0c09uOiAwXG4gICAgLyogU3VuZGF5ICovXG4gICAgLFxuICAgIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZTogMVxuICB9XG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxlOyIsImltcG9ydCBidWlsZExvY2FsaXplRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRMb2NhbGl6ZUZuL2luZGV4LmpzXCI7XG52YXIgZXJhVmFsdWVzID0ge1xuICBuYXJyb3c6IFsnQicsICdBJ10sXG4gIGFiYnJldmlhdGVkOiBbJ0JDJywgJ0FEJ10sXG4gIHdpZGU6IFsnQmVmb3JlIENocmlzdCcsICdBbm5vIERvbWluaSddXG59O1xudmFyIHF1YXJ0ZXJWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWycxJywgJzInLCAnMycsICc0J10sXG4gIGFiYnJldmlhdGVkOiBbJ1ExJywgJ1EyJywgJ1EzJywgJ1E0J10sXG4gIHdpZGU6IFsnMXN0IHF1YXJ0ZXInLCAnMm5kIHF1YXJ0ZXInLCAnM3JkIHF1YXJ0ZXInLCAnNHRoIHF1YXJ0ZXInXVxufTsgLy8gTm90ZTogaW4gRW5nbGlzaCwgdGhlIG5hbWVzIG9mIGRheXMgb2YgdGhlIHdlZWsgYW5kIG1vbnRocyBhcmUgY2FwaXRhbGl6ZWQuXG4vLyBJZiB5b3UgYXJlIG1ha2luZyBhIG5ldyBsb2NhbGUgYmFzZWQgb24gdGhpcyBvbmUsIGNoZWNrIGlmIHRoZSBzYW1lIGlzIHRydWUgZm9yIHRoZSBsYW5ndWFnZSB5b3UncmUgd29ya2luZyBvbi5cbi8vIEdlbmVyYWxseSwgZm9ybWF0dGVkIGRhdGVzIHNob3VsZCBsb29rIGxpa2UgdGhleSBhcmUgaW4gdGhlIG1pZGRsZSBvZiBhIHNlbnRlbmNlLFxuLy8gZS5nLiBpbiBTcGFuaXNoIGxhbmd1YWdlIHRoZSB3ZWVrZGF5cyBhbmQgbW9udGhzIHNob3VsZCBiZSBpbiB0aGUgbG93ZXJjYXNlLlxuXG52YXIgbW9udGhWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydKJywgJ0YnLCAnTScsICdBJywgJ00nLCAnSicsICdKJywgJ0EnLCAnUycsICdPJywgJ04nLCAnRCddLFxuICBhYmJyZXZpYXRlZDogWydKYW4nLCAnRmViJywgJ01hcicsICdBcHInLCAnTWF5JywgJ0p1bicsICdKdWwnLCAnQXVnJywgJ1NlcCcsICdPY3QnLCAnTm92JywgJ0RlYyddLFxuICB3aWRlOiBbJ0phbnVhcnknLCAnRmVicnVhcnknLCAnTWFyY2gnLCAnQXByaWwnLCAnTWF5JywgJ0p1bmUnLCAnSnVseScsICdBdWd1c3QnLCAnU2VwdGVtYmVyJywgJ09jdG9iZXInLCAnTm92ZW1iZXInLCAnRGVjZW1iZXInXVxufTtcbnZhciBkYXlWYWx1ZXMgPSB7XG4gIG5hcnJvdzogWydTJywgJ00nLCAnVCcsICdXJywgJ1QnLCAnRicsICdTJ10sXG4gIHNob3J0OiBbJ1N1JywgJ01vJywgJ1R1JywgJ1dlJywgJ1RoJywgJ0ZyJywgJ1NhJ10sXG4gIGFiYnJldmlhdGVkOiBbJ1N1bicsICdNb24nLCAnVHVlJywgJ1dlZCcsICdUaHUnLCAnRnJpJywgJ1NhdCddLFxuICB3aWRlOiBbJ1N1bmRheScsICdNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5J11cbn07XG52YXIgZGF5UGVyaW9kVmFsdWVzID0ge1xuICBuYXJyb3c6IHtcbiAgICBhbTogJ2EnLFxuICAgIHBtOiAncCcsXG4gICAgbWlkbmlnaHQ6ICdtaScsXG4gICAgbm9vbjogJ24nLFxuICAgIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdldmVuaW5nJyxcbiAgICBuaWdodDogJ25pZ2h0J1xuICB9LFxuICBhYmJyZXZpYXRlZDoge1xuICAgIGFtOiAnQU0nLFxuICAgIHBtOiAnUE0nLFxuICAgIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICAgIG5vb246ICdub29uJyxcbiAgICBtb3JuaW5nOiAnbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnZXZlbmluZycsXG4gICAgbmlnaHQ6ICduaWdodCdcbiAgfSxcbiAgd2lkZToge1xuICAgIGFtOiAnYS5tLicsXG4gICAgcG06ICdwLm0uJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ21vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2FmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnbmlnaHQnXG4gIH1cbn07XG52YXIgZm9ybWF0dGluZ0RheVBlcmlvZFZhbHVlcyA9IHtcbiAgbmFycm93OiB7XG4gICAgYW06ICdhJyxcbiAgICBwbTogJ3AnLFxuICAgIG1pZG5pZ2h0OiAnbWknLFxuICAgIG5vb246ICduJyxcbiAgICBtb3JuaW5nOiAnaW4gdGhlIG1vcm5pbmcnLFxuICAgIGFmdGVybm9vbjogJ2luIHRoZSBhZnRlcm5vb24nLFxuICAgIGV2ZW5pbmc6ICdpbiB0aGUgZXZlbmluZycsXG4gICAgbmlnaHQ6ICdhdCBuaWdodCdcbiAgfSxcbiAgYWJicmV2aWF0ZWQ6IHtcbiAgICBhbTogJ0FNJyxcbiAgICBwbTogJ1BNJyxcbiAgICBtaWRuaWdodDogJ21pZG5pZ2h0JyxcbiAgICBub29uOiAnbm9vbicsXG4gICAgbW9ybmluZzogJ2luIHRoZSBtb3JuaW5nJyxcbiAgICBhZnRlcm5vb246ICdpbiB0aGUgYWZ0ZXJub29uJyxcbiAgICBldmVuaW5nOiAnaW4gdGhlIGV2ZW5pbmcnLFxuICAgIG5pZ2h0OiAnYXQgbmlnaHQnXG4gIH0sXG4gIHdpZGU6IHtcbiAgICBhbTogJ2EubS4nLFxuICAgIHBtOiAncC5tLicsXG4gICAgbWlkbmlnaHQ6ICdtaWRuaWdodCcsXG4gICAgbm9vbjogJ25vb24nLFxuICAgIG1vcm5pbmc6ICdpbiB0aGUgbW9ybmluZycsXG4gICAgYWZ0ZXJub29uOiAnaW4gdGhlIGFmdGVybm9vbicsXG4gICAgZXZlbmluZzogJ2luIHRoZSBldmVuaW5nJyxcbiAgICBuaWdodDogJ2F0IG5pZ2h0J1xuICB9XG59O1xuXG5mdW5jdGlvbiBvcmRpbmFsTnVtYmVyKGRpcnR5TnVtYmVyLCBfZGlydHlPcHRpb25zKSB7XG4gIHZhciBudW1iZXIgPSBOdW1iZXIoZGlydHlOdW1iZXIpOyAvLyBJZiBvcmRpbmFsIG51bWJlcnMgZGVwZW5kIG9uIGNvbnRleHQsIGZvciBleGFtcGxlLFxuICAvLyBpZiB0aGV5IGFyZSBkaWZmZXJlbnQgZm9yIGRpZmZlcmVudCBncmFtbWF0aWNhbCBnZW5kZXJzLFxuICAvLyB1c2UgYG9wdGlvbnMudW5pdGA6XG4gIC8vXG4gIC8vICAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge31cbiAgLy8gICB2YXIgdW5pdCA9IFN0cmluZyhvcHRpb25zLnVuaXQpXG4gIC8vXG4gIC8vIHdoZXJlIGB1bml0YCBjYW4gYmUgJ3llYXInLCAncXVhcnRlcicsICdtb250aCcsICd3ZWVrJywgJ2RhdGUnLCAnZGF5T2ZZZWFyJyxcbiAgLy8gJ2RheScsICdob3VyJywgJ21pbnV0ZScsICdzZWNvbmQnXG5cbiAgdmFyIHJlbTEwMCA9IG51bWJlciAlIDEwMDtcblxuICBpZiAocmVtMTAwID4gMjAgfHwgcmVtMTAwIDwgMTApIHtcbiAgICBzd2l0Y2ggKHJlbTEwMCAlIDEwKSB7XG4gICAgICBjYXNlIDE6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnc3QnO1xuXG4gICAgICBjYXNlIDI6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAnbmQnO1xuXG4gICAgICBjYXNlIDM6XG4gICAgICAgIHJldHVybiBudW1iZXIgKyAncmQnO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudW1iZXIgKyAndGgnO1xufVxuXG52YXIgbG9jYWxpemUgPSB7XG4gIG9yZGluYWxOdW1iZXI6IG9yZGluYWxOdW1iZXIsXG4gIGVyYTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGVyYVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IHF1YXJ0ZXJWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZScsXG4gICAgYXJndW1lbnRDYWxsYmFjazogZnVuY3Rpb24gKHF1YXJ0ZXIpIHtcbiAgICAgIHJldHVybiBOdW1iZXIocXVhcnRlcikgLSAxO1xuICAgIH1cbiAgfSksXG4gIG1vbnRoOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogbW9udGhWYWx1ZXMsXG4gICAgZGVmYXVsdFdpZHRoOiAnd2lkZSdcbiAgfSksXG4gIGRheTogYnVpbGRMb2NhbGl6ZUZuKHtcbiAgICB2YWx1ZXM6IGRheVZhbHVlcyxcbiAgICBkZWZhdWx0V2lkdGg6ICd3aWRlJ1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZExvY2FsaXplRm4oe1xuICAgIHZhbHVlczogZGF5UGVyaW9kVmFsdWVzLFxuICAgIGRlZmF1bHRXaWR0aDogJ3dpZGUnLFxuICAgIGZvcm1hdHRpbmdWYWx1ZXM6IGZvcm1hdHRpbmdEYXlQZXJpb2RWYWx1ZXMsXG4gICAgZGVmYXVsdEZvcm1hdHRpbmdXaWR0aDogJ3dpZGUnXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbG9jYWxpemU7IiwiaW1wb3J0IGJ1aWxkTWF0Y2hQYXR0ZXJuRm4gZnJvbSBcIi4uLy4uLy4uL19saWIvYnVpbGRNYXRjaFBhdHRlcm5Gbi9pbmRleC5qc1wiO1xuaW1wb3J0IGJ1aWxkTWF0Y2hGbiBmcm9tIFwiLi4vLi4vLi4vX2xpYi9idWlsZE1hdGNoRm4vaW5kZXguanNcIjtcbnZhciBtYXRjaE9yZGluYWxOdW1iZXJQYXR0ZXJuID0gL14oXFxkKykodGh8c3R8bmR8cmQpPy9pO1xudmFyIHBhcnNlT3JkaW5hbE51bWJlclBhdHRlcm4gPSAvXFxkKy9pO1xudmFyIG1hdGNoRXJhUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYnxhKS9pLFxuICBhYmJyZXZpYXRlZDogL14oYlxcLj9cXHM/Y1xcLj98YlxcLj9cXHM/Y1xcLj9cXHM/ZVxcLj98YVxcLj9cXHM/ZFxcLj98Y1xcLj9cXHM/ZVxcLj8pL2ksXG4gIHdpZGU6IC9eKGJlZm9yZSBjaHJpc3R8YmVmb3JlIGNvbW1vbiBlcmF8YW5ubyBkb21pbml8Y29tbW9uIGVyYSkvaVxufTtcbnZhciBwYXJzZUVyYVBhdHRlcm5zID0ge1xuICBhbnk6IFsvXmIvaSwgL14oYXxjKS9pXVxufTtcbnZhciBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyA9IHtcbiAgbmFycm93OiAvXlsxMjM0XS9pLFxuICBhYmJyZXZpYXRlZDogL15xWzEyMzRdL2ksXG4gIHdpZGU6IC9eWzEyMzRdKHRofHN0fG5kfHJkKT8gcXVhcnRlci9pXG59O1xudmFyIHBhcnNlUXVhcnRlclBhdHRlcm5zID0ge1xuICBhbnk6IFsvMS9pLCAvMi9pLCAvMy9pLCAvNC9pXVxufTtcbnZhciBtYXRjaE1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bamZtYXNvbmRdL2ksXG4gIGFiYnJldmlhdGVkOiAvXihqYW58ZmVifG1hcnxhcHJ8bWF5fGp1bnxqdWx8YXVnfHNlcHxvY3R8bm92fGRlYykvaSxcbiAgd2lkZTogL14oamFudWFyeXxmZWJydWFyeXxtYXJjaHxhcHJpbHxtYXl8anVuZXxqdWx5fGF1Z3VzdHxzZXB0ZW1iZXJ8b2N0b2Jlcnxub3ZlbWJlcnxkZWNlbWJlcikvaVxufTtcbnZhciBwYXJzZU1vbnRoUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogWy9eai9pLCAvXmYvaSwgL15tL2ksIC9eYS9pLCAvXm0vaSwgL15qL2ksIC9eai9pLCAvXmEvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldLFxuICBhbnk6IFsvXmphL2ksIC9eZi9pLCAvXm1hci9pLCAvXmFwL2ksIC9ebWF5L2ksIC9eanVuL2ksIC9eanVsL2ksIC9eYXUvaSwgL15zL2ksIC9eby9pLCAvXm4vaSwgL15kL2ldXG59O1xudmFyIG1hdGNoRGF5UGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL15bc210d2ZdL2ksXG4gIHNob3J0OiAvXihzdXxtb3x0dXx3ZXx0aHxmcnxzYSkvaSxcbiAgYWJicmV2aWF0ZWQ6IC9eKHN1bnxtb258dHVlfHdlZHx0aHV8ZnJpfHNhdCkvaSxcbiAgd2lkZTogL14oc3VuZGF5fG1vbmRheXx0dWVzZGF5fHdlZG5lc2RheXx0aHVyc2RheXxmcmlkYXl8c2F0dXJkYXkpL2lcbn07XG52YXIgcGFyc2VEYXlQYXR0ZXJucyA9IHtcbiAgbmFycm93OiBbL15zL2ksIC9ebS9pLCAvXnQvaSwgL153L2ksIC9edC9pLCAvXmYvaSwgL15zL2ldLFxuICBhbnk6IFsvXnN1L2ksIC9ebS9pLCAvXnR1L2ksIC9edy9pLCAvXnRoL2ksIC9eZi9pLCAvXnNhL2ldXG59O1xudmFyIG1hdGNoRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIG5hcnJvdzogL14oYXxwfG1pfG58KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pLFxuICBhbnk6IC9eKFthcF1cXC4/XFxzP21cXC4/fG1pZG5pZ2h0fG5vb258KGluIHRoZXxhdCkgKG1vcm5pbmd8YWZ0ZXJub29ufGV2ZW5pbmd8bmlnaHQpKS9pXG59O1xudmFyIHBhcnNlRGF5UGVyaW9kUGF0dGVybnMgPSB7XG4gIGFueToge1xuICAgIGFtOiAvXmEvaSxcbiAgICBwbTogL15wL2ksXG4gICAgbWlkbmlnaHQ6IC9ebWkvaSxcbiAgICBub29uOiAvXm5vL2ksXG4gICAgbW9ybmluZzogL21vcm5pbmcvaSxcbiAgICBhZnRlcm5vb246IC9hZnRlcm5vb24vaSxcbiAgICBldmVuaW5nOiAvZXZlbmluZy9pLFxuICAgIG5pZ2h0OiAvbmlnaHQvaVxuICB9XG59O1xudmFyIG1hdGNoID0ge1xuICBvcmRpbmFsTnVtYmVyOiBidWlsZE1hdGNoUGF0dGVybkZuKHtcbiAgICBtYXRjaFBhdHRlcm46IG1hdGNoT3JkaW5hbE51bWJlclBhdHRlcm4sXG4gICAgcGFyc2VQYXR0ZXJuOiBwYXJzZU9yZGluYWxOdW1iZXJQYXR0ZXJuLFxuICAgIHZhbHVlQ2FsbGJhY2s6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHBhcnNlSW50KHZhbHVlLCAxMCk7XG4gICAgfVxuICB9KSxcbiAgZXJhOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRXJhUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZUVyYVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgcXVhcnRlcjogYnVpbGRNYXRjaEZuKHtcbiAgICBtYXRjaFBhdHRlcm5zOiBtYXRjaFF1YXJ0ZXJQYXR0ZXJucyxcbiAgICBkZWZhdWx0TWF0Y2hXaWR0aDogJ3dpZGUnLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlUXVhcnRlclBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55JyxcbiAgICB2YWx1ZUNhbGxiYWNrOiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgIHJldHVybiBpbmRleCArIDE7XG4gICAgfVxuICB9KSxcbiAgbW9udGg6IGJ1aWxkTWF0Y2hGbih7XG4gICAgbWF0Y2hQYXR0ZXJuczogbWF0Y2hNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRNYXRjaFdpZHRoOiAnd2lkZScsXG4gICAgcGFyc2VQYXR0ZXJuczogcGFyc2VNb250aFBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5OiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICd3aWRlJyxcbiAgICBwYXJzZVBhdHRlcm5zOiBwYXJzZURheVBhdHRlcm5zLFxuICAgIGRlZmF1bHRQYXJzZVdpZHRoOiAnYW55J1xuICB9KSxcbiAgZGF5UGVyaW9kOiBidWlsZE1hdGNoRm4oe1xuICAgIG1hdGNoUGF0dGVybnM6IG1hdGNoRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdE1hdGNoV2lkdGg6ICdhbnknLFxuICAgIHBhcnNlUGF0dGVybnM6IHBhcnNlRGF5UGVyaW9kUGF0dGVybnMsXG4gICAgZGVmYXVsdFBhcnNlV2lkdGg6ICdhbnknXG4gIH0pXG59O1xuZXhwb3J0IGRlZmF1bHQgbWF0Y2g7IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vX2xpYi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbi8qKlxuICogQG5hbWUgYWRkTWlsbGlzZWNvbmRzXG4gKiBAY2F0ZWdvcnkgTWlsbGlzZWNvbmQgSGVscGVyc1xuICogQHN1bW1hcnkgQWRkIHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIEFkZCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgdG8gdGhlIGdpdmVuIGRhdGUuXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiBAcGFyYW0ge0RhdGV8TnVtYmVyfSBkYXRlIC0gdGhlIGRhdGUgdG8gYmUgY2hhbmdlZFxuICogQHBhcmFtIHtOdW1iZXJ9IGFtb3VudCAtIHRoZSBhbW91bnQgb2YgbWlsbGlzZWNvbmRzIHRvIGJlIGFkZGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBhZGRlZFxuICogQHRocm93cyB7VHlwZUVycm9yfSAyIGFyZ3VtZW50cyByZXF1aXJlZFxuICpcbiAqIEBleGFtcGxlXG4gKiAvLyBBZGQgNzUwIG1pbGxpc2Vjb25kcyB0byAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gYWRkTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MzAuNzUwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciB0aW1lc3RhbXAgPSB0b0RhdGUoZGlydHlEYXRlKS5nZXRUaW1lKCk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gbmV3IERhdGUodGltZXN0YW1wICsgYW1vdW50KTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi9fbGliL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IGFkZE1pbGxpc2Vjb25kcyBmcm9tIFwiLi4vYWRkTWlsbGlzZWNvbmRzL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9fbGliL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xuLyoqXG4gKiBAbmFtZSBzdWJNaWxsaXNlY29uZHNcbiAqIEBjYXRlZ29yeSBNaWxsaXNlY29uZCBIZWxwZXJzXG4gKiBAc3VtbWFyeSBTdWJ0cmFjdCB0aGUgc3BlY2lmaWVkIG51bWJlciBvZiBtaWxsaXNlY29uZHMgZnJvbSB0aGUgZ2l2ZW4gZGF0ZS5cbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIFN1YnRyYWN0IHRoZSBzcGVjaWZpZWQgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBmcm9tIHRoZSBnaXZlbiBkYXRlLlxuICpcbiAqICMjIyB2Mi4wLjAgYnJlYWtpbmcgY2hhbmdlczpcbiAqXG4gKiAtIFtDaGFuZ2VzIHRoYXQgYXJlIGNvbW1vbiBmb3IgdGhlIHdob2xlIGxpYnJhcnldKGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9ibG9iL21hc3Rlci9kb2NzL3VwZ3JhZGVHdWlkZS5tZCNDb21tb24tQ2hhbmdlcykuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBkYXRlIHRvIGJlIGNoYW5nZWRcbiAqIEBwYXJhbSB7TnVtYmVyfSBhbW91bnQgLSB0aGUgYW1vdW50IG9mIG1pbGxpc2Vjb25kcyB0byBiZSBzdWJ0cmFjdGVkLiBQb3NpdGl2ZSBkZWNpbWFscyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguZmxvb3JgLCBkZWNpbWFscyBsZXNzIHRoYW4gemVybyB3aWxsIGJlIHJvdW5kZWQgdXNpbmcgYE1hdGguY2VpbGAuXG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIG5ldyBkYXRlIHdpdGggdGhlIG1pbGxpc2Vjb25kcyBzdWJ0cmFjdGVkXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKlxuICogQGV4YW1wbGVcbiAqIC8vIFN1YnRyYWN0IDc1MCBtaWxsaXNlY29uZHMgZnJvbSAxMCBKdWx5IDIwMTQgMTI6NDU6MzAuMDAwOlxuICogY29uc3QgcmVzdWx0ID0gc3ViTWlsbGlzZWNvbmRzKG5ldyBEYXRlKDIwMTQsIDYsIDEwLCAxMiwgNDUsIDMwLCAwKSwgNzUwKVxuICogLy89PiBUaHUgSnVsIDEwIDIwMTQgMTI6NDU6MjkuMjUwXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ViTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgZGlydHlBbW91bnQpIHtcbiAgcmVxdWlyZWRBcmdzKDIsIGFyZ3VtZW50cyk7XG4gIHZhciBhbW91bnQgPSB0b0ludGVnZXIoZGlydHlBbW91bnQpO1xuICByZXR1cm4gYWRkTWlsbGlzZWNvbmRzKGRpcnR5RGF0ZSwgLWFtb3VudCk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gYWRkTGVhZGluZ1plcm9zKG51bWJlciwgdGFyZ2V0TGVuZ3RoKSB7XG4gIHZhciBzaWduID0gbnVtYmVyIDwgMCA/ICctJyA6ICcnO1xuICB2YXIgb3V0cHV0ID0gTWF0aC5hYnMobnVtYmVyKS50b1N0cmluZygpO1xuXG4gIHdoaWxlIChvdXRwdXQubGVuZ3RoIDwgdGFyZ2V0TGVuZ3RoKSB7XG4gICAgb3V0cHV0ID0gJzAnICsgb3V0cHV0O1xuICB9XG5cbiAgcmV0dXJuIHNpZ24gKyBvdXRwdXQ7XG59IiwiaW1wb3J0IGFkZExlYWRpbmdaZXJvcyBmcm9tIFwiLi4vLi4vYWRkTGVhZGluZ1plcm9zL2luZGV4LmpzXCI7XG4vKlxuICogfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfFxuICogfCAgYSAgfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgfCAgQSogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgZCAgfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgfCAgRCAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgaCAgfCBIb3VyIFsxLTEyXSAgICAgICAgICAgICAgICAgICAgfCAgSCAgfCBIb3VyIFswLTIzXSAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgbSAgfCBNaW51dGUgICAgICAgICAgICAgICAgICAgICAgICAgfCAgTSAgfCBNb250aCAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICogfCAgcyAgfCBTZWNvbmQgICAgICAgICAgICAgICAgICAgICAgICAgfCAgUyAgfCBGcmFjdGlvbiBvZiBzZWNvbmQgICAgICAgICAgICAgfFxuICogfCAgeSAgfCBZZWFyIChhYnMpICAgICAgICAgICAgICAgICAgICAgfCAgWSAgfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfFxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICogYXJlIG5vdCBpbXBsZW1lbnRlZCBidXQgcmVzZXJ2ZWQgYnkgVW5pY29kZSBzdGFuZGFyZC5cbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gWWVhclxuICB5OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICAvLyBGcm9tIGh0dHA6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtMzEvdHIzNS1kYXRlcy5odG1sI0RhdGVfRm9ybWF0X3Rva2Vuc1xuICAgIC8vIHwgWWVhciAgICAgfCAgICAgeSB8IHl5IHwgICB5eXkgfCAgeXl5eSB8IHl5eXl5IHxcbiAgICAvLyB8LS0tLS0tLS0tLXwtLS0tLS0tfC0tLS18LS0tLS0tLXwtLS0tLS0tfC0tLS0tLS18XG4gICAgLy8gfCBBRCAxICAgICB8ICAgICAxIHwgMDEgfCAgIDAwMSB8ICAwMDAxIHwgMDAwMDEgfFxuICAgIC8vIHwgQUQgMTIgICAgfCAgICAxMiB8IDEyIHwgICAwMTIgfCAgMDAxMiB8IDAwMDEyIHxcbiAgICAvLyB8IEFEIDEyMyAgIHwgICAxMjMgfCAyMyB8ICAgMTIzIHwgIDAxMjMgfCAwMDEyMyB8XG4gICAgLy8gfCBBRCAxMjM0ICB8ICAxMjM0IHwgMzQgfCAgMTIzNCB8ICAxMjM0IHwgMDEyMzQgfFxuICAgIC8vIHwgQUQgMTIzNDUgfCAxMjM0NSB8IDQ1IHwgMTIzNDUgfCAxMjM0NSB8IDEyMzQ1IHxcbiAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB5ZWFyID0gc2lnbmVkWWVhciA+IDAgPyBzaWduZWRZZWFyIDogMSAtIHNpZ25lZFllYXI7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyh0b2tlbiA9PT0gJ3l5JyA/IHllYXIgJSAxMDAgOiB5ZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNb250aFxuICBNOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbW9udGggPSBkYXRlLmdldFVUQ01vbnRoKCk7XG4gICAgcmV0dXJuIHRva2VuID09PSAnTScgPyBTdHJpbmcobW9udGggKyAxKSA6IGFkZExlYWRpbmdaZXJvcyhtb250aCArIDEsIDIpO1xuICB9LFxuICAvLyBEYXkgb2YgdGhlIG1vbnRoXG4gIGQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENEYXRlKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEFNIG9yIFBNXG4gIGE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXRlLmdldFVUQ0hvdXJzKCkgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZS50b1VwcGVyQ2FzZSgpO1xuXG4gICAgICBjYXNlICdhYWEnOlxuICAgICAgICByZXR1cm4gZGF5UGVyaW9kRW51bVZhbHVlO1xuXG4gICAgICBjYXNlICdhYWFhYSc6XG4gICAgICAgIHJldHVybiBkYXlQZXJpb2RFbnVtVmFsdWVbMF07XG5cbiAgICAgIGNhc2UgJ2FhYWEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGRheVBlcmlvZEVudW1WYWx1ZSA9PT0gJ2FtJyA/ICdhLm0uJyA6ICdwLm0uJztcbiAgICB9XG4gIH0sXG4gIC8vIEhvdXIgWzEtMTJdXG4gIGg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpICUgMTIgfHwgMTIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzAtMjNdXG4gIEg6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENIb3VycygpLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaW51dGVcbiAgbTogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhkYXRlLmdldFVUQ01pbnV0ZXMoKSwgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF0ZS5nZXRVVENTZWNvbmRzKCksIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEZyYWN0aW9uIG9mIHNlY29uZFxuICBTOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgbnVtYmVyT2ZEaWdpdHMgPSB0b2tlbi5sZW5ndGg7XG4gICAgdmFyIG1pbGxpc2Vjb25kcyA9IGRhdGUuZ2V0VVRDTWlsbGlzZWNvbmRzKCk7XG4gICAgdmFyIGZyYWN0aW9uYWxTZWNvbmRzID0gTWF0aC5mbG9vcihtaWxsaXNlY29uZHMgKiBNYXRoLnBvdygxMCwgbnVtYmVyT2ZEaWdpdHMgLSAzKSk7XG4gICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhmcmFjdGlvbmFsU2Vjb25kcywgdG9rZW4ubGVuZ3RoKTtcbiAgfVxufTtcbmV4cG9ydCBkZWZhdWx0IGZvcm1hdHRlcnM7IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjtcbnZhciBNSUxMSVNFQ09ORFNfSU5fREFZID0gODY0MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENEYXlPZlllYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgdGltZXN0YW1wID0gZGF0ZS5nZXRUaW1lKCk7XG4gIGRhdGUuc2V0VVRDTW9udGgoMCwgMSk7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mWWVhclRpbWVzdGFtcCA9IGRhdGUuZ2V0VGltZSgpO1xuICB2YXIgZGlmZmVyZW5jZSA9IHRpbWVzdGFtcCAtIHN0YXJ0T2ZZZWFyVGltZXN0YW1wO1xuICByZXR1cm4gTWF0aC5mbG9vcihkaWZmZXJlbmNlIC8gTUlMTElTRUNPTkRTX0lOX0RBWSkgKyAxO1xufSIsImltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSAxO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUpO1xuICB2YXIgZGF5ID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgdmFyIGRpZmYgPSAoZGF5IDwgd2Vla1N0YXJ0c09uID8gNyA6IDApICsgZGF5IC0gd2Vla1N0YXJ0c09uO1xuICBkYXRlLnNldFVUQ0RhdGUoZGF0ZS5nZXRVVENEYXRlKCkgLSBkaWZmKTtcbiAgZGF0ZS5zZXRVVENIb3VycygwLCAwLCAwLCAwKTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIHllYXIgPSBkYXRlLmdldFVUQ0Z1bGxZZWFyKCk7XG4gIHZhciBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIuc2V0VVRDRnVsbFllYXIoeWVhciArIDEsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnlPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5T2ZOZXh0WWVhcik7XG4gIHZhciBmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyID0gbmV3IERhdGUoMCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0VVRDRnVsbFllYXIoeWVhciwgMCwgNCk7XG4gIGZvdXJ0aE9mSmFudWFyeU9mVGhpc1llYXIuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBzdGFydE9mVGhpc1llYXIgPSBzdGFydE9mVVRDSVNPV2Vlayhmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyKTtcblxuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwiaW1wb3J0IGdldFVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHN0YXJ0T2ZVVENJU09XZWVrIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDSVNPV2Vla1llYXIoZGlydHlEYXRlKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgeWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRpcnR5RGF0ZSk7XG4gIHZhciBmb3VydGhPZkphbnVhcnkgPSBuZXcgRGF0ZSgwKTtcbiAgZm91cnRoT2ZKYW51YXJ5LnNldFVUQ0Z1bGxZZWFyKHllYXIsIDAsIDQpO1xuICBmb3VydGhPZkphbnVhcnkuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ0lTT1dlZWsoZm91cnRoT2ZKYW51YXJ5KTtcbiAgcmV0dXJuIGRhdGU7XG59IiwiaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENJU09XZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ0lTT1dlZWtZZWFyIGZyb20gXCIuLi9zdGFydE9mVVRDSVNPV2Vla1llYXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL3JlcXVpcmVkQXJncy9pbmRleC5qc1wiO1xudmFyIE1JTExJU0VDT05EU19JTl9XRUVLID0gNjA0ODAwMDAwOyAvLyBUaGlzIGZ1bmN0aW9uIHdpbGwgYmUgYSBwYXJ0IG9mIHB1YmxpYyBBUEkgd2hlbiBVVEMgZnVuY3Rpb24gd2lsbCBiZSBpbXBsZW1lbnRlZC5cbi8vIFNlZSBpc3N1ZTogaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2lzc3Vlcy8zNzZcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0VVRDSVNPV2VlayhkaXJ0eURhdGUpIHtcbiAgcmVxdWlyZWRBcmdzKDEsIGFyZ3VtZW50cyk7XG4gIHZhciBkYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG4gIHZhciBkaWZmID0gc3RhcnRPZlVUQ0lTT1dlZWsoZGF0ZSkuZ2V0VGltZSgpIC0gc3RhcnRPZlVUQ0lTT1dlZWtZZWFyKGRhdGUpLmdldFRpbWUoKTsgLy8gUm91bmQgdGhlIG51bWJlciBvZiBkYXlzIHRvIHRoZSBuZWFyZXN0IGludGVnZXJcbiAgLy8gYmVjYXVzZSB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyBpbiBhIHdlZWsgaXMgbm90IGNvbnN0YW50XG4gIC8vIChlLmcuIGl0J3MgZGlmZmVyZW50IGluIHRoZSB3ZWVrIG9mIHRoZSBkYXlsaWdodCBzYXZpbmcgdGltZSBjbG9jayBzaGlmdClcblxuICByZXR1cm4gTWF0aC5yb3VuZChkaWZmIC8gTUlMTElTRUNPTkRTX0lOX1dFRUspICsgMTtcbn0iLCJpbXBvcnQgdG9JbnRlZ2VyIGZyb20gXCIuLi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uLy4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzdGFydE9mVVRDV2VlayhkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZVdlZWtTdGFydHNPbiA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy53ZWVrU3RhcnRzT247XG4gIHZhciBkZWZhdWx0V2Vla1N0YXJ0c09uID0gbG9jYWxlV2Vla1N0YXJ0c09uID09IG51bGwgPyAwIDogdG9JbnRlZ2VyKGxvY2FsZVdlZWtTdGFydHNPbik7XG4gIHZhciB3ZWVrU3RhcnRzT24gPSBvcHRpb25zLndlZWtTdGFydHNPbiA9PSBudWxsID8gZGVmYXVsdFdlZWtTdGFydHNPbiA6IHRvSW50ZWdlcihvcHRpb25zLndlZWtTdGFydHNPbik7IC8vIFRlc3QgaWYgd2Vla1N0YXJ0c09uIGlzIGJldHdlZW4gMCBhbmQgNiBfYW5kXyBpcyBub3QgTmFOXG5cbiAgaWYgKCEod2Vla1N0YXJ0c09uID49IDAgJiYgd2Vla1N0YXJ0c09uIDw9IDYpKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ3dlZWtTdGFydHNPbiBtdXN0IGJlIGJldHdlZW4gMCBhbmQgNiBpbmNsdXNpdmVseScpO1xuICB9XG5cbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRheSA9IGRhdGUuZ2V0VVRDRGF5KCk7XG4gIHZhciBkaWZmID0gKGRheSA8IHdlZWtTdGFydHNPbiA/IDcgOiAwKSArIGRheSAtIHdlZWtTdGFydHNPbjtcbiAgZGF0ZS5zZXRVVENEYXRlKGRhdGUuZ2V0VVRDRGF0ZSgpIC0gZGlmZik7XG4gIGRhdGUuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHJldHVybiBkYXRlO1xufSIsImltcG9ydCB0b0ludGVnZXIgZnJvbSBcIi4uL3RvSW50ZWdlci9pbmRleC5qc1wiO1xuaW1wb3J0IHRvRGF0ZSBmcm9tIFwiLi4vLi4vdG9EYXRlL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGdldFVUQ1dlZWtZZWFyKGRpcnR5RGF0ZSwgZGlydHlPcHRpb25zKSB7XG4gIHJlcXVpcmVkQXJncygxLCBhcmd1bWVudHMpO1xuICB2YXIgZGF0ZSA9IHRvRGF0ZShkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucyk7XG4gIHZhciB5ZWFyID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpO1xuICB2YXIgb3B0aW9ucyA9IGRpcnR5T3B0aW9ucyB8fCB7fTtcbiAgdmFyIGxvY2FsZSA9IG9wdGlvbnMubG9jYWxlO1xuICB2YXIgbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlICYmIGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgZmlyc3RXZWVrT2ZOZXh0WWVhciA9IG5ldyBEYXRlKDApO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0Z1bGxZZWFyKHllYXIgKyAxLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZk5leHRZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZk5leHRZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZOZXh0WWVhciwgZGlydHlPcHRpb25zKTtcbiAgdmFyIGZpcnN0V2Vla09mVGhpc1llYXIgPSBuZXcgRGF0ZSgwKTtcbiAgZmlyc3RXZWVrT2ZUaGlzWWVhci5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWtPZlRoaXNZZWFyLnNldFVUQ0hvdXJzKDAsIDAsIDAsIDApO1xuICB2YXIgc3RhcnRPZlRoaXNZZWFyID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrT2ZUaGlzWWVhciwgZGlydHlPcHRpb25zKTtcblxuICBpZiAoZGF0ZS5nZXRUaW1lKCkgPj0gc3RhcnRPZk5leHRZZWFyLmdldFRpbWUoKSkge1xuICAgIHJldHVybiB5ZWFyICsgMTtcbiAgfSBlbHNlIGlmIChkYXRlLmdldFRpbWUoKSA+PSBzdGFydE9mVGhpc1llYXIuZ2V0VGltZSgpKSB7XG4gICAgcmV0dXJuIHllYXI7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHllYXIgLSAxO1xuICB9XG59IiwiaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vdG9JbnRlZ2VyL2luZGV4LmpzXCI7XG5pbXBvcnQgZ2V0VVRDV2Vla1llYXIgZnJvbSBcIi4uL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgc3RhcnRPZlVUQ1dlZWsgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrL2luZGV4LmpzXCI7XG5pbXBvcnQgcmVxdWlyZWRBcmdzIGZyb20gXCIuLi9yZXF1aXJlZEFyZ3MvaW5kZXguanNcIjsgLy8gVGhpcyBmdW5jdGlvbiB3aWxsIGJlIGEgcGFydCBvZiBwdWJsaWMgQVBJIHdoZW4gVVRDIGZ1bmN0aW9uIHdpbGwgYmUgaW1wbGVtZW50ZWQuXG4vLyBTZWUgaXNzdWU6IGh0dHBzOi8vZ2l0aHViLmNvbS9kYXRlLWZucy9kYXRlLWZucy9pc3N1ZXMvMzc2XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHN0YXJ0T2ZVVENXZWVrWWVhcihkaXJ0eURhdGUsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIG9wdGlvbnMgPSBkaXJ0eU9wdGlvbnMgfHwge307XG4gIHZhciBsb2NhbGUgPSBvcHRpb25zLmxvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZSAmJiBsb2NhbGUub3B0aW9ucyAmJiBsb2NhbGUub3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGU7XG4gIHZhciBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlID0gbG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyAxIDogdG9JbnRlZ2VyKGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciBmaXJzdFdlZWtDb250YWluc0RhdGUgPSBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9PSBudWxsID8gZGVmYXVsdEZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA6IHRvSW50ZWdlcihvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZSk7XG4gIHZhciB5ZWFyID0gZ2V0VVRDV2Vla1llYXIoZGlydHlEYXRlLCBkaXJ0eU9wdGlvbnMpO1xuICB2YXIgZmlyc3RXZWVrID0gbmV3IERhdGUoMCk7XG4gIGZpcnN0V2Vlay5zZXRVVENGdWxsWWVhcih5ZWFyLCAwLCBmaXJzdFdlZWtDb250YWluc0RhdGUpO1xuICBmaXJzdFdlZWsuc2V0VVRDSG91cnMoMCwgMCwgMCwgMCk7XG4gIHZhciBkYXRlID0gc3RhcnRPZlVUQ1dlZWsoZmlyc3RXZWVrLCBkaXJ0eU9wdGlvbnMpO1xuICByZXR1cm4gZGF0ZTtcbn0iLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi8uLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2VlayBmcm9tIFwiLi4vc3RhcnRPZlVUQ1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBzdGFydE9mVVRDV2Vla1llYXIgZnJvbSBcIi4uL3N0YXJ0T2ZVVENXZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IHJlcXVpcmVkQXJncyBmcm9tIFwiLi4vcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG52YXIgTUlMTElTRUNPTkRTX0lOX1dFRUsgPSA2MDQ4MDAwMDA7IC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBhIHBhcnQgb2YgcHVibGljIEFQSSB3aGVuIFVUQyBmdW5jdGlvbiB3aWxsIGJlIGltcGxlbWVudGVkLlxuLy8gU2VlIGlzc3VlOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnZXRVVENXZWVrKGRpcnR5RGF0ZSwgb3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcbiAgdmFyIGRhdGUgPSB0b0RhdGUoZGlydHlEYXRlKTtcbiAgdmFyIGRpZmYgPSBzdGFydE9mVVRDV2VlayhkYXRlLCBvcHRpb25zKS5nZXRUaW1lKCkgLSBzdGFydE9mVVRDV2Vla1llYXIoZGF0ZSwgb3B0aW9ucykuZ2V0VGltZSgpOyAvLyBSb3VuZCB0aGUgbnVtYmVyIG9mIGRheXMgdG8gdGhlIG5lYXJlc3QgaW50ZWdlclxuICAvLyBiZWNhdXNlIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGluIGEgd2VlayBpcyBub3QgY29uc3RhbnRcbiAgLy8gKGUuZy4gaXQncyBkaWZmZXJlbnQgaW4gdGhlIHdlZWsgb2YgdGhlIGRheWxpZ2h0IHNhdmluZyB0aW1lIGNsb2NrIHNoaWZ0KVxuXG4gIHJldHVybiBNYXRoLnJvdW5kKGRpZmYgLyBNSUxMSVNFQ09ORFNfSU5fV0VFSykgKyAxO1xufSIsImltcG9ydCBsaWdodEZvcm1hdHRlcnMgZnJvbSBcIi4uL2xpZ2h0Rm9ybWF0dGVycy9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ0RheU9mWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENEYXlPZlllYXIvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ0lTT1dlZWsvaW5kZXguanNcIjtcbmltcG9ydCBnZXRVVENJU09XZWVrWWVhciBmcm9tIFwiLi4vLi4vLi4vX2xpYi9nZXRVVENJU09XZWVrWWVhci9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWsgZnJvbSBcIi4uLy4uLy4uL19saWIvZ2V0VVRDV2Vlay9pbmRleC5qc1wiO1xuaW1wb3J0IGdldFVUQ1dlZWtZZWFyIGZyb20gXCIuLi8uLi8uLi9fbGliL2dldFVUQ1dlZWtZZWFyL2luZGV4LmpzXCI7XG5pbXBvcnQgYWRkTGVhZGluZ1plcm9zIGZyb20gXCIuLi8uLi9hZGRMZWFkaW5nWmVyb3MvaW5kZXguanNcIjtcbnZhciBkYXlQZXJpb2RFbnVtID0ge1xuICBhbTogJ2FtJyxcbiAgcG06ICdwbScsXG4gIG1pZG5pZ2h0OiAnbWlkbmlnaHQnLFxuICBub29uOiAnbm9vbicsXG4gIG1vcm5pbmc6ICdtb3JuaW5nJyxcbiAgYWZ0ZXJub29uOiAnYWZ0ZXJub29uJyxcbiAgZXZlbmluZzogJ2V2ZW5pbmcnLFxuICBuaWdodDogJ25pZ2h0J1xufTtcbi8qXG4gKiB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICB8IFVuaXQgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS18LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18XG4gKiB8ICBhICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBBKiB8IE1pbGxpc2Vjb25kcyBpbiBkYXkgICAgICAgICAgICB8XG4gKiB8ICBiICB8IEFNLCBQTSwgbm9vbiwgbWlkbmlnaHQgICAgICAgICB8ICBCICB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICB8XG4gKiB8ICBjICB8IFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrICB8ICBDKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8XG4gKiB8ICBkICB8IERheSBvZiBtb250aCAgICAgICAgICAgICAgICAgICB8ICBEICB8IERheSBvZiB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBlICB8IExvY2FsIGRheSBvZiB3ZWVrICAgICAgICAgICAgICB8ICBFICB8IERheSBvZiB3ZWVrICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBmICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBGKiB8IERheSBvZiB3ZWVrIGluIG1vbnRoICAgICAgICAgICB8XG4gKiB8ICBnKiB8IE1vZGlmaWVkIEp1bGlhbiBkYXkgICAgICAgICAgICB8ICBHICB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBoICB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICB8ICBIICB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBpISB8IElTTyBkYXkgb2Ygd2VlayAgICAgICAgICAgICAgICB8ICBJISB8IElTTyB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgICB8XG4gKiB8ICBqKiB8IExvY2FsaXplZCBob3VyIHcvIGRheSBwZXJpb2QgICB8ICBKKiB8IExvY2FsaXplZCBob3VyIHcvbyBkYXkgcGVyaW9kICB8XG4gKiB8ICBrICB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICB8ICBLICB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBsKiB8IChkZXByZWNhdGVkKSAgICAgICAgICAgICAgICAgICB8ICBMICB8IFN0YW5kLWFsb25lIG1vbnRoICAgICAgICAgICAgICB8XG4gKiB8ICBtICB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICB8ICBNICB8IE1vbnRoICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBuICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICBOICB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICBvISB8IE9yZGluYWwgbnVtYmVyIG1vZGlmaWVyICAgICAgICB8ICBPICB8IFRpbWV6b25lIChHTVQpICAgICAgICAgICAgICAgICB8XG4gKiB8ICBwISB8IExvbmcgbG9jYWxpemVkIHRpbWUgICAgICAgICAgICB8ICBQISB8IExvbmcgbG9jYWxpemVkIGRhdGUgICAgICAgICAgICB8XG4gKiB8ICBxICB8IFN0YW5kLWFsb25lIHF1YXJ0ZXIgICAgICAgICAgICB8ICBRICB8IFF1YXJ0ZXIgICAgICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICByKiB8IFJlbGF0ZWQgR3JlZ29yaWFuIHllYXIgICAgICAgICB8ICBSISB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICB8XG4gKiB8ICBzICB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICB8ICBTICB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICB8XG4gKiB8ICB0ISB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICB8ICBUISB8IE1pbGxpc2Vjb25kcyB0aW1lc3RhbXAgICAgICAgICB8XG4gKiB8ICB1ICB8IEV4dGVuZGVkIHllYXIgICAgICAgICAgICAgICAgICB8ICBVKiB8IEN5Y2xpYyB5ZWFyICAgICAgICAgICAgICAgICAgICB8XG4gKiB8ICB2KiB8IFRpbWV6b25lIChnZW5lcmljIG5vbi1sb2NhdC4pICB8ICBWKiB8IFRpbWV6b25lIChsb2NhdGlvbikgICAgICAgICAgICB8XG4gKiB8ICB3ICB8IExvY2FsIHdlZWsgb2YgeWVhciAgICAgICAgICAgICB8ICBXKiB8IFdlZWsgb2YgbW9udGggICAgICAgICAgICAgICAgICB8XG4gKiB8ICB4ICB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICB8ICBYICB8IFRpbWV6b25lIChJU08tODYwMSkgICAgICAgICAgICB8XG4gKiB8ICB5ICB8IFllYXIgKGFicykgICAgICAgICAgICAgICAgICAgICB8ICBZICB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICB8XG4gKiB8ICB6ICB8IFRpbWV6b25lIChzcGVjaWZpYyBub24tbG9jYXQuKSB8ICBaKiB8IFRpbWV6b25lIChhbGlhc2VzKSAgICAgICAgICAgICB8XG4gKlxuICogTGV0dGVycyBtYXJrZWQgYnkgKiBhcmUgbm90IGltcGxlbWVudGVkIGJ1dCByZXNlcnZlZCBieSBVbmljb2RlIHN0YW5kYXJkLlxuICpcbiAqIExldHRlcnMgbWFya2VkIGJ5ICEgYXJlIG5vbi1zdGFuZGFyZCwgYnV0IGltcGxlbWVudGVkIGJ5IGRhdGUtZm5zOlxuICogLSBgb2AgbW9kaWZpZXMgdGhlIHByZXZpb3VzIHRva2VuIHRvIHR1cm4gaXQgaW50byBhbiBvcmRpbmFsIChzZWUgYGZvcm1hdGAgZG9jcylcbiAqIC0gYGlgIGlzIElTTyBkYXkgb2Ygd2Vlay4gRm9yIGBpYCBhbmQgYGlpYCBpcyByZXR1cm5zIG51bWVyaWMgSVNPIHdlZWsgZGF5cyxcbiAqICAgaS5lLiA3IGZvciBTdW5kYXksIDEgZm9yIE1vbmRheSwgZXRjLlxuICogLSBgSWAgaXMgSVNPIHdlZWsgb2YgeWVhciwgYXMgb3Bwb3NlZCB0byBgd2Agd2hpY2ggaXMgbG9jYWwgd2VlayBvZiB5ZWFyLlxuICogLSBgUmAgaXMgSVNPIHdlZWstbnVtYmVyaW5nIHllYXIsIGFzIG9wcG9zZWQgdG8gYFlgIHdoaWNoIGlzIGxvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIuXG4gKiAgIGBSYCBpcyBzdXBwb3NlZCB0byBiZSB1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYElgIGFuZCBgaWBcbiAqICAgZm9yIHVuaXZlcnNhbCBJU08gd2Vlay1udW1iZXJpbmcgZGF0ZSwgd2hlcmVhc1xuICogICBgWWAgaXMgc3VwcG9zZWQgdG8gYmUgdXNlZCBpbiBjb25qdW5jdGlvbiB3aXRoIGB3YCBhbmQgYGVgXG4gKiAgIGZvciB3ZWVrLW51bWJlcmluZyBkYXRlIHNwZWNpZmljIHRvIHRoZSBsb2NhbGUuXG4gKiAtIGBQYCBpcyBsb25nIGxvY2FsaXplZCBkYXRlIGZvcm1hdFxuICogLSBgcGAgaXMgbG9uZyBsb2NhbGl6ZWQgdGltZSBmb3JtYXRcbiAqL1xuXG52YXIgZm9ybWF0dGVycyA9IHtcbiAgLy8gRXJhXG4gIEc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZXJhID0gZGF0ZS5nZXRVVENGdWxsWWVhcigpID4gMCA/IDEgOiAwO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gQUQsIEJDXG4gICAgICBjYXNlICdHJzpcbiAgICAgIGNhc2UgJ0dHJzpcbiAgICAgIGNhc2UgJ0dHRyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBBLCBCXG5cbiAgICAgIGNhc2UgJ0dHR0dHJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmVyYShlcmEsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdydcbiAgICAgICAgfSk7XG4gICAgICAvLyBBbm5vIERvbWluaSwgQmVmb3JlIENocmlzdFxuXG4gICAgICBjYXNlICdHR0dHJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5lcmEoZXJhLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFllYXJcbiAgeTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIC8vIE9yZGluYWwgbnVtYmVyXG4gICAgaWYgKHRva2VuID09PSAneW8nKSB7XG4gICAgICB2YXIgc2lnbmVkWWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgICAgdmFyIHllYXIgPSBzaWduZWRZZWFyID4gMCA/IHNpZ25lZFllYXIgOiAxIC0gc2lnbmVkWWVhcjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHllYXIsIHtcbiAgICAgICAgdW5pdDogJ3llYXInXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnkoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBMb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFk6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgc2lnbmVkV2Vla1llYXIgPSBnZXRVVENXZWVrWWVhcihkYXRlLCBvcHRpb25zKTsgLy8gUmV0dXJucyAxIGZvciAxIEJDICh3aGljaCBpcyB5ZWFyIDAgaW4gSmF2YVNjcmlwdClcblxuICAgIHZhciB3ZWVrWWVhciA9IHNpZ25lZFdlZWtZZWFyID4gMCA/IHNpZ25lZFdlZWtZZWFyIDogMSAtIHNpZ25lZFdlZWtZZWFyOyAvLyBUd28gZGlnaXQgeWVhclxuXG4gICAgaWYgKHRva2VuID09PSAnWVknKSB7XG4gICAgICB2YXIgdHdvRGlnaXRZZWFyID0gd2Vla1llYXIgJSAxMDA7XG4gICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHR3b0RpZ2l0WWVhciwgMik7XG4gICAgfSAvLyBPcmRpbmFsIG51bWJlclxuXG5cbiAgICBpZiAodG9rZW4gPT09ICdZbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWtZZWFyLCB7XG4gICAgICAgIHVuaXQ6ICd5ZWFyJ1xuICAgICAgfSk7XG4gICAgfSAvLyBQYWRkaW5nXG5cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3Mod2Vla1llYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyXG4gIFI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbikge1xuICAgIHZhciBpc29XZWVrWWVhciA9IGdldFVUQ0lTT1dlZWtZZWFyKGRhdGUpOyAvLyBQYWRkaW5nXG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKGlzb1dlZWtZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBFeHRlbmRlZCB5ZWFyLiBUaGlzIGlzIGEgc2luZ2xlIG51bWJlciBkZXNpZ25hdGluZyB0aGUgeWVhciBvZiB0aGlzIGNhbGVuZGFyIHN5c3RlbS5cbiAgLy8gVGhlIG1haW4gZGlmZmVyZW5jZSBiZXR3ZWVuIGB5YCBhbmQgYHVgIGxvY2FsaXplcnMgYXJlIEIuQy4geWVhcnM6XG4gIC8vIHwgWWVhciB8IGB5YCB8IGB1YCB8XG4gIC8vIHwtLS0tLS18LS0tLS18LS0tLS18XG4gIC8vIHwgQUMgMSB8ICAgMSB8ICAgMSB8XG4gIC8vIHwgQkMgMSB8ICAgMSB8ICAgMCB8XG4gIC8vIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gIC8vIEFsc28gYHl5YCBhbHdheXMgcmV0dXJucyB0aGUgbGFzdCB0d28gZGlnaXRzIG9mIGEgeWVhcixcbiAgLy8gd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkLlxuICB1OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4pIHtcbiAgICB2YXIgeWVhciA9IGRhdGUuZ2V0VVRDRnVsbFllYXIoKTtcbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHllYXIsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIFF1YXJ0ZXJcbiAgUTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBxdWFydGVyID0gTWF0aC5jZWlsKChkYXRlLmdldFVUQ01vbnRoKCkgKyAxKSAvIDMpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgMywgNFxuICAgICAgY2FzZSAnUSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcocXVhcnRlcik7XG4gICAgICAvLyAwMSwgMDIsIDAzLCAwNFxuXG4gICAgICBjYXNlICdRUSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MocXVhcnRlciwgMik7XG4gICAgICAvLyAxc3QsIDJuZCwgM3JkLCA0dGhcblxuICAgICAgY2FzZSAnUW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihxdWFydGVyLCB7XG4gICAgICAgICAgdW5pdDogJ3F1YXJ0ZXInXG4gICAgICAgIH0pO1xuICAgICAgLy8gUTEsIFEyLCBRMywgUTRcblxuICAgICAgY2FzZSAnUVFRJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDEsIDIsIDMsIDQgKG5hcnJvdyBxdWFydGVyOyBjb3VsZCBiZSBub3QgbnVtZXJpY2FsKVxuXG4gICAgICBjYXNlICdRUVFRUSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gMXN0IHF1YXJ0ZXIsIDJuZCBxdWFydGVyLCAuLi5cblxuICAgICAgY2FzZSAnUVFRUSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBxdWFydGVyXG4gIHE6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgcXVhcnRlciA9IE1hdGguY2VpbCgoZGF0ZS5nZXRVVENNb250aCgpICsgMSkgLyAzKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIDEsIDIsIDMsIDRcbiAgICAgIGNhc2UgJ3EnOlxuICAgICAgICByZXR1cm4gU3RyaW5nKHF1YXJ0ZXIpO1xuICAgICAgLy8gMDEsIDAyLCAwMywgMDRcblxuICAgICAgY2FzZSAncXEnOlxuICAgICAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHF1YXJ0ZXIsIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIDNyZCwgNHRoXG5cbiAgICAgIGNhc2UgJ3FvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIocXVhcnRlciwge1xuICAgICAgICAgIHVuaXQ6ICdxdWFydGVyJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFExLCBRMiwgUTMsIFE0XG5cbiAgICAgIGNhc2UgJ3FxcSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5xdWFydGVyKHF1YXJ0ZXIsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyAxLCAyLCAzLCA0IChuYXJyb3cgcXVhcnRlcjsgY291bGQgYmUgbm90IG51bWVyaWNhbClcblxuICAgICAgY2FzZSAncXFxcXEnOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUucXVhcnRlcihxdWFydGVyLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIDFzdCBxdWFydGVyLCAybmQgcXVhcnRlciwgLi4uXG5cbiAgICAgIGNhc2UgJ3FxcXEnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLnF1YXJ0ZXIocXVhcnRlciwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTW9udGhcbiAgTTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBtb250aCA9IGRhdGUuZ2V0VVRDTW9udGgoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ00nOlxuICAgICAgY2FzZSAnTU0nOlxuICAgICAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLk0oZGF0ZSwgdG9rZW4pO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgMTJ0aFxuXG4gICAgICBjYXNlICdNbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKG1vbnRoICsgMSwge1xuICAgICAgICAgIHVuaXQ6ICdtb250aCdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW4sIEZlYiwgLi4uLCBEZWNcblxuICAgICAgY2FzZSAnTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSiwgRiwgLi4uLCBEXG5cbiAgICAgIGNhc2UgJ01NTU1NJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEphbnVhcnksIEZlYnJ1YXJ5LCAuLi4sIERlY2VtYmVyXG5cbiAgICAgIGNhc2UgJ01NTU0nOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm1vbnRoKG1vbnRoLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBTdGFuZC1hbG9uZSBtb250aFxuICBMOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIG1vbnRoID0gZGF0ZS5nZXRVVENNb250aCgpO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMSwgMiwgLi4uLCAxMlxuICAgICAgY2FzZSAnTCc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobW9udGggKyAxKTtcbiAgICAgIC8vIDAxLCAwMiwgLi4uLCAxMlxuXG4gICAgICBjYXNlICdMTCc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobW9udGggKyAxLCAyKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDEydGhcblxuICAgICAgY2FzZSAnTG8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihtb250aCArIDEsIHtcbiAgICAgICAgICB1bml0OiAnbW9udGgnXG4gICAgICAgIH0pO1xuICAgICAgLy8gSmFuLCBGZWIsIC4uLiwgRGVjXG5cbiAgICAgIGNhc2UgJ0xMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIEosIEYsIC4uLiwgRFxuXG4gICAgICBjYXNlICdMTExMTCc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgICAvLyBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlclxuXG4gICAgICBjYXNlICdMTExMJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5tb250aChtb250aCwge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gTG9jYWwgd2VlayBvZiB5ZWFyXG4gIHc6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgd2VlayA9IGdldFVUQ1dlZWsoZGF0ZSwgb3B0aW9ucyk7XG5cbiAgICBpZiAodG9rZW4gPT09ICd3bycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKHdlZWssIHtcbiAgICAgICAgdW5pdDogJ3dlZWsnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gYWRkTGVhZGluZ1plcm9zKHdlZWssIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIElTTyB3ZWVrIG9mIHllYXJcbiAgSTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBpc29XZWVrID0gZ2V0VVRDSVNPV2VlayhkYXRlKTtcblxuICAgIGlmICh0b2tlbiA9PT0gJ0lvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoaXNvV2Vlaywge1xuICAgICAgICB1bml0OiAnd2VlaydcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaXNvV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgfSxcbiAgLy8gRGF5IG9mIHRoZSBtb250aFxuICBkOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnZG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ0RhdGUoKSwge1xuICAgICAgICB1bml0OiAnZGF0ZSdcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBsaWdodEZvcm1hdHRlcnMuZChkYXRlLCB0b2tlbik7XG4gIH0sXG4gIC8vIERheSBvZiB5ZWFyXG4gIEQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgZGF5T2ZZZWFyID0gZ2V0VVRDRGF5T2ZZZWFyKGRhdGUpO1xuXG4gICAgaWYgKHRva2VuID09PSAnRG8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXlPZlllYXIsIHtcbiAgICAgICAgdW5pdDogJ2RheU9mWWVhcidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoZGF5T2ZZZWFyLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBEYXkgb2Ygd2Vla1xuICBFOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgdmFyIGRheU9mV2VlayA9IGRhdGUuZ2V0VVRDRGF5KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBUdWVcbiAgICAgIGNhc2UgJ0UnOlxuICAgICAgY2FzZSAnRUUnOlxuICAgICAgY2FzZSAnRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ0VFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnRUVFRUVFJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ0VFRUUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIExvY2FsIGRheSBvZiB3ZWVrXG4gIGU6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoTnRoIGRheSBvZiB3ZWVrIHdpdGggY3VycmVudCBsb2NhbGUgb3Igd2Vla1N0YXJ0c09uKVxuICAgICAgY2FzZSAnZSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcobG9jYWxEYXlPZldlZWspO1xuICAgICAgLy8gUGFkZGVkIG51bWVyaWNhbCB2YWx1ZVxuXG4gICAgICBjYXNlICdlZSc6XG4gICAgICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MobG9jYWxEYXlPZldlZWssIDIpO1xuICAgICAgLy8gMXN0LCAybmQsIC4uLiwgN3RoXG5cbiAgICAgIGNhc2UgJ2VvJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIobG9jYWxEYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcblxuICAgICAgY2FzZSAnZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUXG5cbiAgICAgIGNhc2UgJ2VlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVcblxuICAgICAgY2FzZSAnZWVlZWVlJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3Nob3J0JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdWVzZGF5XG5cbiAgICAgIGNhc2UgJ2VlZWUnOlxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheShkYXlPZldlZWssIHtcbiAgICAgICAgICB3aWR0aDogJ3dpZGUnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICB9XG4gIH0sXG4gIC8vIFN0YW5kLWFsb25lIGxvY2FsIGRheSBvZiB3ZWVrXG4gIGM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgZGF5T2ZXZWVrID0gZGF0ZS5nZXRVVENEYXkoKTtcbiAgICB2YXIgbG9jYWxEYXlPZldlZWsgPSAoZGF5T2ZXZWVrIC0gb3B0aW9ucy53ZWVrU3RhcnRzT24gKyA4KSAlIDcgfHwgNztcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIE51bWVyaWNhbCB2YWx1ZSAoc2FtZSBhcyBpbiBgZWApXG4gICAgICBjYXNlICdjJzpcbiAgICAgICAgcmV0dXJuIFN0cmluZyhsb2NhbERheU9mV2Vlayk7XG4gICAgICAvLyBQYWRkZWQgbnVtZXJpY2FsIHZhbHVlXG5cbiAgICAgIGNhc2UgJ2NjJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhsb2NhbERheU9mV2VlaywgdG9rZW4ubGVuZ3RoKTtcbiAgICAgIC8vIDFzdCwgMm5kLCAuLi4sIDd0aFxuXG4gICAgICBjYXNlICdjbyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGxvY2FsRGF5T2ZXZWVrLCB7XG4gICAgICAgICAgdW5pdDogJ2RheSdcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVFxuXG4gICAgICBjYXNlICdjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICduYXJyb3cnLFxuICAgICAgICAgIGNvbnRleHQ6ICdzdGFuZGFsb25lJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1XG5cbiAgICAgIGNhc2UgJ2NjY2NjYyc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICdzaG9ydCcsXG4gICAgICAgICAgY29udGV4dDogJ3N0YW5kYWxvbmUnXG4gICAgICAgIH0pO1xuICAgICAgLy8gVHVlc2RheVxuXG4gICAgICBjYXNlICdjY2NjJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXkoZGF5T2ZXZWVrLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnc3RhbmRhbG9uZSdcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBJU08gZGF5IG9mIHdlZWtcbiAgaTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBkYXlPZldlZWsgPSBkYXRlLmdldFVUQ0RheSgpO1xuICAgIHZhciBpc29EYXlPZldlZWsgPSBkYXlPZldlZWsgPT09IDAgPyA3IDogZGF5T2ZXZWVrO1xuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gMlxuICAgICAgY2FzZSAnaSc6XG4gICAgICAgIHJldHVybiBTdHJpbmcoaXNvRGF5T2ZXZWVrKTtcbiAgICAgIC8vIDAyXG5cbiAgICAgIGNhc2UgJ2lpJzpcbiAgICAgICAgcmV0dXJuIGFkZExlYWRpbmdaZXJvcyhpc29EYXlPZldlZWssIHRva2VuLmxlbmd0aCk7XG4gICAgICAvLyAybmRcblxuICAgICAgY2FzZSAnaW8nOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihpc29EYXlPZldlZWssIHtcbiAgICAgICAgICB1bml0OiAnZGF5J1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZVxuXG4gICAgICBjYXNlICdpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnYWJicmV2aWF0ZWQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFRcblxuICAgICAgY2FzZSAnaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnbmFycm93JyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgICAvLyBUdVxuXG4gICAgICBjYXNlICdpaWlpaWknOlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnc2hvcnQnLFxuICAgICAgICAgIGNvbnRleHQ6ICdmb3JtYXR0aW5nJ1xuICAgICAgICB9KTtcbiAgICAgIC8vIFR1ZXNkYXlcblxuICAgICAgY2FzZSAnaWlpaSc6XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gbG9jYWxpemUuZGF5KGRheU9mV2Vlaywge1xuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuICAgIH1cbiAgfSxcbiAgLy8gQU0gb3IgUE1cbiAgYTogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKTtcbiAgICB2YXIgZGF5UGVyaW9kRW51bVZhbHVlID0gaG91cnMgLyAxMiA+PSAxID8gJ3BtJyA6ICdhbSc7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdhJzpcbiAgICAgIGNhc2UgJ2FhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2FhYSc6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2FhYWFhJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdhYWFhJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBBTSwgUE0sIG1pZG5pZ2h0LCBub29uXG4gIGI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA9PT0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0ubm9vbjtcbiAgICB9IGVsc2UgaWYgKGhvdXJzID09PSAwKSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm1pZG5pZ2h0O1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBob3VycyAvIDEyID49IDEgPyAncG0nIDogJ2FtJztcbiAgICB9XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICBjYXNlICdiJzpcbiAgICAgIGNhc2UgJ2JiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ2JiYic6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICdhYmJyZXZpYXRlZCcsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pLnRvTG93ZXJDYXNlKCk7XG5cbiAgICAgIGNhc2UgJ2JiYmJiJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdiYmJiJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBpbiB0aGUgbW9ybmluZywgaW4gdGhlIGFmdGVybm9vbiwgaW4gdGhlIGV2ZW5pbmcsIGF0IG5pZ2h0XG4gIEI6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgdmFyIGRheVBlcmlvZEVudW1WYWx1ZTtcblxuICAgIGlmIChob3VycyA+PSAxNykge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5ldmVuaW5nO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gMTIpIHtcbiAgICAgIGRheVBlcmlvZEVudW1WYWx1ZSA9IGRheVBlcmlvZEVudW0uYWZ0ZXJub29uO1xuICAgIH0gZWxzZSBpZiAoaG91cnMgPj0gNCkge1xuICAgICAgZGF5UGVyaW9kRW51bVZhbHVlID0gZGF5UGVyaW9kRW51bS5tb3JuaW5nO1xuICAgIH0gZWxzZSB7XG4gICAgICBkYXlQZXJpb2RFbnVtVmFsdWUgPSBkYXlQZXJpb2RFbnVtLm5pZ2h0O1xuICAgIH1cblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIGNhc2UgJ0InOlxuICAgICAgY2FzZSAnQkInOlxuICAgICAgY2FzZSAnQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ2FiYnJldmlhdGVkJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG5cbiAgICAgIGNhc2UgJ0JCQkJCJzpcbiAgICAgICAgcmV0dXJuIGxvY2FsaXplLmRheVBlcmlvZChkYXlQZXJpb2RFbnVtVmFsdWUsIHtcbiAgICAgICAgICB3aWR0aDogJ25hcnJvdycsXG4gICAgICAgICAgY29udGV4dDogJ2Zvcm1hdHRpbmcnXG4gICAgICAgIH0pO1xuXG4gICAgICBjYXNlICdCQkJCJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBsb2NhbGl6ZS5kYXlQZXJpb2QoZGF5UGVyaW9kRW51bVZhbHVlLCB7XG4gICAgICAgICAgd2lkdGg6ICd3aWRlJyxcbiAgICAgICAgICBjb250ZXh0OiAnZm9ybWF0dGluZydcbiAgICAgICAgfSk7XG4gICAgfVxuICB9LFxuICAvLyBIb3VyIFsxLTEyXVxuICBoOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnaG8nKSB7XG4gICAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCkgJSAxMjtcbiAgICAgIGlmIChob3VycyA9PT0gMCkgaG91cnMgPSAxMjtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGhvdXJzLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5oKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0yM11cbiAgSDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIGlmICh0b2tlbiA9PT0gJ0hvJykge1xuICAgICAgcmV0dXJuIGxvY2FsaXplLm9yZGluYWxOdW1iZXIoZGF0ZS5nZXRVVENIb3VycygpLCB7XG4gICAgICAgIHVuaXQ6ICdob3VyJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5IKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gSG91ciBbMC0xMV1cbiAgSzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBsb2NhbGl6ZSkge1xuICAgIHZhciBob3VycyA9IGRhdGUuZ2V0VVRDSG91cnMoKSAlIDEyO1xuXG4gICAgaWYgKHRva2VuID09PSAnS28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIEhvdXIgWzEtMjRdXG4gIGs6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICB2YXIgaG91cnMgPSBkYXRlLmdldFVUQ0hvdXJzKCk7XG4gICAgaWYgKGhvdXJzID09PSAwKSBob3VycyA9IDI0O1xuXG4gICAgaWYgKHRva2VuID09PSAna28nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihob3Vycywge1xuICAgICAgICB1bml0OiAnaG91cidcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3MoaG91cnMsIHRva2VuLmxlbmd0aCk7XG4gIH0sXG4gIC8vIE1pbnV0ZVxuICBtOiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIGxvY2FsaXplKSB7XG4gICAgaWYgKHRva2VuID09PSAnbW8nKSB7XG4gICAgICByZXR1cm4gbG9jYWxpemUub3JkaW5hbE51bWJlcihkYXRlLmdldFVUQ01pbnV0ZXMoKSwge1xuICAgICAgICB1bml0OiAnbWludXRlJ1xuICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5tKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gU2Vjb25kXG4gIHM6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgbG9jYWxpemUpIHtcbiAgICBpZiAodG9rZW4gPT09ICdzbycpIHtcbiAgICAgIHJldHVybiBsb2NhbGl6ZS5vcmRpbmFsTnVtYmVyKGRhdGUuZ2V0VVRDU2Vjb25kcygpLCB7XG4gICAgICAgIHVuaXQ6ICdzZWNvbmQnXG4gICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gbGlnaHRGb3JtYXR0ZXJzLnMoZGF0ZSwgdG9rZW4pO1xuICB9LFxuICAvLyBGcmFjdGlvbiBvZiBzZWNvbmRcbiAgUzogZnVuY3Rpb24gKGRhdGUsIHRva2VuKSB7XG4gICAgcmV0dXJuIGxpZ2h0Rm9ybWF0dGVycy5TKGRhdGUsIHRva2VuKTtcbiAgfSxcbiAgLy8gVGltZXpvbmUgKElTTy04NjAxLiBJZiBvZmZzZXQgaXMgMCwgb3V0cHV0IGlzIGFsd2F5cyBgJ1onYClcbiAgWDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBpZiAodGltZXpvbmVPZmZzZXQgPT09IDApIHtcbiAgICAgIHJldHVybiAnWic7XG4gICAgfVxuXG4gICAgc3dpdGNoICh0b2tlbikge1xuICAgICAgLy8gSG91cnMgYW5kIG9wdGlvbmFsIG1pbnV0ZXNcbiAgICAgIGNhc2UgJ1gnOlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKHRpbWV6b25lT2Zmc2V0KTtcbiAgICAgIC8vIEhvdXJzLCBtaW51dGVzIGFuZCBvcHRpb25hbCBzZWNvbmRzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgLy8gTm90ZTogbmVpdGhlciBJU08tODYwMSBub3IgSmF2YVNjcmlwdCBzdXBwb3J0cyBzZWNvbmRzIGluIHRpbWV6b25lIG9mZnNldHNcbiAgICAgIC8vIHNvIHRoaXMgdG9rZW4gYWx3YXlzIGhhcyB0aGUgc2FtZSBvdXRwdXQgYXMgYFhYYFxuXG4gICAgICBjYXNlICdYWFhYJzpcbiAgICAgIGNhc2UgJ1hYJzpcbiAgICAgICAgLy8gSG91cnMgYW5kIG1pbnV0ZXMgd2l0aG91dCBgOmAgZGVsaW1pdGVyXG4gICAgICAgIHJldHVybiBmb3JtYXRUaW1lem9uZSh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRoIGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGBYWFhgXG5cbiAgICAgIGNhc2UgJ1hYWFhYJzpcbiAgICAgIGNhc2UgJ1hYWCc6IC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGggYDpgIGRlbGltaXRlclxuXG4gICAgICBkZWZhdWx0OlxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQsICc6Jyk7XG4gICAgfVxuICB9LFxuICAvLyBUaW1lem9uZSAoSVNPLTg2MDEuIElmIG9mZnNldCBpcyAwLCBvdXRwdXQgaXMgYCcrMDA6MDAnYCBvciBlcXVpdmFsZW50KVxuICB4OiBmdW5jdGlvbiAoZGF0ZSwgdG9rZW4sIF9sb2NhbGl6ZSwgb3B0aW9ucykge1xuICAgIHZhciBvcmlnaW5hbERhdGUgPSBvcHRpb25zLl9vcmlnaW5hbERhdGUgfHwgZGF0ZTtcbiAgICB2YXIgdGltZXpvbmVPZmZzZXQgPSBvcmlnaW5hbERhdGUuZ2V0VGltZXpvbmVPZmZzZXQoKTtcblxuICAgIHN3aXRjaCAodG9rZW4pIHtcbiAgICAgIC8vIEhvdXJzIGFuZCBvcHRpb25hbCBtaW51dGVzXG4gICAgICBjYXNlICd4JzpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyh0aW1lem9uZU9mZnNldCk7XG4gICAgICAvLyBIb3VycywgbWludXRlcyBhbmQgb3B0aW9uYWwgc2Vjb25kcyB3aXRob3V0IGA6YCBkZWxpbWl0ZXJcbiAgICAgIC8vIE5vdGU6IG5laXRoZXIgSVNPLTg2MDEgbm9yIEphdmFTY3JpcHQgc3VwcG9ydHMgc2Vjb25kcyBpbiB0aW1lem9uZSBvZmZzZXRzXG4gICAgICAvLyBzbyB0aGlzIHRva2VuIGFsd2F5cyBoYXMgdGhlIHNhbWUgb3V0cHV0IGFzIGB4eGBcblxuICAgICAgY2FzZSAneHh4eCc6XG4gICAgICBjYXNlICd4eCc6XG4gICAgICAgIC8vIEhvdXJzIGFuZCBtaW51dGVzIHdpdGhvdXQgYDpgIGRlbGltaXRlclxuICAgICAgICByZXR1cm4gZm9ybWF0VGltZXpvbmUodGltZXpvbmVPZmZzZXQpO1xuICAgICAgLy8gSG91cnMsIG1pbnV0ZXMgYW5kIG9wdGlvbmFsIHNlY29uZHMgd2l0aCBgOmAgZGVsaW1pdGVyXG4gICAgICAvLyBOb3RlOiBuZWl0aGVyIElTTy04NjAxIG5vciBKYXZhU2NyaXB0IHN1cHBvcnRzIHNlY29uZHMgaW4gdGltZXpvbmUgb2Zmc2V0c1xuICAgICAgLy8gc28gdGhpcyB0b2tlbiBhbHdheXMgaGFzIHRoZSBzYW1lIG91dHB1dCBhcyBgeHh4YFxuXG4gICAgICBjYXNlICd4eHh4eCc6XG4gICAgICBjYXNlICd4eHgnOiAvLyBIb3VycyBhbmQgbWludXRlcyB3aXRoIGA6YCBkZWxpbWl0ZXJcblxuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKEdNVClcbiAgTzogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAnTyc6XG4gICAgICBjYXNlICdPTyc6XG4gICAgICBjYXNlICdPT08nOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICdPT09PJzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gVGltZXpvbmUgKHNwZWNpZmljIG5vbi1sb2NhdGlvbilcbiAgejogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gb3JpZ2luYWxEYXRlLmdldFRpbWV6b25lT2Zmc2V0KCk7XG5cbiAgICBzd2l0Y2ggKHRva2VuKSB7XG4gICAgICAvLyBTaG9ydFxuICAgICAgY2FzZSAneic6XG4gICAgICBjYXNlICd6eic6XG4gICAgICBjYXNlICd6enonOlxuICAgICAgICByZXR1cm4gJ0dNVCcgKyBmb3JtYXRUaW1lem9uZVNob3J0KHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgICAgLy8gTG9uZ1xuXG4gICAgICBjYXNlICd6enp6JzpcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiAnR01UJyArIGZvcm1hdFRpbWV6b25lKHRpbWV6b25lT2Zmc2V0LCAnOicpO1xuICAgIH1cbiAgfSxcbiAgLy8gU2Vjb25kcyB0aW1lc3RhbXBcbiAgdDogZnVuY3Rpb24gKGRhdGUsIHRva2VuLCBfbG9jYWxpemUsIG9wdGlvbnMpIHtcbiAgICB2YXIgb3JpZ2luYWxEYXRlID0gb3B0aW9ucy5fb3JpZ2luYWxEYXRlIHx8IGRhdGU7XG4gICAgdmFyIHRpbWVzdGFtcCA9IE1hdGguZmxvb3Iob3JpZ2luYWxEYXRlLmdldFRpbWUoKSAvIDEwMDApO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9LFxuICAvLyBNaWxsaXNlY29uZHMgdGltZXN0YW1wXG4gIFQ6IGZ1bmN0aW9uIChkYXRlLCB0b2tlbiwgX2xvY2FsaXplLCBvcHRpb25zKSB7XG4gICAgdmFyIG9yaWdpbmFsRGF0ZSA9IG9wdGlvbnMuX29yaWdpbmFsRGF0ZSB8fCBkYXRlO1xuICAgIHZhciB0aW1lc3RhbXAgPSBvcmlnaW5hbERhdGUuZ2V0VGltZSgpO1xuICAgIHJldHVybiBhZGRMZWFkaW5nWmVyb3ModGltZXN0YW1wLCB0b2tlbi5sZW5ndGgpO1xuICB9XG59O1xuXG5mdW5jdGlvbiBmb3JtYXRUaW1lem9uZVNob3J0KG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICB2YXIgYWJzT2Zmc2V0ID0gTWF0aC5hYnMob2Zmc2V0KTtcbiAgdmFyIGhvdXJzID0gTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCk7XG4gIHZhciBtaW51dGVzID0gYWJzT2Zmc2V0ICUgNjA7XG5cbiAgaWYgKG1pbnV0ZXMgPT09IDApIHtcbiAgICByZXR1cm4gc2lnbiArIFN0cmluZyhob3Vycyk7XG4gIH1cblxuICB2YXIgZGVsaW1pdGVyID0gZGlydHlEZWxpbWl0ZXIgfHwgJyc7XG4gIHJldHVybiBzaWduICsgU3RyaW5nKGhvdXJzKSArIGRlbGltaXRlciArIGFkZExlYWRpbmdaZXJvcyhtaW51dGVzLCAyKTtcbn1cblxuZnVuY3Rpb24gZm9ybWF0VGltZXpvbmVXaXRoT3B0aW9uYWxNaW51dGVzKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgaWYgKG9mZnNldCAlIDYwID09PSAwKSB7XG4gICAgdmFyIHNpZ24gPSBvZmZzZXQgPiAwID8gJy0nIDogJysnO1xuICAgIHJldHVybiBzaWduICsgYWRkTGVhZGluZ1plcm9zKE1hdGguYWJzKG9mZnNldCkgLyA2MCwgMik7XG4gIH1cblxuICByZXR1cm4gZm9ybWF0VGltZXpvbmUob2Zmc2V0LCBkaXJ0eURlbGltaXRlcik7XG59XG5cbmZ1bmN0aW9uIGZvcm1hdFRpbWV6b25lKG9mZnNldCwgZGlydHlEZWxpbWl0ZXIpIHtcbiAgdmFyIGRlbGltaXRlciA9IGRpcnR5RGVsaW1pdGVyIHx8ICcnO1xuICB2YXIgc2lnbiA9IG9mZnNldCA+IDAgPyAnLScgOiAnKyc7XG4gIHZhciBhYnNPZmZzZXQgPSBNYXRoLmFicyhvZmZzZXQpO1xuICB2YXIgaG91cnMgPSBhZGRMZWFkaW5nWmVyb3MoTWF0aC5mbG9vcihhYnNPZmZzZXQgLyA2MCksIDIpO1xuICB2YXIgbWludXRlcyA9IGFkZExlYWRpbmdaZXJvcyhhYnNPZmZzZXQgJSA2MCwgMik7XG4gIHJldHVybiBzaWduICsgaG91cnMgKyBkZWxpbWl0ZXIgKyBtaW51dGVzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmb3JtYXR0ZXJzOyIsImZ1bmN0aW9uIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgc3dpdGNoIChwYXR0ZXJuKSB7XG4gICAgY2FzZSAnUCc6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy5kYXRlKHtcbiAgICAgICAgd2lkdGg6ICdzaG9ydCdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbWVkaXVtJ1xuICAgICAgfSk7XG5cbiAgICBjYXNlICdQUFAnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcuZGF0ZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAnUFBQUCc6XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLmRhdGUoe1xuICAgICAgICB3aWR0aDogJ2Z1bGwnXG4gICAgICB9KTtcbiAgfVxufVxuXG5mdW5jdGlvbiB0aW1lTG9uZ0Zvcm1hdHRlcihwYXR0ZXJuLCBmb3JtYXRMb25nKSB7XG4gIHN3aXRjaCAocGF0dGVybikge1xuICAgIGNhc2UgJ3AnOlxuICAgICAgcmV0dXJuIGZvcm1hdExvbmcudGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ21lZGl1bSdcbiAgICAgIH0pO1xuXG4gICAgY2FzZSAncHBwJzpcbiAgICAgIHJldHVybiBmb3JtYXRMb25nLnRpbWUoe1xuICAgICAgICB3aWR0aDogJ2xvbmcnXG4gICAgICB9KTtcblxuICAgIGNhc2UgJ3BwcHAnOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZm9ybWF0TG9uZy50aW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZGF0ZVRpbWVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpIHtcbiAgdmFyIG1hdGNoUmVzdWx0ID0gcGF0dGVybi5tYXRjaCgvKFArKShwKyk/Lyk7XG4gIHZhciBkYXRlUGF0dGVybiA9IG1hdGNoUmVzdWx0WzFdO1xuICB2YXIgdGltZVBhdHRlcm4gPSBtYXRjaFJlc3VsdFsyXTtcblxuICBpZiAoIXRpbWVQYXR0ZXJuKSB7XG4gICAgcmV0dXJuIGRhdGVMb25nRm9ybWF0dGVyKHBhdHRlcm4sIGZvcm1hdExvbmcpO1xuICB9XG5cbiAgdmFyIGRhdGVUaW1lRm9ybWF0O1xuXG4gIHN3aXRjaCAoZGF0ZVBhdHRlcm4pIHtcbiAgICBjYXNlICdQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnc2hvcnQnXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFAnOlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdtZWRpdW0nXG4gICAgICB9KTtcbiAgICAgIGJyZWFrO1xuXG4gICAgY2FzZSAnUFBQJzpcbiAgICAgIGRhdGVUaW1lRm9ybWF0ID0gZm9ybWF0TG9uZy5kYXRlVGltZSh7XG4gICAgICAgIHdpZHRoOiAnbG9uZydcbiAgICAgIH0pO1xuICAgICAgYnJlYWs7XG5cbiAgICBjYXNlICdQUFBQJzpcbiAgICBkZWZhdWx0OlxuICAgICAgZGF0ZVRpbWVGb3JtYXQgPSBmb3JtYXRMb25nLmRhdGVUaW1lKHtcbiAgICAgICAgd2lkdGg6ICdmdWxsJ1xuICAgICAgfSk7XG4gICAgICBicmVhaztcbiAgfVxuXG4gIHJldHVybiBkYXRlVGltZUZvcm1hdC5yZXBsYWNlKCd7e2RhdGV9fScsIGRhdGVMb25nRm9ybWF0dGVyKGRhdGVQYXR0ZXJuLCBmb3JtYXRMb25nKSkucmVwbGFjZSgne3t0aW1lfX0nLCB0aW1lTG9uZ0Zvcm1hdHRlcih0aW1lUGF0dGVybiwgZm9ybWF0TG9uZykpO1xufVxuXG52YXIgbG9uZ0Zvcm1hdHRlcnMgPSB7XG4gIHA6IHRpbWVMb25nRm9ybWF0dGVyLFxuICBQOiBkYXRlVGltZUxvbmdGb3JtYXR0ZXJcbn07XG5leHBvcnQgZGVmYXVsdCBsb25nRm9ybWF0dGVyczsiLCJ2YXIgcHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW5zID0gWydEJywgJ0REJ107XG52YXIgcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMgPSBbJ1lZJywgJ1lZWVknXTtcbmV4cG9ydCBmdW5jdGlvbiBpc1Byb3RlY3RlZERheU9mWWVhclRva2VuKHRva2VuKSB7XG4gIHJldHVybiBwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbih0b2tlbikge1xuICByZXR1cm4gcHJvdGVjdGVkV2Vla1llYXJUb2tlbnMuaW5kZXhPZih0b2tlbikgIT09IC0xO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHRocm93UHJvdGVjdGVkRXJyb3IodG9rZW4sIGZvcm1hdCwgaW5wdXQpIHtcbiAgaWYgKHRva2VuID09PSAnWVlZWScpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcihcIlVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIHllYXJzIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfSBlbHNlIGlmICh0b2tlbiA9PT0gJ1lZJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGB5eWAgaW5zdGVhZCBvZiBgWVlgIChpbiBgXCIuY29uY2F0KGZvcm1hdCwgXCJgKSBmb3IgZm9ybWF0dGluZyB5ZWFycyB0byB0aGUgaW5wdXQgYFwiKS5jb25jYXQoaW5wdXQsIFwiYDsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clwiKSk7XG4gIH0gZWxzZSBpZiAodG9rZW4gPT09ICdEJykge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKFwiVXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCAoaW4gYFwiLmNvbmNhdChmb3JtYXQsIFwiYCkgZm9yIGZvcm1hdHRpbmcgZGF5cyBvZiB0aGUgbW9udGggdG8gdGhlIGlucHV0IGBcIikuY29uY2F0KGlucHV0LCBcImA7IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcIikpO1xuICB9IGVsc2UgaWYgKHRva2VuID09PSAnREQnKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoXCJVc2UgYGRkYCBpbnN0ZWFkIG9mIGBERGAgKGluIGBcIi5jb25jYXQoZm9ybWF0LCBcImApIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHRvIHRoZSBpbnB1dCBgXCIpLmNvbmNhdChpbnB1dCwgXCJgOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXCIpKTtcbiAgfVxufSIsImltcG9ydCBpc1ZhbGlkIGZyb20gXCIuLi9pc1ZhbGlkL2luZGV4LmpzXCI7XG5pbXBvcnQgZGVmYXVsdExvY2FsZSBmcm9tIFwiLi4vbG9jYWxlL2VuLVVTL2luZGV4LmpzXCI7XG5pbXBvcnQgc3ViTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9zdWJNaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB0b0RhdGUgZnJvbSBcIi4uL3RvRGF0ZS9pbmRleC5qc1wiO1xuaW1wb3J0IGZvcm1hdHRlcnMgZnJvbSBcIi4uL19saWIvZm9ybWF0L2Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBsb25nRm9ybWF0dGVycyBmcm9tIFwiLi4vX2xpYi9mb3JtYXQvbG9uZ0Zvcm1hdHRlcnMvaW5kZXguanNcIjtcbmltcG9ydCBnZXRUaW1lem9uZU9mZnNldEluTWlsbGlzZWNvbmRzIGZyb20gXCIuLi9fbGliL2dldFRpbWV6b25lT2Zmc2V0SW5NaWxsaXNlY29uZHMvaW5kZXguanNcIjtcbmltcG9ydCB7IGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4sIGlzUHJvdGVjdGVkV2Vla1llYXJUb2tlbiwgdGhyb3dQcm90ZWN0ZWRFcnJvciB9IGZyb20gXCIuLi9fbGliL3Byb3RlY3RlZFRva2Vucy9pbmRleC5qc1wiO1xuaW1wb3J0IHRvSW50ZWdlciBmcm9tIFwiLi4vX2xpYi90b0ludGVnZXIvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7IC8vIFRoaXMgUmVnRXhwIGNvbnNpc3RzIG9mIHRocmVlIHBhcnRzIHNlcGFyYXRlZCBieSBgfGA6XG4vLyAtIFt5WVFxTUx3SWREZWNpaEhLa21zXW8gbWF0Y2hlcyBhbnkgYXZhaWxhYmxlIG9yZGluYWwgbnVtYmVyIHRva2VuXG4vLyAgIChvbmUgb2YgdGhlIGNlcnRhaW4gbGV0dGVycyBmb2xsb3dlZCBieSBgb2ApXG4vLyAtIChcXHcpXFwxKiBtYXRjaGVzIGFueSBzZXF1ZW5jZXMgb2YgdGhlIHNhbWUgbGV0dGVyXG4vLyAtICcnIG1hdGNoZXMgdHdvIHF1b3RlIGNoYXJhY3RlcnMgaW4gYSByb3dcbi8vIC0gJygnJ3xbXiddKSsoJ3wkKSBtYXRjaGVzIGFueXRoaW5nIHN1cnJvdW5kZWQgYnkgdHdvIHF1b3RlIGNoYXJhY3RlcnMgKCcpLFxuLy8gICBleGNlcHQgYSBzaW5nbGUgcXVvdGUgc3ltYm9sLCB3aGljaCBlbmRzIHRoZSBzZXF1ZW5jZS5cbi8vICAgVHdvIHF1b3RlIGNoYXJhY3RlcnMgZG8gbm90IGVuZCB0aGUgc2VxdWVuY2UuXG4vLyAgIElmIHRoZXJlIGlzIG5vIG1hdGNoaW5nIHNpbmdsZSBxdW90ZVxuLy8gICB0aGVuIHRoZSBzZXF1ZW5jZSB3aWxsIGNvbnRpbnVlIHVudGlsIHRoZSBlbmQgb2YgdGhlIHN0cmluZy5cbi8vIC0gLiBtYXRjaGVzIGFueSBzaW5nbGUgY2hhcmFjdGVyIHVubWF0Y2hlZCBieSBwcmV2aW91cyBwYXJ0cyBvZiB0aGUgUmVnRXhwc1xuXG52YXIgZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCA9IC9beVlRcU1Md0lkRGVjaWhIS2ttc11vfChcXHcpXFwxKnwnJ3wnKCcnfFteJ10pKygnfCQpfC4vZzsgLy8gVGhpcyBSZWdFeHAgY2F0Y2hlcyBzeW1ib2xzIGVzY2FwZWQgYnkgcXVvdGVzLCBhbmQgYWxzb1xuLy8gc2VxdWVuY2VzIG9mIHN5bWJvbHMgUCwgcCwgYW5kIHRoZSBjb21iaW5hdGlvbnMgbGlrZSBgUFBQUFBQUHBwcHBwYFxuXG52YXIgbG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHAgPSAvUCtwK3xQK3xwK3wnJ3wnKCcnfFteJ10pKygnfCQpfC4vZztcbnZhciBlc2NhcGVkU3RyaW5nUmVnRXhwID0gL14nKFteXSo/KSc/JC87XG52YXIgZG91YmxlUXVvdGVSZWdFeHAgPSAvJycvZztcbnZhciB1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCA9IC9bYS16QS1aXS87XG4vKipcbiAqIEBuYW1lIGZvcm1hdFxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBGb3JtYXQgdGhlIGRhdGUuXG4gKlxuICogQGRlc2NyaXB0aW9uXG4gKiBSZXR1cm4gdGhlIGZvcm1hdHRlZCBkYXRlIHN0cmluZyBpbiB0aGUgZ2l2ZW4gZm9ybWF0LiBUaGUgcmVzdWx0IG1heSB2YXJ5IGJ5IGxvY2FsZS5cbiAqXG4gKiA+IOKaoO+4jyBQbGVhc2Ugbm90ZSB0aGF0IHRoZSBgZm9ybWF0YCB0b2tlbnMgZGlmZmVyIGZyb20gTW9tZW50LmpzIGFuZCBvdGhlciBsaWJyYXJpZXMuXG4gKiA+IFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiBUaGUgY2hhcmFjdGVycyB3cmFwcGVkIGJldHdlZW4gdHdvIHNpbmdsZSBxdW90ZXMgY2hhcmFjdGVycyAoJykgYXJlIGVzY2FwZWQuXG4gKiBUd28gc2luZ2xlIHF1b3RlcyBpbiBhIHJvdywgd2hldGhlciBpbnNpZGUgb3Igb3V0c2lkZSBhIHF1b3RlZCBzZXF1ZW5jZSwgcmVwcmVzZW50IGEgJ3JlYWwnIHNpbmdsZSBxdW90ZS5cbiAqIChzZWUgdGhlIGxhc3QgZXhhbXBsZSlcbiAqXG4gKiBGb3JtYXQgb2YgdGhlIHN0cmluZyBpcyBiYXNlZCBvbiBVbmljb2RlIFRlY2huaWNhbCBTdGFuZGFyZCAjMzU6XG4gKiBodHRwczovL3d3dy51bmljb2RlLm9yZy9yZXBvcnRzL3RyMzUvdHIzNS1kYXRlcy5odG1sI0RhdGVfRmllbGRfU3ltYm9sX1RhYmxlXG4gKiB3aXRoIGEgZmV3IGFkZGl0aW9ucyAoc2VlIG5vdGUgNyBiZWxvdyB0aGUgdGFibGUpLlxuICpcbiAqIEFjY2VwdGVkIHBhdHRlcm5zOlxuICogfCBVbml0ICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUGF0dGVybiB8IFJlc3VsdCBleGFtcGxlcyAgICAgICAgICAgICAgICAgICB8IE5vdGVzIHxcbiAqIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS18LS0tLS0tLS0tfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tfC0tLS0tLS18XG4gKiB8IEVyYSAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBHLi5HR0cgIHwgQUQsIEJDICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgR0dHRyAgICB8IEFubm8gRG9taW5pLCBCZWZvcmUgQ2hyaXN0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEdHR0dHICAgfCBBLCBCICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IENhbGVuZGFyIHllYXIgICAgICAgICAgICAgICAgICAgfCB5ICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeW8gICAgICB8IDQ0dGgsIDFzdCwgMHRoLCAxN3RoICAgICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5ICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB5eXkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeXl5eSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHl5eXl5ICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IExvY2FsIHdlZWstbnVtYmVyaW5nIHllYXIgICAgICAgfCBZICAgICAgIHwgNDQsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWW8gICAgICB8IDQ0dGgsIDFzdCwgMTkwMHRoLCAyMDE3dGggICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZICAgICAgfCA0NCwgMDEsIDAwLCAxNyAgICAgICAgICAgICAgICAgICAgfCA1LDggICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBZWVkgICAgIHwgMDQ0LCAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWVlZWSAgICB8IDAwNDQsIDAwMDEsIDE5MDAsIDIwMTcgICAgICAgICAgICB8IDUsOCAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFlZWVlZICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzLDUgICB8XG4gKiB8IElTTyB3ZWVrLW51bWJlcmluZyB5ZWFyICAgICAgICAgfCBSICAgICAgIHwgLTQzLCAwLCAxLCAxOTAwLCAyMDE3ICAgICAgICAgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlIgICAgICB8IC00MywgMDAsIDAxLCAxOTAwLCAyMDE3ICAgICAgICAgICB8IDUsNyAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFJSUiAgICAgfCAtMDQzLCAwMDAsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgfCA1LDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBSUlJSICAgIHwgLTAwNDMsIDAwMDAsIDAwMDEsIDE5MDAsIDIwMTcgICAgIHwgNSw3ICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUlJSUlIgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNSw3IHxcbiAqIHwgRXh0ZW5kZWQgeWVhciAgICAgICAgICAgICAgICAgICB8IHUgICAgICAgfCAtNDMsIDAsIDEsIDE5MDAsIDIwMTcgICAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dSAgICAgIHwgLTQzLCAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICAgIHwgNSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdXV1ICAgICB8IC0wNDMsIDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgICB8IDUgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHV1dXUgICAgfCAtMDA0MywgMDAwMSwgMTkwMCwgMjAxNyAgICAgICAgICAgfCA1ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB1dXV1dSAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw1ICAgfFxuICogfCBRdWFydGVyIChmb3JtYXR0aW5nKSAgICAgICAgICAgIHwgUSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUVFRICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFFRUVEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBRUVFRUSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBRdWFydGVyIChzdGFuZC1hbG9uZSkgICAgICAgICAgIHwgcSAgICAgICB8IDEsIDIsIDMsIDQgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFvICAgICAgfCAxc3QsIDJuZCwgM3JkLCA0dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcSAgICAgIHwgMDEsIDAyLCAwMywgMDQgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcXFxICAgICB8IFExLCBRMiwgUTMsIFE0ICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHFxcXEgICAgfCAxc3QgcXVhcnRlciwgMm5kIHF1YXJ0ZXIsIC4uLiAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBxcXFxcSAgIHwgMSwgMiwgMywgNCAgICAgICAgICAgICAgICAgICAgICAgIHwgNCAgICAgfFxuICogfCBNb250aCAoZm9ybWF0dGluZykgICAgICAgICAgICAgIHwgTSAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1vICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTSAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTU1NICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IE1NTU0gICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBNTU1NTSAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBNb250aCAoc3RhbmQtYWxvbmUpICAgICAgICAgICAgIHwgTCAgICAgICB8IDEsIDIsIC4uLiwgMTIgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAxMnRoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTCAgICAgIHwgMDEsIDAyLCAuLi4sIDEyICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgTExMICAgICB8IEphbiwgRmViLCAuLi4sIERlYyAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IExMTEwgICAgfCBKYW51YXJ5LCBGZWJydWFyeSwgLi4uLCBEZWNlbWJlciAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBMTExMTCAgIHwgSiwgRiwgLi4uLCBEICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBMb2NhbCB3ZWVrIG9mIHllYXIgICAgICAgICAgICAgIHwgdyAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHdvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB3dyAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gd2VlayBvZiB5ZWFyICAgICAgICAgICAgICAgIHwgSSAgICAgICB8IDEsIDIsIC4uLiwgNTMgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IElvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA1M3RoICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBJSSAgICAgIHwgMDEsIDAyLCAuLi4sIDUzICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCBEYXkgb2YgbW9udGggICAgICAgICAgICAgICAgICAgIHwgZCAgICAgICB8IDEsIDIsIC4uLiwgMzEgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGRvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzMXN0ICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBkZCAgICAgIHwgMDEsIDAyLCAuLi4sIDMxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCBEYXkgb2YgeWVhciAgICAgICAgICAgICAgICAgICAgIHwgRCAgICAgICB8IDEsIDIsIC4uLiwgMzY1LCAzNjYgICAgICAgICAgICAgICB8IDkgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IERvICAgICAgfCAxc3QsIDJuZCwgLi4uLCAzNjV0aCwgMzY2dGggICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBERCAgICAgIHwgMDEsIDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICAgIHwgOSAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgREREICAgICB8IDAwMSwgMDAyLCAuLi4sIDM2NSwgMzY2ICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEREREQgICAgfCAuLi4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAzICAgICB8XG4gKiB8IERheSBvZiB3ZWVrIChmb3JtYXR0aW5nKSAgICAgICAgfCBFLi5FRUUgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgRUVFRSAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEVFRUVFICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBFRUVFRUUgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTdSwgU2EgICAgICAgIHwgICAgICAgfFxuICogfCBJU08gZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICAgIHwgaSAgICAgICB8IDEsIDIsIDMsIC4uLiwgNyAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlvICAgICAgfCAxc3QsIDJuZCwgLi4uLCA3dGggICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaSAgICAgIHwgMDEsIDAyLCAuLi4sIDA3ICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpICAgICB8IE1vbiwgVHVlLCBXZWQsIC4uLiwgU3VuICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGlpaWkgICAgfCBNb25kYXksIFR1ZXNkYXksIC4uLiwgU3VuZGF5ICAgICAgfCAyLDcgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBpaWlpaSAgIHwgTSwgVCwgVywgVCwgRiwgUywgUyAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaWlpaWlpICB8IE1vLCBUdSwgV2UsIFRoLCBGciwgU3UsIFNhICAgICAgICB8IDcgICAgIHxcbiAqIHwgTG9jYWwgZGF5IG9mIHdlZWsgKGZvcm1hdHRpbmcpICB8IGUgICAgICAgfCAyLCAzLCA0LCAuLi4sIDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlbyAgICAgIHwgMm5kLCAzcmQsIC4uLiwgMXN0ICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWUgICAgICB8IDAyLCAwMywgLi4uLCAwMSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZSAgICAgfCBNb24sIFR1ZSwgV2VkLCAuLi4sIFN1biAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBlZWVlICAgIHwgTW9uZGF5LCBUdWVzZGF5LCAuLi4sIFN1bmRheSAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgZWVlZWUgICB8IE0sIFQsIFcsIFQsIEYsIFMsIFMgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGVlZWVlZSAgfCBNbywgVHUsIFdlLCBUaCwgRnIsIFN1LCBTYSAgICAgICAgfCAgICAgICB8XG4gKiB8IExvY2FsIGRheSBvZiB3ZWVrIChzdGFuZC1hbG9uZSkgfCBjICAgICAgIHwgMiwgMywgNCwgLi4uLCAxICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY28gICAgICB8IDJuZCwgM3JkLCAuLi4sIDFzdCAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjICAgICAgfCAwMiwgMDMsIC4uLiwgMDEgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2MgICAgIHwgTW9uLCBUdWUsIFdlZCwgLi4uLCBTdW4gICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgY2NjYyAgICB8IE1vbmRheSwgVHVlc2RheSwgLi4uLCBTdW5kYXkgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGNjY2NjICAgfCBNLCBULCBXLCBULCBGLCBTLCBTICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBjY2NjY2MgIHwgTW8sIFR1LCBXZSwgVGgsIEZyLCBTdSwgU2EgICAgICAgIHwgICAgICAgfFxuICogfCBBTSwgUE0gICAgICAgICAgICAgICAgICAgICAgICAgIHwgYS4uYWEgICB8IEFNLCBQTSAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGFhYSAgICAgfCBhbSwgcG0gICAgICAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBhYWFhICAgIHwgYS5tLiwgcC5tLiAgICAgICAgICAgICAgICAgICAgICAgIHwgMiAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYWFhYWEgICB8IGEsIHAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgQU0sIFBNLCBub29uLCBtaWRuaWdodCAgICAgICAgICB8IGIuLmJiICAgfCBBTSwgUE0sIG5vb24sIG1pZG5pZ2h0ICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBiYmIgICAgIHwgYW0sIHBtLCBub29uLCBtaWRuaWdodCAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgYmJiYiAgICB8IGEubS4sIHAubS4sIG5vb24sIG1pZG5pZ2h0ICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGJiYmJiICAgfCBhLCBwLCBuLCBtaSAgICAgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZsZXhpYmxlIGRheSBwZXJpb2QgICAgICAgICAgICAgfCBCLi5CQkIgIHwgYXQgbmlnaHQsIGluIHRoZSBtb3JuaW5nLCAuLi4gICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgQkJCQiAgICB8IGF0IG5pZ2h0LCBpbiB0aGUgbW9ybmluZywgLi4uICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEJCQkJCICAgfCBhdCBuaWdodCwgaW4gdGhlIG1vcm5pbmcsIC4uLiAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMTJdICAgICAgICAgICAgICAgICAgICAgfCBoICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMTIgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgaG8gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDEydGggICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGhoICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDEyICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMjNdICAgICAgICAgICAgICAgICAgICAgfCBIICAgICAgIHwgMCwgMSwgMiwgLi4uLCAyMyAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgSG8gICAgICB8IDB0aCwgMXN0LCAybmQsIC4uLiwgMjNyZCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEhIICAgICAgfCAwMCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzAtMTFdICAgICAgICAgICAgICAgICAgICAgfCBLICAgICAgIHwgMSwgMiwgLi4uLCAxMSwgMCAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgS28gICAgICB8IDFzdCwgMm5kLCAuLi4sIDExdGgsIDB0aCAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IEtLICAgICAgfCAwMSwgMDIsIC4uLiwgMTEsIDAwICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEhvdXIgWzEtMjRdICAgICAgICAgICAgICAgICAgICAgfCBrICAgICAgIHwgMjQsIDEsIDIsIC4uLiwgMjMgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwga28gICAgICB8IDI0dGgsIDFzdCwgMm5kLCAuLi4sIDIzcmQgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IGtrICAgICAgfCAyNCwgMDEsIDAyLCAuLi4sIDIzICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IE1pbnV0ZSAgICAgICAgICAgICAgICAgICAgICAgICAgfCBtICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgbW8gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IG1tICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IFNlY29uZCAgICAgICAgICAgICAgICAgICAgICAgICAgfCBzICAgICAgIHwgMCwgMSwgLi4uLCA1OSAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgc28gICAgICB8IDB0aCwgMXN0LCAuLi4sIDU5dGggICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHNzICAgICAgfCAwMCwgMDEsIC4uLiwgNTkgICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8IEZyYWN0aW9uIG9mIHNlY29uZCAgICAgICAgICAgICAgfCBTICAgICAgIHwgMCwgMSwgLi4uLCA5ICAgICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgU1MgICAgICB8IDAwLCAwMSwgLi4uLCA5OSAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFNTUyAgICAgfCAwMDAsIDAwMSwgLi4uLCA5OTkgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBTU1NTICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyAgICAgfFxuICogfCBUaW1lem9uZSAoSVNPLTg2MDEgdy8gWikgICAgICAgIHwgWCAgICAgICB8IC0wOCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYICAgICAgfCAtMDgwMCwgKzA1MzAsIFogICAgICAgICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBYWFggICAgIHwgLTA4OjAwLCArMDU6MzAsIFogICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgWFhYWCAgICB8IC0wODAwLCArMDUzMCwgWiwgKzEyMzQ1NiAgICAgICAgICB8IDIgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFhYWFhYICAgfCAtMDg6MDAsICswNTozMCwgWiwgKzEyOjM0OjU2ICAgICAgfCAgICAgICB8XG4gKiB8IFRpbWV6b25lIChJU08tODYwMSB3L28gWikgICAgICAgfCB4ICAgICAgIHwgLTA4LCArMDUzMCwgKzAwICAgICAgICAgICAgICAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHggICAgICB8IC0wODAwLCArMDUzMCwgKzAwMDAgICAgICAgICAgICAgICB8ICAgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHh4eCAgICAgfCAtMDg6MDAsICswNTozMCwgKzAwOjAwICAgICAgICAgICAgfCAyICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCB4eHh4ICAgIHwgLTA4MDAsICswNTMwLCArMDAwMCwgKzEyMzQ1NiAgICAgIHwgICAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgeHh4eHggICB8IC0wODowMCwgKzA1OjMwLCArMDA6MDAsICsxMjozNDo1NiB8ICAgICAgIHxcbiAqIHwgVGltZXpvbmUgKEdNVCkgICAgICAgICAgICAgICAgICB8IE8uLi5PT08gfCBHTVQtOCwgR01UKzU6MzAsIEdNVCswICAgICAgICAgICAgfCAgICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBPT09PICAgIHwgR01ULTA4OjAwLCBHTVQrMDU6MzAsIEdNVCswMDowMCAgIHwgMiAgICAgfFxuICogfCBUaW1lem9uZSAoc3BlY2lmaWMgbm9uLWxvY2F0LikgIHwgei4uLnp6eiB8IEdNVC04LCBHTVQrNTozMCwgR01UKzAgICAgICAgICAgICB8IDYgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHp6enogICAgfCBHTVQtMDg6MDAsIEdNVCswNTozMCwgR01UKzAwOjAwICAgfCAyLDYgICB8XG4gKiB8IFNlY29uZHMgdGltZXN0YW1wICAgICAgICAgICAgICAgfCB0ICAgICAgIHwgNTEyOTY5NTIwICAgICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgdHQgICAgICB8IC4uLiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IDMsNyAgIHxcbiAqIHwgTWlsbGlzZWNvbmRzIHRpbWVzdGFtcCAgICAgICAgICB8IFQgICAgICAgfCA1MTI5Njk1MjA5MDAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBUVCAgICAgIHwgLi4uICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgMyw3ICAgfFxuICogfCBMb25nIGxvY2FsaXplZCBkYXRlICAgICAgICAgICAgIHwgUCAgICAgICB8IDA0LzI5LzE0NTMgICAgICAgICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQICAgICAgfCBBcHIgMjksIDE0NTMgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFAgICAgIHwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBQUCAgICB8IEZyaWRheSwgQXByaWwgMjl0aCwgMTQ1MyAgICAgICAgICB8IDIsNyAgIHxcbiAqIHwgTG9uZyBsb2NhbGl6ZWQgdGltZSAgICAgICAgICAgICB8IHAgICAgICAgfCAxMjowMCBBTSAgICAgICAgICAgICAgICAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBwcCAgICAgIHwgMTI6MDA6MDAgQU0gICAgICAgICAgICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgcHBwICAgICB8IDEyOjAwOjAwIEFNIEdNVCsyICAgICAgICAgICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IHBwcHAgICAgfCAxMjowMDowMCBBTSBHTVQrMDI6MDAgICAgICAgICAgICAgfCAyLDcgICB8XG4gKiB8IENvbWJpbmF0aW9uIG9mIGRhdGUgYW5kIHRpbWUgICAgfCBQcCAgICAgIHwgMDQvMjkvMTQ1MywgMTI6MDAgQU0gICAgICAgICAgICAgIHwgNyAgICAgfFxuICogfCAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHwgUFBwcCAgICB8IEFwciAyOSwgMTQ1MywgMTI6MDA6MDAgQU0gICAgICAgICB8IDcgICAgIHxcbiAqIHwgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB8IFBQUHBwcCAgfCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgICAgICAgICAgfCA3ICAgICB8XG4gKiB8ICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfCBQUFBQcHBwcHwgRnJpZGF5LCBBcHJpbCAyOXRoLCAxNDUzIGF0IC4uLiAgIHwgMiw3ICAgfFxuICogTm90ZXM6XG4gKiAxLiBcIkZvcm1hdHRpbmdcIiB1bml0cyAoZS5nLiBmb3JtYXR0aW5nIHF1YXJ0ZXIpIGluIHRoZSBkZWZhdWx0IGVuLVVTIGxvY2FsZVxuICogICAgYXJlIHRoZSBzYW1lIGFzIFwic3RhbmQtYWxvbmVcIiB1bml0cywgYnV0IGFyZSBkaWZmZXJlbnQgaW4gc29tZSBsYW5ndWFnZXMuXG4gKiAgICBcIkZvcm1hdHRpbmdcIiB1bml0cyBhcmUgZGVjbGluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBvZiB0aGUgbGFuZ3VhZ2VcbiAqICAgIGluIHRoZSBjb250ZXh0IG9mIGEgZGF0ZS4gXCJTdGFuZC1hbG9uZVwiIHVuaXRzIGFyZSBhbHdheXMgbm9taW5hdGl2ZSBzaW5ndWxhcjpcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIExMTEwnLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ2RvIE1NTU0nLCB7bG9jYWxlOiBjc30pIC8vPT4gJzYuIGxpc3RvcGFkdSdgXG4gKlxuICogMi4gQW55IHNlcXVlbmNlIG9mIHRoZSBpZGVudGljYWwgbGV0dGVycyBpcyBhIHBhdHRlcm4sIHVubGVzcyBpdCBpcyBlc2NhcGVkIGJ5XG4gKiAgICB0aGUgc2luZ2xlIHF1b3RlIGNoYXJhY3RlcnMgKHNlZSBiZWxvdykuXG4gKiAgICBJZiB0aGUgc2VxdWVuY2UgaXMgbG9uZ2VyIHRoYW4gbGlzdGVkIGluIHRhYmxlIChlLmcuIGBFRUVFRUVFRUVFRWApXG4gKiAgICB0aGUgb3V0cHV0IHdpbGwgYmUgdGhlIHNhbWUgYXMgZGVmYXVsdCBwYXR0ZXJuIGZvciB0aGlzIHVuaXQsIHVzdWFsbHlcbiAqICAgIHRoZSBsb25nZXN0IG9uZSAoaW4gY2FzZSBvZiBJU08gd2Vla2RheXMsIGBFRUVFYCkuIERlZmF1bHQgcGF0dGVybnMgZm9yIHVuaXRzXG4gKiAgICBhcmUgbWFya2VkIHdpdGggXCIyXCIgaW4gdGhlIGxhc3QgY29sdW1uIG9mIHRoZSB0YWJsZS5cbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTScpIC8vPT4gJ05vdidgXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICdNTU1NJykgLy89PiAnTm92ZW1iZXInYFxuICpcbiAqICAgIGBmb3JtYXQobmV3IERhdGUoMjAxNywgMTAsIDYpLCAnTU1NTU0nKSAvLz0+ICdOJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTScpIC8vPT4gJ05vdmVtYmVyJ2BcbiAqXG4gKiAgICBgZm9ybWF0KG5ldyBEYXRlKDIwMTcsIDEwLCA2KSwgJ01NTU1NTU0nKSAvLz0+ICdOb3ZlbWJlcidgXG4gKlxuICogMy4gU29tZSBwYXR0ZXJucyBjb3VsZCBiZSB1bmxpbWl0ZWQgbGVuZ3RoIChzdWNoIGFzIGB5eXl5eXl5eWApLlxuICogICAgVGhlIG91dHB1dCB3aWxsIGJlIHBhZGRlZCB3aXRoIHplcm9zIHRvIG1hdGNoIHRoZSBsZW5ndGggb2YgdGhlIHBhdHRlcm4uXG4gKlxuICogICAgYGZvcm1hdChuZXcgRGF0ZSgyMDE3LCAxMCwgNiksICd5eXl5eXl5eScpIC8vPT4gJzAwMDAyMDE3J2BcbiAqXG4gKiA0LiBgUVFRUVFgIGFuZCBgcXFxcXFgIGNvdWxkIGJlIG5vdCBzdHJpY3RseSBudW1lcmljYWwgaW4gc29tZSBsb2NhbGVzLlxuICogICAgVGhlc2UgdG9rZW5zIHJlcHJlc2VudCB0aGUgc2hvcnRlc3QgZm9ybSBvZiB0aGUgcXVhcnRlci5cbiAqXG4gKiA1LiBUaGUgbWFpbiBkaWZmZXJlbmNlIGJldHdlZW4gYHlgIGFuZCBgdWAgcGF0dGVybnMgYXJlIEIuQy4geWVhcnM6XG4gKlxuICogICAgfCBZZWFyIHwgYHlgIHwgYHVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS18LS0tLS18XG4gKiAgICB8IEFDIDEgfCAgIDEgfCAgIDEgfFxuICogICAgfCBCQyAxIHwgICAxIHwgICAwIHxcbiAqICAgIHwgQkMgMiB8ICAgMiB8ICAtMSB8XG4gKlxuICogICAgQWxzbyBgeXlgIGFsd2F5cyByZXR1cm5zIHRoZSBsYXN0IHR3byBkaWdpdHMgb2YgYSB5ZWFyLFxuICogICAgd2hpbGUgYHV1YCBwYWRzIHNpbmdsZSBkaWdpdCB5ZWFycyB0byAyIGNoYXJhY3RlcnMgYW5kIHJldHVybnMgb3RoZXIgeWVhcnMgdW5jaGFuZ2VkOlxuICpcbiAqICAgIHwgWWVhciB8IGB5eWAgfCBgdXVgIHxcbiAqICAgIHwtLS0tLS18LS0tLS0tfC0tLS0tLXxcbiAqICAgIHwgMSAgICB8ICAgMDEgfCAgIDAxIHxcbiAqICAgIHwgMTQgICB8ICAgMTQgfCAgIDE0IHxcbiAqICAgIHwgMzc2ICB8ICAgNzYgfCAgMzc2IHxcbiAqICAgIHwgMTQ1MyB8ICAgNTMgfCAxNDUzIHxcbiAqXG4gKiAgICBUaGUgc2FtZSBkaWZmZXJlbmNlIGlzIHRydWUgZm9yIGxvY2FsIGFuZCBJU08gd2Vlay1udW1iZXJpbmcgeWVhcnMgKGBZYCBhbmQgYFJgKSxcbiAqICAgIGV4Y2VwdCBsb2NhbCB3ZWVrLW51bWJlcmluZyB5ZWFycyBhcmUgZGVwZW5kZW50IG9uIGBvcHRpb25zLndlZWtTdGFydHNPbmBcbiAqICAgIGFuZCBgb3B0aW9ucy5maXJzdFdlZWtDb250YWluc0RhdGVgIChjb21wYXJlIFtnZXRJU09XZWVrWWVhcl17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9nZXRJU09XZWVrWWVhcn1cbiAqICAgIGFuZCBbZ2V0V2Vla1llYXJde0BsaW5rIGh0dHBzOi8vZGF0ZS1mbnMub3JnL2RvY3MvZ2V0V2Vla1llYXJ9KS5cbiAqXG4gKiA2LiBTcGVjaWZpYyBub24tbG9jYXRpb24gdGltZXpvbmVzIGFyZSBjdXJyZW50bHkgdW5hdmFpbGFibGUgaW4gYGRhdGUtZm5zYCxcbiAqICAgIHNvIHJpZ2h0IG5vdyB0aGVzZSB0b2tlbnMgZmFsbCBiYWNrIHRvIEdNVCB0aW1lem9uZXMuXG4gKlxuICogNy4gVGhlc2UgcGF0dGVybnMgYXJlIG5vdCBpbiB0aGUgVW5pY29kZSBUZWNobmljYWwgU3RhbmRhcmQgIzM1OlxuICogICAgLSBgaWA6IElTTyBkYXkgb2Ygd2Vla1xuICogICAgLSBgSWA6IElTTyB3ZWVrIG9mIHllYXJcbiAqICAgIC0gYFJgOiBJU08gd2Vlay1udW1iZXJpbmcgeWVhclxuICogICAgLSBgdGA6IHNlY29uZHMgdGltZXN0YW1wXG4gKiAgICAtIGBUYDogbWlsbGlzZWNvbmRzIHRpbWVzdGFtcFxuICogICAgLSBgb2A6IG9yZGluYWwgbnVtYmVyIG1vZGlmaWVyXG4gKiAgICAtIGBQYDogbG9uZyBsb2NhbGl6ZWQgZGF0ZVxuICogICAgLSBgcGA6IGxvbmcgbG9jYWxpemVkIHRpbWVcbiAqXG4gKiA4LiBgWVlgIGFuZCBgWVlZWWAgdG9rZW5zIHJlcHJlc2VudCB3ZWVrLW51bWJlcmluZyB5ZWFycyBidXQgdGhleSBhcmUgb2Z0ZW4gY29uZnVzZWQgd2l0aCB5ZWFycy5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2Vuc2AgdG8gdXNlIHRoZW0uIFNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqXG4gKiA5LiBgRGAgYW5kIGBERGAgdG9rZW5zIHJlcHJlc2VudCBkYXlzIG9mIHRoZSB5ZWFyIGJ1dCB0aGV5IGFyZSBvZnRoZW4gY29uZnVzZWQgd2l0aCBkYXlzIG9mIHRoZSBtb250aC5cbiAqICAgIFlvdSBzaG91bGQgZW5hYmxlIGBvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnNgIHRvIHVzZSB0aGVtLiBTZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKlxuICogIyMjIHYyLjAuMCBicmVha2luZyBjaGFuZ2VzOlxuICpcbiAqIC0gW0NoYW5nZXMgdGhhdCBhcmUgY29tbW9uIGZvciB0aGUgd2hvbGUgbGlicmFyeV0oaHR0cHM6Ly9naXRodWIuY29tL2RhdGUtZm5zL2RhdGUtZm5zL2Jsb2IvbWFzdGVyL2RvY3MvdXBncmFkZUd1aWRlLm1kI0NvbW1vbi1DaGFuZ2VzKS5cbiAqXG4gKiAtIFRoZSBzZWNvbmQgYXJndW1lbnQgaXMgbm93IHJlcXVpcmVkIGZvciB0aGUgc2FrZSBvZiBleHBsaWNpdG5lc3MuXG4gKlxuICogICBgYGBqYXZhc2NyaXB0XG4gKiAgIC8vIEJlZm9yZSB2Mi4wLjBcbiAqICAgZm9ybWF0KG5ldyBEYXRlKDIwMTYsIDAsIDEpKVxuICpcbiAqICAgLy8gdjIuMC4wIG9ud2FyZFxuICogICBmb3JtYXQobmV3IERhdGUoMjAxNiwgMCwgMSksIFwieXl5eS1NTS1kZCdUJ0hIOm1tOnNzLlNTU3h4eFwiKVxuICogICBgYGBcbiAqXG4gKiAtIE5ldyBmb3JtYXQgc3RyaW5nIEFQSSBmb3IgYGZvcm1hdGAgZnVuY3Rpb25cbiAqICAgd2hpY2ggaXMgYmFzZWQgb24gW1VuaWNvZGUgVGVjaG5pY2FsIFN0YW5kYXJkICMzNV0oaHR0cHM6Ly93d3cudW5pY29kZS5vcmcvcmVwb3J0cy90cjM1L3RyMzUtZGF0ZXMuaHRtbCNEYXRlX0ZpZWxkX1N5bWJvbF9UYWJsZSkuXG4gKiAgIFNlZSBbdGhpcyBwb3N0XShodHRwczovL2Jsb2cuZGF0ZS1mbnMub3JnL3Bvc3QvdW5pY29kZS10b2tlbnMtaW4tZGF0ZS1mbnMtdjItc3JlYXR5a2k5MWpnKSBmb3IgbW9yZSBkZXRhaWxzLlxuICpcbiAqIC0gQ2hhcmFjdGVycyBhcmUgbm93IGVzY2FwZWQgdXNpbmcgc2luZ2xlIHF1b3RlIHN5bWJvbHMgKGAnYCkgaW5zdGVhZCBvZiBzcXVhcmUgYnJhY2tldHMuXG4gKlxuICogQHBhcmFtIHtEYXRlfE51bWJlcn0gZGF0ZSAtIHRoZSBvcmlnaW5hbCBkYXRlXG4gKiBAcGFyYW0ge1N0cmluZ30gZm9ybWF0IC0gdGhlIHN0cmluZyBvZiB0b2tlbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc10gLSBhbiBvYmplY3Qgd2l0aCBvcHRpb25zLlxuICogQHBhcmFtIHtMb2NhbGV9IFtvcHRpb25zLmxvY2FsZT1kZWZhdWx0TG9jYWxlXSAtIHRoZSBsb2NhbGUgb2JqZWN0LiBTZWUgW0xvY2FsZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy9Mb2NhbGV9XG4gKiBAcGFyYW0gezB8MXwyfDN8NHw1fDZ9IFtvcHRpb25zLndlZWtTdGFydHNPbj0wXSAtIHRoZSBpbmRleCBvZiB0aGUgZmlyc3QgZGF5IG9mIHRoZSB3ZWVrICgwIC0gU3VuZGF5KVxuICogQHBhcmFtIHtOdW1iZXJ9IFtvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZT0xXSAtIHRoZSBkYXkgb2YgSmFudWFyeSwgd2hpY2ggaXNcbiAqIEBwYXJhbSB7Qm9vbGVhbn0gW29wdGlvbnMudXNlQWRkaXRpb25hbFdlZWtZZWFyVG9rZW5zPWZhbHNlXSAtIGlmIHRydWUsIGFsbG93cyB1c2FnZSBvZiB0aGUgd2Vlay1udW1iZXJpbmcgeWVhciB0b2tlbnMgYFlZYCBhbmQgYFlZWVlgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcGFyYW0ge0Jvb2xlYW59IFtvcHRpb25zLnVzZUFkZGl0aW9uYWxEYXlPZlllYXJUb2tlbnM9ZmFsc2VdIC0gaWYgdHJ1ZSwgYWxsb3dzIHVzYWdlIG9mIHRoZSBkYXkgb2YgeWVhciB0b2tlbnMgYERgIGFuZCBgRERgO1xuICogICBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAcmV0dXJucyB7U3RyaW5nfSB0aGUgZm9ybWF0dGVkIGRhdGUgc3RyaW5nXG4gKiBAdGhyb3dzIHtUeXBlRXJyb3J9IDIgYXJndW1lbnRzIHJlcXVpcmVkXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgZGF0ZWAgbXVzdCBub3QgYmUgSW52YWxpZCBEYXRlXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgbG9jYWxpemVgIHByb3BlcnR5XG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBgb3B0aW9ucy5sb2NhbGVgIG11c3QgY29udGFpbiBgZm9ybWF0TG9uZ2AgcHJvcGVydHlcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLndlZWtTdGFydHNPbmAgbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDZcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IGBvcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZWAgbXVzdCBiZSBiZXR3ZWVuIDEgYW5kIDdcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXl5eWAgaW5zdGVhZCBvZiBgWVlZWWAgZm9yIGZvcm1hdHRpbmcgeWVhcnMgdXNpbmcgW2Zvcm1hdCBwcm92aWRlZF0gdG8gdGhlIGlucHV0IFtpbnB1dCBwcm92aWRlZF07IHNlZTogaHR0cHM6Ly9naXQuaW8vZnhDeXJcbiAqIEB0aHJvd3Mge1JhbmdlRXJyb3J9IHVzZSBgeXlgIGluc3RlYWQgb2YgYFlZYCBmb3IgZm9ybWF0dGluZyB5ZWFycyB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkYCBpbnN0ZWFkIG9mIGBEYCBmb3IgZm9ybWF0dGluZyBkYXlzIG9mIHRoZSBtb250aCB1c2luZyBbZm9ybWF0IHByb3ZpZGVkXSB0byB0aGUgaW5wdXQgW2lucHV0IHByb3ZpZGVkXTsgc2VlOiBodHRwczovL2dpdC5pby9meEN5clxuICogQHRocm93cyB7UmFuZ2VFcnJvcn0gdXNlIGBkZGAgaW5zdGVhZCBvZiBgRERgIGZvciBmb3JtYXR0aW5nIGRheXMgb2YgdGhlIG1vbnRoIHVzaW5nIFtmb3JtYXQgcHJvdmlkZWRdIHRvIHRoZSBpbnB1dCBbaW5wdXQgcHJvdmlkZWRdOyBzZWU6IGh0dHBzOi8vZ2l0LmlvL2Z4Q3lyXG4gKiBAdGhyb3dzIHtSYW5nZUVycm9yfSBmb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXJcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDExIEZlYnJ1YXJ5IDIwMTQgaW4gbWlkZGxlLWVuZGlhbiBmb3JtYXQ6XG4gKiB2YXIgcmVzdWx0ID0gZm9ybWF0KG5ldyBEYXRlKDIwMTQsIDEsIDExKSwgJ01NL2RkL3l5eXknKVxuICogLy89PiAnMDIvMTEvMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gUmVwcmVzZW50IDIgSnVseSAyMDE0IGluIEVzcGVyYW50bzpcbiAqIGltcG9ydCB7IGVvTG9jYWxlIH0gZnJvbSAnZGF0ZS1mbnMvbG9jYWxlL2VvJ1xuICogdmFyIHJlc3VsdCA9IGZvcm1hdChuZXcgRGF0ZSgyMDE0LCA2LCAyKSwgXCJkbyAnZGUnIE1NTU0geXl5eVwiLCB7XG4gKiAgIGxvY2FsZTogZW9Mb2NhbGVcbiAqIH0pXG4gKiAvLz0+ICcyLWEgZGUganVsaW8gMjAxNCdcbiAqXG4gKiBAZXhhbXBsZVxuICogLy8gRXNjYXBlIHN0cmluZyBieSBzaW5nbGUgcXVvdGUgY2hhcmFjdGVyczpcbiAqIHZhciByZXN1bHQgPSBmb3JtYXQobmV3IERhdGUoMjAxNCwgNiwgMiwgMTUpLCBcImggJ28nJ2Nsb2NrJ1wiKVxuICogLy89PiBcIjMgbydjbG9ja1wiXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZm9ybWF0KGRpcnR5RGF0ZSwgZGlydHlGb3JtYXRTdHIsIGRpcnR5T3B0aW9ucykge1xuICByZXF1aXJlZEFyZ3MoMiwgYXJndW1lbnRzKTtcbiAgdmFyIGZvcm1hdFN0ciA9IFN0cmluZyhkaXJ0eUZvcm1hdFN0cik7XG4gIHZhciBvcHRpb25zID0gZGlydHlPcHRpb25zIHx8IHt9O1xuICB2YXIgbG9jYWxlID0gb3B0aW9ucy5sb2NhbGUgfHwgZGVmYXVsdExvY2FsZTtcbiAgdmFyIGxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IGxvY2FsZS5vcHRpb25zICYmIGxvY2FsZS5vcHRpb25zLmZpcnN0V2Vla0NvbnRhaW5zRGF0ZTtcbiAgdmFyIGRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUgPSBsb2NhbGVGaXJzdFdlZWtDb250YWluc0RhdGUgPT0gbnVsbCA/IDEgOiB0b0ludGVnZXIobG9jYWxlRmlyc3RXZWVrQ29udGFpbnNEYXRlKTtcbiAgdmFyIGZpcnN0V2Vla0NvbnRhaW5zRGF0ZSA9IG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlID09IG51bGwgPyBkZWZhdWx0Rmlyc3RXZWVrQ29udGFpbnNEYXRlIDogdG9JbnRlZ2VyKG9wdGlvbnMuZmlyc3RXZWVrQ29udGFpbnNEYXRlKTsgLy8gVGVzdCBpZiB3ZWVrU3RhcnRzT24gaXMgYmV0d2VlbiAxIGFuZCA3IF9hbmRfIGlzIG5vdCBOYU5cblxuICBpZiAoIShmaXJzdFdlZWtDb250YWluc0RhdGUgPj0gMSAmJiBmaXJzdFdlZWtDb250YWluc0RhdGUgPD0gNykpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignZmlyc3RXZWVrQ29udGFpbnNEYXRlIG11c3QgYmUgYmV0d2VlbiAxIGFuZCA3IGluY2x1c2l2ZWx5Jyk7XG4gIH1cblxuICB2YXIgbG9jYWxlV2Vla1N0YXJ0c09uID0gbG9jYWxlLm9wdGlvbnMgJiYgbG9jYWxlLm9wdGlvbnMud2Vla1N0YXJ0c09uO1xuICB2YXIgZGVmYXVsdFdlZWtTdGFydHNPbiA9IGxvY2FsZVdlZWtTdGFydHNPbiA9PSBudWxsID8gMCA6IHRvSW50ZWdlcihsb2NhbGVXZWVrU3RhcnRzT24pO1xuICB2YXIgd2Vla1N0YXJ0c09uID0gb3B0aW9ucy53ZWVrU3RhcnRzT24gPT0gbnVsbCA/IGRlZmF1bHRXZWVrU3RhcnRzT24gOiB0b0ludGVnZXIob3B0aW9ucy53ZWVrU3RhcnRzT24pOyAvLyBUZXN0IGlmIHdlZWtTdGFydHNPbiBpcyBiZXR3ZWVuIDAgYW5kIDYgX2FuZF8gaXMgbm90IE5hTlxuXG4gIGlmICghKHdlZWtTdGFydHNPbiA+PSAwICYmIHdlZWtTdGFydHNPbiA8PSA2KSkge1xuICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCd3ZWVrU3RhcnRzT24gbXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYgaW5jbHVzaXZlbHknKTtcbiAgfVxuXG4gIGlmICghbG9jYWxlLmxvY2FsaXplKSB7XG4gICAgdGhyb3cgbmV3IFJhbmdlRXJyb3IoJ2xvY2FsZSBtdXN0IGNvbnRhaW4gbG9jYWxpemUgcHJvcGVydHknKTtcbiAgfVxuXG4gIGlmICghbG9jYWxlLmZvcm1hdExvbmcpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignbG9jYWxlIG11c3QgY29udGFpbiBmb3JtYXRMb25nIHByb3BlcnR5Jyk7XG4gIH1cblxuICB2YXIgb3JpZ2luYWxEYXRlID0gdG9EYXRlKGRpcnR5RGF0ZSk7XG5cbiAgaWYgKCFpc1ZhbGlkKG9yaWdpbmFsRGF0ZSkpIHtcbiAgICB0aHJvdyBuZXcgUmFuZ2VFcnJvcignSW52YWxpZCB0aW1lIHZhbHVlJyk7XG4gIH0gLy8gQ29udmVydCB0aGUgZGF0ZSBpbiBzeXN0ZW0gdGltZXpvbmUgdG8gdGhlIHNhbWUgZGF0ZSBpbiBVVEMrMDA6MDAgdGltZXpvbmUuXG4gIC8vIFRoaXMgZW5zdXJlcyB0aGF0IHdoZW4gVVRDIGZ1bmN0aW9ucyB3aWxsIGJlIGltcGxlbWVudGVkLCBsb2NhbGVzIHdpbGwgYmUgY29tcGF0aWJsZSB3aXRoIHRoZW0uXG4gIC8vIFNlZSBhbiBpc3N1ZSBhYm91dCBVVEMgZnVuY3Rpb25zOiBodHRwczovL2dpdGh1Yi5jb20vZGF0ZS1mbnMvZGF0ZS1mbnMvaXNzdWVzLzM3NlxuXG5cbiAgdmFyIHRpbWV6b25lT2Zmc2V0ID0gZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyhvcmlnaW5hbERhdGUpO1xuICB2YXIgdXRjRGF0ZSA9IHN1Yk1pbGxpc2Vjb25kcyhvcmlnaW5hbERhdGUsIHRpbWV6b25lT2Zmc2V0KTtcbiAgdmFyIGZvcm1hdHRlck9wdGlvbnMgPSB7XG4gICAgZmlyc3RXZWVrQ29udGFpbnNEYXRlOiBmaXJzdFdlZWtDb250YWluc0RhdGUsXG4gICAgd2Vla1N0YXJ0c09uOiB3ZWVrU3RhcnRzT24sXG4gICAgbG9jYWxlOiBsb2NhbGUsXG4gICAgX29yaWdpbmFsRGF0ZTogb3JpZ2luYWxEYXRlXG4gIH07XG4gIHZhciByZXN1bHQgPSBmb3JtYXRTdHIubWF0Y2gobG9uZ0Zvcm1hdHRpbmdUb2tlbnNSZWdFeHApLm1hcChmdW5jdGlvbiAoc3Vic3RyaW5nKSB7XG4gICAgdmFyIGZpcnN0Q2hhcmFjdGVyID0gc3Vic3RyaW5nWzBdO1xuXG4gICAgaWYgKGZpcnN0Q2hhcmFjdGVyID09PSAncCcgfHwgZmlyc3RDaGFyYWN0ZXIgPT09ICdQJykge1xuICAgICAgdmFyIGxvbmdGb3JtYXR0ZXIgPSBsb25nRm9ybWF0dGVyc1tmaXJzdENoYXJhY3Rlcl07XG4gICAgICByZXR1cm4gbG9uZ0Zvcm1hdHRlcihzdWJzdHJpbmcsIGxvY2FsZS5mb3JtYXRMb25nLCBmb3JtYXR0ZXJPcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc3Vic3RyaW5nO1xuICB9KS5qb2luKCcnKS5tYXRjaChmb3JtYXR0aW5nVG9rZW5zUmVnRXhwKS5tYXAoZnVuY3Rpb24gKHN1YnN0cmluZykge1xuICAgIC8vIFJlcGxhY2UgdHdvIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJzIHdpdGggb25lIHNpbmdsZSBxdW90ZSBjaGFyYWN0ZXJcbiAgICBpZiAoc3Vic3RyaW5nID09PSBcIicnXCIpIHtcbiAgICAgIHJldHVybiBcIidcIjtcbiAgICB9XG5cbiAgICB2YXIgZmlyc3RDaGFyYWN0ZXIgPSBzdWJzdHJpbmdbMF07XG5cbiAgICBpZiAoZmlyc3RDaGFyYWN0ZXIgPT09IFwiJ1wiKSB7XG4gICAgICByZXR1cm4gY2xlYW5Fc2NhcGVkU3RyaW5nKHN1YnN0cmluZyk7XG4gICAgfVxuXG4gICAgdmFyIGZvcm1hdHRlciA9IGZvcm1hdHRlcnNbZmlyc3RDaGFyYWN0ZXJdO1xuXG4gICAgaWYgKGZvcm1hdHRlcikge1xuICAgICAgaWYgKCFvcHRpb25zLnVzZUFkZGl0aW9uYWxXZWVrWWVhclRva2VucyAmJiBpc1Byb3RlY3RlZFdlZWtZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIGRpcnR5RGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghb3B0aW9ucy51c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zICYmIGlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4oc3Vic3RyaW5nKSkge1xuICAgICAgICB0aHJvd1Byb3RlY3RlZEVycm9yKHN1YnN0cmluZywgZGlydHlGb3JtYXRTdHIsIGRpcnR5RGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBmb3JtYXR0ZXIodXRjRGF0ZSwgc3Vic3RyaW5nLCBsb2NhbGUubG9jYWxpemUsIGZvcm1hdHRlck9wdGlvbnMpO1xuICAgIH1cblxuICAgIGlmIChmaXJzdENoYXJhY3Rlci5tYXRjaCh1bmVzY2FwZWRMYXRpbkNoYXJhY3RlclJlZ0V4cCkpIHtcbiAgICAgIHRocm93IG5ldyBSYW5nZUVycm9yKCdGb3JtYXQgc3RyaW5nIGNvbnRhaW5zIGFuIHVuZXNjYXBlZCBsYXRpbiBhbHBoYWJldCBjaGFyYWN0ZXIgYCcgKyBmaXJzdENoYXJhY3RlciArICdgJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHN1YnN0cmluZztcbiAgfSkuam9pbignJyk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIGNsZWFuRXNjYXBlZFN0cmluZyhpbnB1dCkge1xuICByZXR1cm4gaW5wdXQubWF0Y2goZXNjYXBlZFN0cmluZ1JlZ0V4cClbMV0ucmVwbGFjZShkb3VibGVRdW90ZVJlZ0V4cCwgXCInXCIpO1xufSIsImltcG9ydCBFdmVudHMgZnJvbSAnLi9ldmVudHMuanMnXG5pbXBvcnQgcHJvamVjdHMgZnJvbSAnLi9wcm9qZWN0cy5qcyc7XG5pbXBvcnQgeyBmb3JtYXQsIHBhcnNlSlNPTiB9IGZyb20gJ2RhdGUtZm5zJ1xuXG5cbmNvbnN0IHRhc2tGYWN0b3J5ID0gKHRpdGxlLCBwcm9qZWN0LCBkb25lID0gZmFsc2UsIGRhdGUgPSBmYWxzZSkgPT4ge1xuXG4gIGZ1bmN0aW9uIGZvcm1hdERhdGUoKSB7XG4gICAgLy8gZm9ybWF0IGRhdGUgZm9yIGRpc3BsYXlcbiAgICBpZih0aGlzLmRhdGUpIHJldHVybiBmb3JtYXQodGhpcy5kYXRlLCAnZC5NTU0nKTtcbiAgfVxuXG4gIGlmKGRhdGUpIGRhdGUgPSBwYXJzZUpTT04oZGF0ZSlcblxuICByZXR1cm4ge1xuICAgIHRpdGxlLFxuICAgIHByb2plY3QsXG4gICAgZG9uZSxcbiAgICBkYXRlLFxuICAgIGZvcm1hdERhdGVcbiAgfTtcbn07XG5cblxuY29uc3QgdGFza3NNb2R1bGUgPSAoZnVuY3Rpb24oKXtcblxuICAgIGxldCB0YXNrcyA9IFtdO1xuICAgICAgXG4gICAgLy8gcmVjcmVhdGUgb2JqZWN0cyBmcm9tIGxvY2FsIHN0b3JhZ2VcbiAgIGlmKGxvY2FsU3RvcmFnZS5nZXRJdGVtKCd0YXNrcycpKSB7XG4gICAgY29uc3QgdGFza3NMb2NhbCA9IEpTT04ucGFyc2UobG9jYWxTdG9yYWdlLmdldEl0ZW0oJ3Rhc2tzJykpXG4gICAgdGFza3NMb2NhbC5mb3JFYWNoKHRhc2sgPT4ge1xuICAgICAgcmV0dXJuIGFkZFRhc2sodGFzayk7XG4gICAgfSlcbiAgICB9XG5cbiAgRXZlbnRzLm9uKCd1cGRhdGVUYXNrcycsIGRlbGl2ZXJUYXNrcyk7XG4gIEV2ZW50cy5vbignY3JlYXRlVGFzaycsIGFkZFRhc2spO1xuICBFdmVudHMub24oJ3JlbW92ZVRhc2snLCByZW1vdmVUYXNrKTtcbiAgRXZlbnRzLm9uKCdlZGl0VGFzaycsIGhhbmRsZVVwZGF0ZXMpO1xuIFxuICBmdW5jdGlvbiBnZXRUYXNrcygpIHtcbiAgICByZXR1cm4gdGFza3Muc2xpY2UoKTtcbiAgfVxuXG4gIC8vIHNlbmQgdGFza3MgdG8gb3RoZXIgbW9kdWxlc1xuICBmdW5jdGlvbiBkZWxpdmVyVGFza3MoKSB7XG4gICAgRXZlbnRzLmVtaXQoJ2RlbGl2ZXJUYXNrcycsIHRhc2tzLnNsaWNlKCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkVGFzayhvYmopIHtcbiAgICAgIGNvbnN0IHRhc2sgPSB0YXNrRmFjdG9yeShvYmoudGl0bGUsIG9iai5wcm9qZWN0LCBvYmouZG9uZSwgb2JqLmRhdGUpO1xuICAgICAgdGFza3MucHVzaCh0YXNrKTtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCd0YXNrcycsIEpTT04uc3RyaW5naWZ5KHRhc2tzLnNsaWNlKCkpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVRhc2sodGFzaykge1xuICAgIGNvbnN0IGluZGV4ID0gdGFza3MuZmluZEluZGV4KHQgPT4gdCA9PT0gdGFzayk7XG4gICAgdGFza3MgPSBbLi4udGFza3Muc2xpY2UoMCwgaW5kZXgpLCAuLi50YXNrcy5zbGljZShpbmRleCArIDEpXTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGFza3MnLCBKU09OLnN0cmluZ2lmeSh0YXNrcy5zbGljZSgpKSk7XG4gIH1cblxuICBmdW5jdGlvbiBoYW5kbGVVcGRhdGVzKHRhc2ssIG9iaikge1xuICAgIGNvbnN0IHRhc2tJbmRleCA9IHRhc2tzLmZpbmRJbmRleCh0ID0+IHQgPT09IHRhc2spO1xuICAgIE9iamVjdC5hc3NpZ24odGFza3NbdGFza0luZGV4XSwgb2JqKTtcbiAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbSgndGFza3MnLCBKU09OLnN0cmluZ2lmeSh0YXNrcy5zbGljZSgpKSk7XG4gIH1cblxuICByZXR1cm4ge1xuICB9XG4gIFxufSgpKVxuXG5cbiAgZXhwb3J0IGRlZmF1bHQgdGFza3NNb2R1bGUiLCJpbXBvcnQgdG9EYXRlIGZyb20gXCIuLi90b0RhdGUvaW5kZXguanNcIjtcbmltcG9ydCByZXF1aXJlZEFyZ3MgZnJvbSBcIi4uL19saWIvcmVxdWlyZWRBcmdzL2luZGV4LmpzXCI7XG4vKipcbiAqIEBuYW1lIHBhcnNlSlNPTlxuICogQGNhdGVnb3J5IENvbW1vbiBIZWxwZXJzXG4gKiBAc3VtbWFyeSBQYXJzZSBhIEpTT04gZGF0ZSBzdHJpbmdcbiAqXG4gKiBAZGVzY3JpcHRpb25cbiAqIENvbnZlcnRzIGEgY29tcGxldGUgSVNPIGRhdGUgc3RyaW5nIGluIFVUQyB0aW1lLCB0aGUgdHlwaWNhbCBmb3JtYXQgZm9yIHRyYW5zbWl0dGluZ1xuICogYSBkYXRlIGluIEpTT04sIHRvIGEgSmF2YVNjcmlwdCBgRGF0ZWAgaW5zdGFuY2UuXG4gKlxuICogVGhpcyBpcyBhIG1pbmltYWwgaW1wbGVtZW50YXRpb24gZm9yIGNvbnZlcnRpbmcgZGF0ZXMgcmV0cmlldmVkIGZyb20gYSBKU09OIEFQSSB0b1xuICogYSBgRGF0ZWAgaW5zdGFuY2Ugd2hpY2ggY2FuIGJlIHVzZWQgd2l0aCBvdGhlciBmdW5jdGlvbnMgaW4gdGhlIGBkYXRlLWZuc2AgbGlicmFyeS5cbiAqIFRoZSBmb2xsb3dpbmcgZm9ybWF0cyBhcmUgc3VwcG9ydGVkOlxuICpcbiAqIC0gYDIwMDAtMDMtMTVUMDU6MjA6MTAuMTIzWmA6IFRoZSBvdXRwdXQgb2YgYC50b0lTT1N0cmluZygpYCBhbmQgYEpTT04uc3RyaW5naWZ5KG5ldyBEYXRlKCkpYFxuICogLSBgMjAwMC0wMy0xNVQwNToyMDoxMFpgOiBXaXRob3V0IG1pbGxpc2Vjb25kc1xuICogLSBgMjAwMC0wMy0xNVQwNToyMDoxMCswMDowMGA6IFdpdGggYSB6ZXJvIG9mZnNldCwgdGhlIGRlZmF1bHQgSlNPTiBlbmNvZGVkIGZvcm1hdCBpbiBzb21lIG90aGVyIGxhbmd1YWdlc1xuICogLSBgMjAwMC0wMy0xNVQwNToyMDoxMCswNTo0NWA6IFdpdGggYSBwb3NpdGl2ZSBvciBuZWdhdGl2ZSBvZmZzZXQsIHRoZSBkZWZhdWx0IEpTT04gZW5jb2RlZCBmb3JtYXQgaW4gc29tZSBvdGhlciBsYW5ndWFnZXNcbiAqIC0gYDIwMDAtMDMtMTVUMDU6MjA6MTArMDAwMGA6IFdpdGggYSB6ZXJvIG9mZnNldCB3aXRob3V0IGEgY29sb25cbiAqIC0gYDIwMDAtMDMtMTVUMDU6MjA6MTBgOiBXaXRob3V0IGEgdHJhaWxpbmcgJ1onIHN5bWJvbFxuICogLSBgMjAwMC0wMy0xNVQwNToyMDoxMC4xMjM0NTY3YDogVXAgdG8gNyBkaWdpdHMgaW4gbWlsbGlzZWNvbmRzIGZpZWxkLiBPbmx5IGZpcnN0IDMgYXJlIHRha2VuIGludG8gYWNjb3VudCBzaW5jZSBKUyBkb2VzIG5vdCBhbGxvdyBmcmFjdGlvbmFsIG1pbGxpc2Vjb25kc1xuICogLSBgMjAwMC0wMy0xNSAwNToyMDoxMGA6IFdpdGggYSBzcGFjZSBpbnN0ZWFkIG9mIGEgJ1QnIHNlcGFyYXRvciBmb3IgQVBJcyByZXR1cm5pbmcgYSBTUUwgZGF0ZSB3aXRob3V0IHJlZm9ybWF0dGluZ1xuICpcbiAqIEZvciBjb252ZW5pZW5jZSBhbmQgZWFzZSBvZiB1c2UgdGhlc2Ugb3RoZXIgaW5wdXQgdHlwZXMgYXJlIGFsc28gc3VwcG9ydGVkXG4gKiB2aWEgW3RvRGF0ZV17QGxpbmsgaHR0cHM6Ly9kYXRlLWZucy5vcmcvZG9jcy90b0RhdGV9OlxuICpcbiAqIC0gQSBgRGF0ZWAgaW5zdGFuY2Ugd2lsbCBiZSBjbG9uZWRcbiAqIC0gQSBgbnVtYmVyYCB3aWxsIGJlIHRyZWF0ZWQgYXMgYSB0aW1lc3RhbXBcbiAqXG4gKiBBbnkgb3RoZXIgaW5wdXQgdHlwZSBvciBpbnZhbGlkIGRhdGUgc3RyaW5ncyB3aWxsIHJldHVybiBhbiBgSW52YWxpZCBEYXRlYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ8RGF0ZX0gYXJndW1lbnQgQSBmdWxseSBmb3JtZWQgSVNPODYwMSBkYXRlIHN0cmluZyB0byBjb252ZXJ0XG4gKiBAcmV0dXJucyB7RGF0ZX0gdGhlIHBhcnNlZCBkYXRlIGluIHRoZSBsb2NhbCB0aW1lIHpvbmVcbiAqIEB0aHJvd3Mge1R5cGVFcnJvcn0gMSBhcmd1bWVudCByZXF1aXJlZFxuICovXG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlSlNPTihhcmd1bWVudCkge1xuICByZXF1aXJlZEFyZ3MoMSwgYXJndW1lbnRzKTtcblxuICBpZiAodHlwZW9mIGFyZ3VtZW50ID09PSAnc3RyaW5nJykge1xuICAgIHZhciBwYXJ0cyA9IGFyZ3VtZW50Lm1hdGNoKC8oXFxkezR9KS0oXFxkezJ9KS0oXFxkezJ9KVtUIF0oXFxkezJ9KTooXFxkezJ9KTooXFxkezJ9KSg/OlxcLihcXGR7MCw3fSkpPyg/Olp8KC4pKFxcZHsyfSk6PyhcXGR7Mn0pPyk/Lyk7XG5cbiAgICBpZiAocGFydHMpIHtcbiAgICAgIC8vIEdyb3VwIDggbWF0Y2hlcyB0aGUgc2lnblxuICAgICAgcmV0dXJuIG5ldyBEYXRlKERhdGUuVVRDKCtwYXJ0c1sxXSwgK3BhcnRzWzJdIC0gMSwgK3BhcnRzWzNdLCArcGFydHNbNF0gLSAoK3BhcnRzWzldIHx8IDApICogKHBhcnRzWzhdID09ICctJyA/IC0xIDogMSksICtwYXJ0c1s1XSAtICgrcGFydHNbMTBdIHx8IDApICogKHBhcnRzWzhdID09ICctJyA/IC0xIDogMSksICtwYXJ0c1s2XSwgKygocGFydHNbN10gfHwgJzAnKSArICcwMCcpLnN1YnN0cmluZygwLCAzKSkpO1xuICAgIH1cblxuICAgIHJldHVybiBuZXcgRGF0ZShOYU4pO1xuICB9XG5cbiAgcmV0dXJuIHRvRGF0ZShhcmd1bWVudCk7XG59IiwiXG4gICAgICBpbXBvcnQgQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc3R5bGVEb21BUEkuanNcIjtcbiAgICAgIGltcG9ydCBpbnNlcnRGbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanNcIjtcbiAgICAgIGltcG9ydCBzZXRBdHRyaWJ1dGVzIGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzXCI7XG4gICAgICBpbXBvcnQgc3R5bGVUYWdUcmFuc2Zvcm1GbiBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzXCI7XG4gICAgICBpbXBvcnQgY29udGVudCwgKiBhcyBuYW1lZEV4cG9ydCBmcm9tIFwiISEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuY3NzXCI7XG4gICAgICAgZXhwb3J0IGRlZmF1bHQgY29udGVudCAmJiBjb250ZW50LmxvY2FscyA/IGNvbnRlbnQubG9jYWxzIDogdW5kZWZpbmVkO1xuIiwiaW1wb3J0IEV2ZW50cyBmcm9tIFwiLi9ldmVudHMuanNcIjtcbmltcG9ydCBUYXNrcyBmcm9tIFwiLi90YXNrcy5qc1wiO1xuaW1wb3J0IHByb2plY3RzIGZyb20gXCIuL3Byb2plY3RzLmpzXCI7XG5pbXBvcnQgU3R5bGUgZnJvbSBcIi4vc3R5bGUuY3NzXCI7XG5pbXBvcnQgT3BlbmJveCBmcm9tIFwiLi9pbWcvb3Blbi1ib3gucG5nXCI7XG5pbXBvcnQgeyBmb3JtYXQgfSBmcm9tIFwiZGF0ZS1mbnNcIjtcblxuY29uc3QgZG9tTW9kdWxlID0gKGZ1bmN0aW9uICgpIHtcbiAgbGV0IHVzZXJQcm9qZWN0cyA9IFtdO1xuICBsZXQgY29yZVByb2plY3RzID0gW107XG4gIGxldCB0YXNrcyA9IFtdO1xuICBsZXQgbmF2T3BlbiA9IGZhbHNlO1xuXG4gIGNvbnN0IGhlYWRlciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2hlYWRlcicpO1xuICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGhlYWRlcik7XG5cbiAgY29uc3QgZGlzcGxheU5hdkJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2J1dHRvbicpO1xuICBkaXNwbGF5TmF2QnRuLnRleHRDb250ZW50ID0gJ+KJoSc7XG4gIGRpc3BsYXlOYXZCdG4uY2xhc3NMaXN0LmFkZCgnYnV0dG9uLW5hdi1vcGVuJyk7XG4gIGhlYWRlci5hcHBlbmRDaGlsZChkaXNwbGF5TmF2QnRuKVxuXG4gIGNvbnN0IGNvbnRlbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICBjb250ZW50LmlkID0gXCJjb250ZW50XCI7XG4gIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoY29udGVudCk7XG5cbiAgY29uc3QgbmF2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcIm5hdlwiKTtcbiAgbmF2LmlkID0gXCJuYXZcIjtcbiAgY29udGVudC5hcHBlbmRDaGlsZChuYXYpO1xuXG4gIGNvbnN0IGNvcmVQcm9qZWN0c0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIGNvcmVQcm9qZWN0c0Rpdi5jbGFzc0xpc3QuYWRkKFwiY29yZS1wcm9qZWN0c1wiKTtcbiAgbmF2LmFwcGVuZENoaWxkKGNvcmVQcm9qZWN0c0Rpdik7XG5cbiAgY29uc3QgbXlQcm9qZWN0c0hlYWRpbmcgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaDJcIik7XG4gIG15UHJvamVjdHNIZWFkaW5nLmNsYXNzTGlzdC5hZGQoXCJteXByb2plY3RzLWhlYWRpbmdcIik7XG4gIG15UHJvamVjdHNIZWFkaW5nLnRleHRDb250ZW50ID0gXCJNeSBQcm9qZWN0c1wiO1xuICBuYXYuYXBwZW5kQ2hpbGQobXlQcm9qZWN0c0hlYWRpbmcpO1xuXG4gIGNvbnN0IHVzZXJQcm9qZWN0c0RpdiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XG4gIHVzZXJQcm9qZWN0c0Rpdi5jbGFzc0xpc3QuYWRkKFwidXNlci1wcm9qZWN0c1wiKTtcbiAgbmF2LmFwcGVuZENoaWxkKHVzZXJQcm9qZWN0c0Rpdik7XG5cbiAgY29uc3QgYWRkUHJvamVjdEJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gIGFkZFByb2plY3RCdG4udGV4dENvbnRlbnQgPSBcIuKelSBOZXcgUHJvamVjdFwiO1xuICBhZGRQcm9qZWN0QnRuLmNsYXNzTGlzdC5hZGQoXCJhZGQtcHJvamVjdFwiLCBcImFjdGl2ZVwiKTtcbiAgbmF2LmFwcGVuZENoaWxkKGFkZFByb2plY3RCdG4pO1xuXG4gIGNvbnN0IHByb2plY3RGb3JtID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZvcm1cIik7XG4gIHByb2plY3RGb3JtLmNsYXNzTGlzdC5hZGQoXCJhZGQtcHJvamVjdC1mb3JtXCIpO1xuICBwcm9qZWN0Rm9ybS5pbm5lckhUTUwgPSBgPGlucHV0IGNsYXNzPVwiYWRkLXByb2plY3QtaW5wdXRcIiBuYW1lPVwibmV3UHJvamVjdFRpdGxlXCIgdHlwZT1cInRleHRcIiBwbGFjZWhvbGRlcj1cIlByb2plY3QgVGl0bGVcIiB2YWx1ZT1cIk5ldyBQcm9qZWN0XCIgcmVxdWlyZWQ+YDtcbiAgbmF2LmFwcGVuZENoaWxkKHByb2plY3RGb3JtKTtcblxuICBjb25zdCBwcm9qZWN0RGl2ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcbiAgcHJvamVjdERpdi5jbGFzc0xpc3QuYWRkKFwicHJvamVjdFwiKTtcbiAgY29udGVudC5hcHBlbmRDaGlsZChwcm9qZWN0RGl2KTtcblxuICBjb25zdCBlZGl0Rm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpO1xuICBlZGl0Rm9ybS5jbGFzc0xpc3QuYWRkKFwiZWRpdC1mb3JtXCIpO1xuICBjb250ZW50LmFwcGVuZENoaWxkKGVkaXRGb3JtKTtcblxuICBFdmVudHMub24oXCJkZWxpdmVyVXNlclByb2plY3RzXCIsIHVwZGF0ZVVzZXJQcm9qZWN0cyk7XG4gIEV2ZW50cy5vbihcImRlbGl2ZXJDb3JlUHJvamVjdHNcIiwgdXBkYXRlQ29yZVByb2plY3RzKTtcbiAgRXZlbnRzLm9uKFwiZGVsaXZlclRhc2tzXCIsIGdldFRhc2tzKTtcblxuICBmdW5jdGlvbiB1cGRhdGVDb3JlUHJvamVjdHMocHJvamVjdHMpIHtcbiAgICBjb3JlUHJvamVjdHMgPSBwcm9qZWN0cztcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVVzZXJQcm9qZWN0cyhwcm9qZWN0cykge1xuICAgIHVzZXJQcm9qZWN0cyA9IHByb2plY3RzO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2V0VGFza3MoYXJyYXkpIHtcbiAgICB0YXNrcyA9IGFycmF5O1xuICB9XG5cbiAgZnVuY3Rpb24gdXBkYXRlVGFza3MoKSB7XG4gICAgRXZlbnRzLmVtaXQoXCJ1cGRhdGVUYXNrc1wiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZVByb2plY3RzKCkge1xuICAgIEV2ZW50cy5lbWl0KFwidXBkYXRlQ29yZVByb2plY3RzXCIpO1xuICAgIEV2ZW50cy5lbWl0KFwidXBkYXRlVXNlclByb2plY3RzXCIpO1xuICB9XG5cbiAgdXBkYXRlUHJvamVjdHMoKTtcbiAgdXBkYXRlVGFza3MoKTtcblxuICBmdW5jdGlvbiBwb3B1bGF0ZU5hdkRpdihub2RlLCBwcm9qZWN0cykge1xuICAgIHVwZGF0ZVByb2plY3RzKCk7XG4gICAgbm9kZS5pbm5lckhUTUwgPSBwcm9qZWN0c1xuICAgICAgLm1hcCgocHJvamVjdCwgaW5kZXgpID0+IHtcbiAgICAgICAgcmV0dXJuIGBcbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCIke3Byb2plY3QudHlwZX0tcHJvamVjdC1uYXZcIj5cbiAgICAgICAgICAgIDxpbWcgY2xhc3M9XCJwcm9qZWN0LWljb25cIiBzcmM9XCIke3Byb2plY3QuaWNvbn1cIj5cbiAgICAgICAgICAgIDxidXR0b24gZGF0YS1pZHg9XCIke2luZGV4fVwiIGNsYXNzPVwibmF2LXByb2plY3QtYnRuXCI+JHtcbiAgICAgICAgICBwcm9qZWN0LnRpdGxlXG4gICAgICAgIH08L2J1dHRvbj5cbiAgICAgICAgICAgICR7XG4gICAgICAgICAgICAgIHByb2plY3QudHlwZSA9PT0gXCJ1c2VyXCJcbiAgICAgICAgICAgICAgICA/IGA8YnV0dG9uIGRhdGEtaWR4PVwiJHtpbmRleH1cIiBjbGFzcz1cInJtLXByb2plY3QtYnRuXCI+4p2MPC9idXR0b24+YFxuICAgICAgICAgICAgICAgIDogXCJcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICBgO1xuICAgICAgfSlcbiAgICAgIC5qb2luKFwiXCIpO1xuXG4gICAgY29uc3QgbmF2QnV0dG9ucyA9IG5vZGUucXVlcnlTZWxlY3RvckFsbChcIi5uYXYtcHJvamVjdC1idG5cIik7XG4gICAgbmF2QnV0dG9ucy5mb3JFYWNoKChidG4pID0+XG4gICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBwYXJzZUludCh0aGlzLmRhdGFzZXQuaWR4KTtcbiAgICAgICAgY29uc3QgcHJvamVjdCA9IHByb2plY3RzLnNsaWNlKClbaW5kZXhdO1xuICAgICAgICBwb3B1bGF0ZVByb2plY3QocHJvamVjdCwgcHJvamVjdERpdik7XG4gICAgICB9KVxuICAgICk7XG5cbiAgICBjb25zdCBybUJ1dHRvbnMgPSBub2RlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIucm0tcHJvamVjdC1idG5cIik7XG4gICAgcm1CdXR0b25zLmZvckVhY2goKGJ0bikgPT5cbiAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KHRoaXMuZGF0YXNldC5pZHgpO1xuICAgICAgICBjb25zdCBkZWxldGVQcm9qZWN0ID0gcHJvamVjdHMuc2xpY2UoKVtpbmRleF07XG4gICAgICAgIHJlbW92ZVByb2plY3QoZGVsZXRlUHJvamVjdCk7XG4gICAgICAgIHVwZGF0ZVByb2plY3RzKCk7XG4gICAgICAgIHJlbW92ZURlbGV0ZWRQcm9qZWN0VGFza3MoZGVsZXRlUHJvamVjdCwgdGFza3MpO1xuICAgICAgICBwb3B1bGF0ZU5hdkRpdihub2RlLCB1c2VyUHJvamVjdHMpO1xuICAgICAgICBwb3B1bGF0ZVByb2plY3QodXNlclByb2plY3RzW2luZGV4IC0gMV0gfHwgY29yZVByb2plY3RzWzBdLCBwcm9qZWN0RGl2KTtcbiAgICAgIH0pXG4gICAgKTtcbiAgfVxuXG4gIHBvcHVsYXRlTmF2RGl2KGNvcmVQcm9qZWN0c0RpdiwgY29yZVByb2plY3RzKTtcbiAgcG9wdWxhdGVOYXZEaXYodXNlclByb2plY3RzRGl2LCB1c2VyUHJvamVjdHMpO1xuXG4gIGZ1bmN0aW9uIHBvcHVsYXRlUHJvamVjdChwcm9qZWN0LCBwcm9qZWN0Tm9kZSkge1xuICAgIHByb2plY3ROb2RlLmlubmVySFRNTCA9IFwiXCI7XG5cbiAgICBjb25zdCB0aXRsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJoMVwiKTtcbiAgICB0aXRsZS50ZXh0Q29udGVudCA9IHByb2plY3QudGl0bGU7XG4gICAgcHJvamVjdE5vZGUuYXBwZW5kQ2hpbGQodGl0bGUpO1xuXG4gICAgY29uc3QgdGFza3NEaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1xuICAgIHRhc2tzRGl2LmNsYXNzTGlzdC5hZGQoXCJwcm9qZWN0LXRhc2tzXCIpO1xuICAgIHByb2plY3ROb2RlLmFwcGVuZENoaWxkKHRhc2tzRGl2KTtcblxuICAgIHBvcHVsYXRlVGFza3ModGFza3NEaXYsIHByb2plY3QsIHRhc2tzKTtcblxuICAgIHByb2plY3QudHlwZSA9PT0gXCJ1c2VyXCIgfHwgXCJhZGRUYXNrQnRuXCIgaW4gcHJvamVjdFxuICAgICAgPyBhZGRUYXNrYnRuKHByb2plY3ROb2RlLCBwcm9qZWN0LCB0YXNrc0RpdilcbiAgICAgIDogXCJcIjtcbiAgfVxuXG4gIHBvcHVsYXRlUHJvamVjdChjb3JlUHJvamVjdHNbMF0sIHByb2plY3REaXYpO1xuXG4gIGZ1bmN0aW9uIHBvcHVsYXRlVGFza3ModGFza3NOb2RlLCBwcm9qZWN0LCB0YXNrc0Fycikge1xuICAgIHVwZGF0ZVRhc2tzKCk7XG4gICAgdGFza3NOb2RlLmlubmVySFRNTCA9IFwiXCI7XG4gICAgdGFza3NOb2RlLmlubmVySFRNTCA9IHRhc2tzQXJyXG4gICAgICAubWFwKCh0YXNrLCBpbmRleCkgPT4ge1xuICAgICAgICAvLyBjaGVjayBpZiBwcm9qZWN0IHNob3VsZCBkaXNwbGF5IHRhc2tcbiAgICAgICAgaWYgKCFwcm9qZWN0LmRpc3BsYXlSdWxlKHRhc2spKSByZXR1cm47XG4gICAgICAgIGxldCB0aXRsZSA9IHRhc2sudGl0bGU7XG4gICAgICAgIC8vIGluY2x1ZGUgcHJvamVjdCB0aXRsZSB3aGVuIHRhc2sgaXMgZGlzcGxheWVkIGluIGEgZGlmZmVyZW50IHByb2plY3QgdGhhbiB3aGVyZSBpdCBpcyBwbGFjZVxuICAgICAgICBpZiAocHJvamVjdC50eXBlID09PSBcImNvcmVcIiAmJiB0YXNrLnByb2plY3QgIT09IHByb2plY3QudGl0bGUpIHtcbiAgICAgICAgICBjb25zdCB0YXNrcHJvamVjdCA9IHRhc2sucHJvamVjdDtcbiAgICAgICAgICB0aXRsZSArPSBcIiAoXCIgKyB0YXNrcHJvamVjdCArIFwiKVwiO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBgXG4gICAgICAgICAgICA8bGFiZWwgY2xhc3M9XCJ0YXNrXCIgZm9yPVwidGFzayR7aW5kZXh9XCI+XG4gICAgICAgICAgICA8aW5wdXQgZGF0YS1pZHg9XCIke2luZGV4fVwiIGNsYXNzPVwidGFzay1jaGVja2JveFwiIGlkPVwidGFzayR7aW5kZXh9XCIgdHlwZT1cImNoZWNrYm94XCIgbmFtZT1cInRhc2tzXCIgdmFsdWU9XCIke1xuICAgICAgICAgIHRhc2sudGl0bGVcbiAgICAgICAgfVwiICR7dGFzay5kb25lID8gXCJjaGVja2VkXCIgOiBcIlwifS8+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwidGFzay10aXRsZS1kYXRlXCI+JHtcbiAgICAgICAgICAgICAgdGFzay5kYXRlXG4gICAgICAgICAgICAgICAgPyAnPHAgY2xhc3M9XCJ0YXNrLWRhdGVcIj4nICsgdGFzay5mb3JtYXREYXRlKCkgKyBcIjwvcD5cIlxuICAgICAgICAgICAgICAgIDogXCJcIlxuICAgICAgICAgICAgfTxwIGNsYXNzPVwidGFzay10aXRsZVwiIHN0eWxlPVwiZGlzcGxheTogaW5saW5lXCI+JHt0aXRsZX08L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0YXNrLWJ0bnNcIj5cbiAgICAgICAgICAgIDxidXR0b24gZGF0YS1pZHg9XCIke2luZGV4fVwiIGNsYXNzPVwicm0tdGFzay1idG5cIj7inYw8L2J1dHRvbj5cbiAgICAgICAgICAgIDxidXR0b24gZGF0YS1pZHg9XCIke2luZGV4fVwiIGNsYXNzPVwiZWRpdC10YXNrLWJ0blwiPvCflok8L2J1dHRvbj5cbiAgICAgICAgICAgICR7XG4gICAgICAgICAgICAgIHByb2plY3QudHlwZSA9PT0gXCJ1c2VyXCIgfHwgXCJzdG9yZVRhc2tCdG5cIiBpbiBwcm9qZWN0XG4gICAgICAgICAgICAgICAgPyBgPGJ1dHRvbiBkYXRhLWlkeD1cIiR7aW5kZXh9XCIgY2xhc3M9XCJzdG9yZS10YXNrLWJ0blwiPjxpbWcgY2xhc3M9XCJzdG9yZS1pbWdcIiBzcmM9XCIke09wZW5ib3h9XCI+PC9idXR0b24+YFxuICAgICAgICAgICAgICAgIDogXCJcIlxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICAgICAgYDtcbiAgICAgIH0pXG4gICAgICAuam9pbihcIlwiKTtcblxuICAgIGNvbnN0IHJtQnV0dG9ucyA9IHRhc2tzTm9kZS5xdWVyeVNlbGVjdG9yQWxsKFwiLnJtLXRhc2stYnRuXCIpO1xuICAgIHJtQnV0dG9ucy5mb3JFYWNoKChidG4pID0+XG4gICAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBwYXJzZUludCh0aGlzLmRhdGFzZXQuaWR4KTtcbiAgICAgICAgY29uc3QgdGFzayA9IHRhc2tzLnNsaWNlKClbaW5kZXhdO1xuICAgICAgICByZW1vdmVUYXNrKHRhc2spO1xuICAgICAgICBwb3B1bGF0ZVRhc2tzKHRhc2tzTm9kZSwgcHJvamVjdCwgdGFza3MpO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgY29uc3QgZWRpdEJ1dHRvbnMgPSB0YXNrc05vZGUucXVlcnlTZWxlY3RvckFsbChcIi5lZGl0LXRhc2stYnRuXCIpO1xuICAgIGVkaXRCdXR0b25zLmZvckVhY2goKGJ0bikgPT5cbiAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KHRoaXMuZGF0YXNldC5pZHgpO1xuICAgICAgICBlZGl0VGFza0Zvcm0odGFza3Muc2xpY2UoKVtpbmRleF0sIHRhc2tzTm9kZSwgcHJvamVjdCwgZWRpdEZvcm0pO1xuICAgICAgfSlcbiAgICApO1xuXG4gICAgY29uc3Qgc3RvcmVCdXR0b25zID0gdGFza3NOb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIuc3RvcmUtdGFzay1idG5cIik7XG4gICAgc3RvcmVCdXR0b25zLmZvckVhY2goKGJ0bikgPT5cbiAgICAgIGJ0bi5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xuICAgICAgICBjb25zdCBpbmRleCA9IHBhcnNlSW50KHRoaXMuZGF0YXNldC5pZHgpO1xuICAgICAgICBjb25zdCB0YXNrID0gdGFza3Muc2xpY2UoKVtpbmRleF07XG4gICAgICAgIGNvbnN0IHNvbWVkYXkgPSB7IHByb2plY3Q6IFwiU29tZWRheVwiIH07XG4gICAgICAgIEV2ZW50cy5lbWl0KFwiZWRpdFRhc2tcIiwgdGFzaywgc29tZWRheSk7XG4gICAgICAgIHBvcHVsYXRlVGFza3ModGFza3NOb2RlLCBwcm9qZWN0LCB0YXNrcyk7XG4gICAgICB9KVxuICAgICk7XG5cbiAgICBjb25zdCBjaGVja2JveGVzID0gdGFza3NOb2RlLnF1ZXJ5U2VsZWN0b3JBbGwoXCIudGFzay1jaGVja2JveFwiKTtcbiAgICBjaGVja2JveGVzLmZvckVhY2goKGlucHV0KSA9PlxuICAgICAgaW5wdXQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgY29uc3QgaW5kZXggPSBwYXJzZUludCh0aGlzLmRhdGFzZXQuaWR4KTtcbiAgICAgICAgY29uc3QgdGFzayA9IHRhc2tzLnNsaWNlKClbaW5kZXhdO1xuICAgICAgICBjb25zdCBkb25lID0gIXRhc2suZG9uZTtcbiAgICAgICAgRXZlbnRzLmVtaXQoXCJlZGl0VGFza1wiLCB0YXNrLCB7IGRvbmUgfSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRUYXNrYnRuKHByb2plY3ROb2RlLCBwcm9qZWN0LCB0YXNrc05vZGUpIHtcbiAgICBjb25zdCBidG4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIpO1xuICAgIGJ0bi5jbGFzc0xpc3QuYWRkKFwiYWRkLXRhc2stYnRuXCIsIFwiYWN0aXZlXCIpO1xuICAgIGJ0bi50ZXh0Q29udGVudCA9IFwi4p6VIE5ldyBUYXNrXCI7XG4gICAgcHJvamVjdE5vZGUuYXBwZW5kQ2hpbGQoYnRuKTtcblxuICAgIGNvbnN0IGZvcm0gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZm9ybVwiKTtcbiAgICBmb3JtLmNsYXNzTGlzdC5hZGQoXCJhZGQtdGFzay1mb3JtXCIpO1xuICAgIGZvcm0uaW5uZXJIVE1MID0gYDxpbnB1dCBjbGFzcz1cImFkZC10YXNrLWlucHV0XCIgbmFtZT1cIm5ld1Rhc2tUaXRsZVwiIHR5cGU9XCJ0ZXh0XCIgcGxhY2Vob2xkZXI9XCJUYXNrIFRpdGxlXCIgdmFsdWU9XCJOZXcgVGFza1wiIHJlcXVpcmVkPmA7XG4gICAgcHJvamVjdE5vZGUuYXBwZW5kQ2hpbGQoZm9ybSk7XG5cbiAgICBidG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvcm0uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICAgIGJ0bi5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgIH0pO1xuXG4gICAgZm9ybS5hZGRFdmVudExpc3RlbmVyKFwic3VibWl0XCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICBjb25zdCB0aXRsZSA9IHRoaXMubmV3VGFza1RpdGxlLnZhbHVlO1xuICAgICAgY3JlYXRlVGFzayhwcm9qZWN0LnRpdGxlLCB0aXRsZSk7XG4gICAgICBmb3JtLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gICAgICBidG4uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICAgIHBvcHVsYXRlVGFza3ModGFza3NOb2RlLCBwcm9qZWN0LCB0YXNrcyk7XG4gICAgICB0aGlzLnJlc2V0KCk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVUYXNrKHByb2plY3QsIHRpdGxlKSB7XG4gICAgRXZlbnRzLmVtaXQoXCJjcmVhdGVUYXNrXCIsIHsgcHJvamVjdCwgdGl0bGUgfSk7XG4gICAgdXBkYXRlVGFza3MoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZVRhc2sodGFzaykge1xuICAgIEV2ZW50cy5lbWl0KFwicmVtb3ZlVGFza1wiLCB0YXNrKTtcbiAgICB1cGRhdGVUYXNrcygpO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUHJvamVjdCh0aXRsZSkge1xuICAgIEV2ZW50cy5lbWl0KFwiY3JlYXRlUHJvamVjdFwiLCB0aXRsZSk7XG4gICAgdXBkYXRlUHJvamVjdHMoKTtcbiAgICBwb3B1bGF0ZU5hdkRpdih1c2VyUHJvamVjdHNEaXYsIHVzZXJQcm9qZWN0cyk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmVQcm9qZWN0KHByb2plY3QpIHtcbiAgICBFdmVudHMuZW1pdChcInJlbW92ZVByb2plY3RcIiwgcHJvamVjdCk7XG4gICAgdXBkYXRlUHJvamVjdHMoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbW92ZURlbGV0ZWRQcm9qZWN0VGFza3MoZGVsZXRlZCwgdGFza3MpIHtcbiAgICAvLyB3aGVuIGEgcHJvamVjdCBpcyByZW1vdmVkLCByZW1vdmUgdGFza3MgdGhhdCBiZWxvbmdlZCB0byB0aGF0IHByb2plY3RcbiAgICBpZiAodGFza3MubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHRhc2tzLm1hcCgodGFzaykgPT4ge1xuICAgICAgICBpZiAodGFzay5wcm9qZWN0ICE9PSBkZWxldGVkLnRpdGxlKSByZXR1cm47XG4gICAgICAgIHJlbW92ZVRhc2sodGFzayk7XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWxUYXNrRWRpdChmb3JtKSB7XG4gICAgZm9ybS5yZXNldCgpO1xuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcImVkaXQtdGFza1wiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGVkaXRUYXNrRm9ybSh0YXNrLCB0YXNrc05vZGUsIGN1cnJlbnRQcm9qZWN0LCBlZGl0Rm9ybSkge1xuICAgIGVkaXRGb3JtLmlubmVySFRNTCA9IFwiXCI7XG4gICAgY29uc3QgYnV0dG9ucyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoXCJidXR0b25cIik7XG4gICAgYnV0dG9ucy5mb3JFYWNoKChidG4pID0+IChidG4uZGlzYWJsZWQgPSB0cnVlKSk7XG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKFwiZWRpdC10YXNrXCIpO1xuICAgIGxldCBkYXRlVmFsdWUgPSBmYWxzZTtcbiAgICBpZiAodGFzay5kYXRlKSBkYXRlVmFsdWUgPSBmb3JtYXREYXRlKHRhc2suZGF0ZSk7XG4gICAgZWRpdEZvcm0uaW5uZXJIVE1MID0gYFxuICAgICAgICA8cD5UaXRsZTogPGlucHV0IHR5cGU9XCJ0ZXh0XCIgbmFtZT1cInRpdGxlaW5wdXRcIiBwbGFjZWhvbGRlcj1cIlRpdGxlXCIgdmFsdWU9XCIke1xuICAgICAgICAgIHRhc2sudGl0bGVcbiAgICAgICAgfVwiIHJlcXVpcmVkPjwvcD5cbiAgICAgICAgPHA+UHJvamVjdDogPHNlbGVjdCBuYW1lPVwicHJvamVjdHNlbGVjdFwiPjxvcHRpb24gdmFsdWU9XCIke1xuICAgICAgICAgIHRhc2sucHJvamVjdFxuICAgICAgICB9XCI+JHt0YXNrLnByb2plY3R9PC9vcHRpb24+JHtwb3B1bGF0ZVByb2plY3RTZWxlY3QoXG4gICAgICB1c2VyUHJvamVjdHMsXG4gICAgICB0YXNrLnByb2plY3RcbiAgICApfTwvc2VsZWN0PjwvcD5cbiAgICAgICAgPHA+RHVlLWRhdGU6IDxpbnB1dCB0eXBlPVwiZGF0ZVwiIG5hbWU9XCJkYXRlaW5wdXRcIiB2YWx1ZT1cIiR7XG4gICAgICAgICAgZGF0ZVZhbHVlID8gZGF0ZVZhbHVlIDogXCJcIlxuICAgICAgICB9XCI+PC9wPlxuICAgICAgICA8ZGl2IGNsYXNzPVwic3VibWl0LWVkaXQtYnRuXCI+XG4gICAgICAgIDxidXR0b24gdHlwZT1cInN1Ym1pdFwiIG5hbWU9XCJzdWJtaXRidG5cIj5FZGl0PC9idXR0b24+XG4gICAgICAgIDxidXR0b24gbmFtZT1cImNhbmNlbGJ0blwiPkNhbmNlbDwvYnV0dG9uPlxuICAgICAgICA8L2Rpdj5gO1xuXG4gICAgZWRpdEZvcm0uYWRkRXZlbnRMaXN0ZW5lcihcInN1Ym1pdFwiLCBlZGl0VGFzayk7XG5cbiAgICBmdW5jdGlvbiBlZGl0VGFzayhlKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAvLyBpZiB1c2VyIGNhbmNlbHMgdGFzayBlZGl0aW9uXG4gICAgICBpZiAoZS5zdWJtaXR0ZXIgPT09IGVkaXRGb3JtLmNhbmNlbGJ0bikge1xuICAgICAgICBidXR0b25zLmZvckVhY2goKGJ0bikgPT4gKGJ0bi5kaXNhYmxlZCA9IGZhbHNlKSk7XG4gICAgICAgIGVkaXRGb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZWRpdFRhc2spO1xuICAgICAgICByZXR1cm4gY2FuY2VsVGFza0VkaXQoZWRpdEZvcm0pO1xuICAgICAgfVxuICAgICAgY29uc3QgdGl0bGUgPSB0aGlzLnRpdGxlaW5wdXQudmFsdWU7XG4gICAgICBjb25zdCBwcm9qZWN0ID0gdGhpcy5wcm9qZWN0c2VsZWN0LnZhbHVlO1xuICAgICAgbGV0IGRhdGUgPSB0aGlzLmRhdGVpbnB1dC52YWx1ZSB8fCBudWxsO1xuICAgICAgLy8gY2hlY2sgaWYgdXNlciBpbmNsdWRlZCBhIGRhdGVcbiAgICAgIGlmICh0eXBlb2YgZGF0ZSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICBkYXRlID0gaGFuZGxlRGF0ZUlucHV0KGRhdGUpO1xuICAgICAgICBFdmVudHMuZW1pdChcImVkaXRUYXNrXCIsIHRhc2ssIHsgdGl0bGUsIHByb2plY3QsIGRhdGUgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBFdmVudHMuZW1pdChcImVkaXRUYXNrXCIsIHRhc2ssIHsgdGl0bGUsIHByb2plY3QgfSk7XG4gICAgICB9XG4gICAgICBwb3B1bGF0ZVRhc2tzKHRhc2tzTm9kZSwgY3VycmVudFByb2plY3QsIHRhc2tzKTtcbiAgICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZShcImVkaXQtdGFza1wiKTtcbiAgICAgIGJ1dHRvbnMuZm9yRWFjaCgoYnRuKSA9PiAoYnRuLmRpc2FibGVkID0gZmFsc2UpKTtcbiAgICAgIGVkaXRGb3JtLnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZWRpdFRhc2spO1xuICAgIH1cbiAgICBlZGl0Rm9ybS5yZXNldCgpO1xuICB9XG5cbiAgZnVuY3Rpb24gcG9wdWxhdGVQcm9qZWN0U2VsZWN0KHByb2plY3RzLCBjdXJyZW50KSB7XG4gICAgcmV0dXJuIHByb2plY3RzXG4gICAgICAubWFwKChwcm9qZWN0KSA9PiB7XG4gICAgICAgIGlmIChwcm9qZWN0LnRpdGxlID09PSBjdXJyZW50KSByZXR1cm47XG4gICAgICAgIHJldHVybiBgPG9wdGlvbiB2YWx1ZT1cIiR7cHJvamVjdC50aXRsZX1cIj4ke3Byb2plY3QudGl0bGV9PC9vcHRpb24+YDtcbiAgICAgIH0pXG4gICAgICAuam9pbihcIlwiKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZURhdGVJbnB1dChkYXRlKSB7XG4gICAgLy8gYnJvd3NlciBpbnB1dCBkYXRlIGRhdGEgY29tZXMgaW4gdGhpcyBmb3JtYXQ6ICcyMDIxLTA4LTA3JyAvLyBTdHJpbmdcbiAgICAvLyB3aGVuIGNvbnZlcnRpbmcgdGhhdCBpbnRvIGEgZGF0ZSBvYmplY3QgdGhlIHJlc3VsdCBpcyBmcm9tIGEgZGF5IGJlZm9yZTogbmV3IERhdGUoJzIwMjEtMDgtMDcnKSAvLyBGcmkgQXVnIDA2IDIwMjEgLi4uXG4gICAgLy8gY2hhbmdpbmcgZm9ybWF0IHRvICcyMDIxLDA4LDA3JyBmaXhlcyB0aGlzOiBuZXcgRGF0ZSgnMjAyMSwwOCwwNycpIC8vIFNhdCBBdWcgMDcgMjAyMSAuLi5cbiAgICByZXR1cm4gbmV3IERhdGUoZGF0ZS5yZXBsYWNlQWxsKFwiLVwiLCBcIixcIikpO1xuICB9XG5cbiAgZnVuY3Rpb24gZm9ybWF0RGF0ZShkYXRlKSB7XG4gICAgcmV0dXJuIGZvcm1hdChkYXRlLCBcInl5eXktTU0tZGRcIik7XG4gIH1cblxuICBmdW5jdGlvbiBtb3ZpbGVOYXZFbnRlcihuYXZOb2RlKSB7XG4gICAgbmF2T3BlbiA9ICFuYXZPcGVuO1xuICAgIG5hdk5vZGUuY2xhc3NMaXN0LmFkZCgnbmF2LWVudGVyJyk7XG4gICAgc2V0VGltZW91dCgoKSA9PiBuYXZOb2RlLmNsYXNzTGlzdC5jb250YWlucygnbmF2LWVudGVyJykgJiYgbmF2Tm9kZS5jbGFzc0xpc3QuYWRkKCduYXYtZW50ZXItYWN0aXZlJyksIDE1MCk7XG4gIH1cblxuICBmdW5jdGlvbiBtb3ZpbGVOYXZMZWF2ZShuYXZOb2RlKSB7XG4gICAgbmF2T3BlbiA9ICFuYXZPcGVuO1xuICAgIG5hdk5vZGUuY2xhc3NMaXN0LnJlbW92ZSgnbmF2LWVudGVyJyk7XG4gICAgbmF2Tm9kZS5jbGFzc0xpc3QucmVtb3ZlKCduYXYtZW50ZXItYWN0aXZlJyk7XG59XG4gIGFkZFByb2plY3RCdG4uYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIGZ1bmN0aW9uIChlKSB7XG4gICAgcHJvamVjdEZvcm0uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICBhZGRQcm9qZWN0QnRuLmNsYXNzTGlzdC5yZW1vdmUoXCJhY3RpdmVcIik7XG4gIH0pO1xuXG4gIHByb2plY3RGb3JtLmFkZEV2ZW50TGlzdGVuZXIoXCJzdWJtaXRcIiwgZnVuY3Rpb24gKGUpIHtcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgY29uc3QgdGl0bGUgPSB0aGlzLm5ld1Byb2plY3RUaXRsZS52YWx1ZTtcbiAgICBjcmVhdGVQcm9qZWN0KHRpdGxlKTtcbiAgICBwcm9qZWN0Rm9ybS5jbGFzc0xpc3QucmVtb3ZlKFwiYWN0aXZlXCIpO1xuICAgIGFkZFByb2plY3RCdG4uY2xhc3NMaXN0LmFkZChcImFjdGl2ZVwiKTtcbiAgICB0aGlzLnJlc2V0KCk7XG4gIH0pO1xuXG4gIGRpc3BsYXlOYXZCdG4uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB7XG4gICAgaWYgKG5hdk9wZW4pIHtcbiAgICAgIG1vdmlsZU5hdkxlYXZlKG5hdik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG1vdmlsZU5hdkVudGVyKG5hdik7XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4ge307XG59KSgpOyJdLCJuYW1lcyI6WyJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsInB1c2giLCJtb2R1bGUiLCJpZCIsImV4cG9ydHMiLCJjc3NXaXRoTWFwcGluZ1RvU3RyaW5nIiwibGlzdCIsInRvU3RyaW5nIiwidGhpcyIsIm1hcCIsIml0ZW0iLCJjb250ZW50IiwiY29uY2F0Iiwiam9pbiIsImkiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJsZW5ndGgiLCJfaSIsIl9hcnJheUxpa2VUb0FycmF5IiwiYXJyIiwibGVuIiwiYXJyMiIsIkFycmF5IiwiX2l0ZW0iLCJpc0FycmF5IiwiX2FycmF5V2l0aEhvbGVzIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJfcyIsIl9lIiwiX2FyciIsIl9uIiwiX2QiLCJjYWxsIiwibmV4dCIsImRvbmUiLCJ2YWx1ZSIsImVyciIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm8iLCJtaW5MZW4iLCJuIiwiT2JqZWN0IiwicHJvdG90eXBlIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJmcm9tIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290Iiwic3R5bGVzSW5Eb20iLCJnZXRJbmRleEJ5SWRlbnRpZmllciIsImlkZW50aWZpZXIiLCJyZXN1bHQiLCJtb2R1bGVzVG9Eb20iLCJvcHRpb25zIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXgiLCJvYmoiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4Iiwic3BsaWNlIiwibWVtbyIsImluc2VydCIsInN0eWxlIiwidGFyZ2V0Iiwic3R5bGVUYXJnZXQiLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJ3aW5kb3ciLCJIVE1MSUZyYW1lRWxlbWVudCIsImNvbnRlbnREb2N1bWVudCIsImhlYWQiLCJlIiwiZ2V0VGFyZ2V0IiwiRXJyb3IiLCJhcHBlbmRDaGlsZCIsImNyZWF0ZUVsZW1lbnQiLCJzZXRBdHRyaWJ1dGVzIiwiYXR0cmlidXRlcyIsIm5vbmNlIiwic2V0QXR0cmlidXRlIiwiaW5zZXJ0U3R5bGVFbGVtZW50IiwicmVtb3ZlQXR0cmlidXRlIiwic3R5bGVUYWdUcmFuc2Zvcm0iLCJhcHBseSIsInBhcmVudE5vZGUiLCJyZW1vdmVDaGlsZCIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiX193ZWJwYWNrX21vZHVsZXNfXyIsImdldHRlciIsIl9fZXNNb2R1bGUiLCJkIiwiYSIsImRlZmluaXRpb24iLCJrZXkiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsImhhc093blByb3BlcnR5Iiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImxvY2F0aW9uIiwiY3VycmVudFNjcmlwdCIsInNyYyIsInNjcmlwdHMiLCJnZXRFbGVtZW50c0J5VGFnTmFtZSIsInJlcGxhY2UiLCJwIiwiZXZlbnRzIiwib24iLCJldmVudE5hbWUiLCJmbiIsIm9mZiIsImVtaXQiLCJ4IiwiYXJndW1lbnRzIiwiZm9yRWFjaCIsInRvSW50ZWdlciIsImRpcnR5TnVtYmVyIiwiTmFOIiwibnVtYmVyIiwiTnVtYmVyIiwiaXNOYU4iLCJNYXRoIiwiY2VpbCIsImZsb29yIiwicmVxdWlyZWRBcmdzIiwicmVxdWlyZWQiLCJhcmdzIiwidG9EYXRlIiwiYXJndW1lbnQiLCJhcmdTdHIiLCJEYXRlIiwiZ2V0VGltZSIsImNvbnNvbGUiLCJ3YXJuIiwic3RhY2siLCJhZGREYXlzIiwiZGlydHlEYXRlIiwiZGlydHlBbW91bnQiLCJkYXRlIiwiYW1vdW50Iiwic2V0RGF0ZSIsImdldERhdGUiLCJzdWJEYXlzIiwiZ2V0VGltZXpvbmVPZmZzZXRJbk1pbGxpc2Vjb25kcyIsInV0Y0RhdGUiLCJVVEMiLCJnZXRGdWxsWWVhciIsImdldE1vbnRoIiwiZ2V0SG91cnMiLCJnZXRNaW51dGVzIiwiZ2V0U2Vjb25kcyIsImdldE1pbGxpc2Vjb25kcyIsInNldFVUQ0Z1bGxZZWFyIiwic3RhcnRPZkRheSIsInNldEhvdXJzIiwiTUlMTElTRUNPTkRTX0lOX0RBWSIsImRpZmZlcmVuY2VJbkNhbGVuZGFyRGF5cyIsImRpcnR5RGF0ZUxlZnQiLCJkaXJ0eURhdGVSaWdodCIsInN0YXJ0T2ZEYXlMZWZ0Iiwic3RhcnRPZkRheVJpZ2h0IiwidGltZXN0YW1wTGVmdCIsInRpbWVzdGFtcFJpZ2h0Iiwicm91bmQiLCJnZXREYXkiLCJkYXkiLCJuZXh0RGF5IiwiZGVsdGEiLCJzdGFydE9mV2VlayIsImRpcnR5T3B0aW9ucyIsImxvY2FsZSIsImxvY2FsZVdlZWtTdGFydHNPbiIsIndlZWtTdGFydHNPbiIsImRlZmF1bHRXZWVrU3RhcnRzT24iLCJSYW5nZUVycm9yIiwiZGlmZiIsIk1JTExJU0VDT05EU19JTl9XRUVLIiwiaXNWYWxpZCIsInByb2plY3RGYWN0b3J5IiwidGl0bGUiLCJpY29uIiwidXNlclByb2plY3RzIiwiZ2V0UmVwZXRpdGlvbnMiLCJyZWR1Y2UiLCJwcm9qZWN0IiwidXBkYXRlVGl0bGUiLCJwcm9qZWN0VGl0bGUiLCJuZXdUaXRsZSIsImRpc3BsYXlSdWxlIiwidGFzayIsInR5cGUiLCJDT1JFUFJPSkVDVFMiLCJzdG9yZVRhc2tCdG4iLCJhZGRUYXNrQnRuIiwibmV4dFN1bmRheSIsInN0YXJ0T2ZXZWVrTGVmdCIsInN0YXJ0T2ZXZWVrUmlnaHQiLCJkaWZmZXJlbmNlSW5DYWxlbmRhcldlZWtzIiwibG9jYWxQcm9qZWN0cyIsInBhcnNlIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImFkZFByb2plY3QiLCJzZXRJdGVtIiwicHJvamVjdHMiLCJmaW5kSW5kZXgiLCJmb3JtYXREaXN0YW5jZUxvY2FsZSIsImxlc3NUaGFuWFNlY29uZHMiLCJvbmUiLCJvdGhlciIsInhTZWNvbmRzIiwiaGFsZkFNaW51dGUiLCJsZXNzVGhhblhNaW51dGVzIiwieE1pbnV0ZXMiLCJhYm91dFhIb3VycyIsInhIb3VycyIsInhEYXlzIiwiYWJvdXRYV2Vla3MiLCJ4V2Vla3MiLCJhYm91dFhNb250aHMiLCJ4TW9udGhzIiwiYWJvdXRYWWVhcnMiLCJ4WWVhcnMiLCJvdmVyWFllYXJzIiwiYWxtb3N0WFllYXJzIiwiYnVpbGRGb3JtYXRMb25nRm4iLCJ3aWR0aCIsIlN0cmluZyIsImRlZmF1bHRXaWR0aCIsImZvcm1hdCIsImZvcm1hdHMiLCJmb3JtYXRMb25nIiwiZnVsbCIsImxvbmciLCJtZWRpdW0iLCJzaG9ydCIsInRpbWUiLCJkYXRlVGltZSIsImZvcm1hdFJlbGF0aXZlTG9jYWxlIiwibGFzdFdlZWsiLCJ5ZXN0ZXJkYXkiLCJ0b2RheSIsInRvbW9ycm93IiwibmV4dFdlZWsiLCJidWlsZExvY2FsaXplRm4iLCJkaXJ0eUluZGV4IiwidmFsdWVzQXJyYXkiLCJjb250ZXh0IiwiZm9ybWF0dGluZ1ZhbHVlcyIsImRlZmF1bHRGb3JtYXR0aW5nV2lkdGgiLCJfZGVmYXVsdFdpZHRoIiwiX3dpZHRoIiwidmFsdWVzIiwiYXJndW1lbnRDYWxsYmFjayIsImJ1aWxkTWF0Y2hGbiIsInN0cmluZyIsIm1hdGNoUGF0dGVybiIsIm1hdGNoUGF0dGVybnMiLCJkZWZhdWx0TWF0Y2hXaWR0aCIsIm1hdGNoUmVzdWx0IiwibWF0Y2giLCJtYXRjaGVkU3RyaW5nIiwicGFyc2VQYXR0ZXJucyIsImRlZmF1bHRQYXJzZVdpZHRoIiwicGF0dGVybiIsImZpbmRLZXkiLCJ2YWx1ZUNhbGxiYWNrIiwicmVzdCIsIm9iamVjdCIsInByZWRpY2F0ZSIsImFycmF5IiwiY29kZSIsImZvcm1hdERpc3RhbmNlIiwidG9rZW4iLCJhZGRTdWZmaXgiLCJjb21wYXJpc29uIiwiZm9ybWF0UmVsYXRpdmUiLCJfZGF0ZSIsIl9iYXNlRGF0ZSIsIl9vcHRpb25zIiwibG9jYWxpemUiLCJvcmRpbmFsTnVtYmVyIiwiX2RpcnR5T3B0aW9ucyIsInJlbTEwMCIsImVyYSIsIm5hcnJvdyIsImFiYnJldmlhdGVkIiwid2lkZSIsInF1YXJ0ZXIiLCJtb250aCIsImRheVBlcmlvZCIsImFtIiwicG0iLCJtaWRuaWdodCIsIm5vb24iLCJtb3JuaW5nIiwiYWZ0ZXJub29uIiwiZXZlbmluZyIsIm5pZ2h0IiwicGFyc2VQYXR0ZXJuIiwicGFyc2VJbnQiLCJwYXJzZVJlc3VsdCIsImFueSIsImZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImFkZE1pbGxpc2Vjb25kcyIsInRpbWVzdGFtcCIsInN1Yk1pbGxpc2Vjb25kcyIsImFkZExlYWRpbmdaZXJvcyIsInRhcmdldExlbmd0aCIsInNpZ24iLCJvdXRwdXQiLCJhYnMiLCJzaWduZWRZZWFyIiwiZ2V0VVRDRnVsbFllYXIiLCJ5ZWFyIiwiZ2V0VVRDTW9udGgiLCJnZXRVVENEYXRlIiwiZ2V0VVRDSG91cnMiLCJnZXRVVENNaW51dGVzIiwiZ2V0VVRDU2Vjb25kcyIsIm51bWJlck9mRGlnaXRzIiwibWlsbGlzZWNvbmRzIiwiZ2V0VVRDTWlsbGlzZWNvbmRzIiwicG93Iiwic3RhcnRPZlVUQ0lTT1dlZWsiLCJnZXRVVENEYXkiLCJzZXRVVENEYXRlIiwic2V0VVRDSG91cnMiLCJnZXRVVENJU09XZWVrWWVhciIsImZvdXJ0aE9mSmFudWFyeU9mTmV4dFllYXIiLCJzdGFydE9mTmV4dFllYXIiLCJmb3VydGhPZkphbnVhcnlPZlRoaXNZZWFyIiwic3RhcnRPZlRoaXNZZWFyIiwic3RhcnRPZlVUQ0lTT1dlZWtZZWFyIiwiZm91cnRoT2ZKYW51YXJ5Iiwic3RhcnRPZlVUQ1dlZWsiLCJnZXRVVENXZWVrWWVhciIsImxvY2FsZUZpcnN0V2Vla0NvbnRhaW5zRGF0ZSIsImRlZmF1bHRGaXJzdFdlZWtDb250YWluc0RhdGUiLCJmaXJzdFdlZWtPZk5leHRZZWFyIiwiZmlyc3RXZWVrT2ZUaGlzWWVhciIsInN0YXJ0T2ZVVENXZWVrWWVhciIsImZpcnN0V2VlayIsImZvcm1hdFRpbWV6b25lU2hvcnQiLCJvZmZzZXQiLCJkaXJ0eURlbGltaXRlciIsImFic09mZnNldCIsImhvdXJzIiwibWludXRlcyIsImRlbGltaXRlciIsImZvcm1hdFRpbWV6b25lV2l0aE9wdGlvbmFsTWludXRlcyIsImZvcm1hdFRpbWV6b25lIiwiRyIsInkiLCJ1bml0IiwibGlnaHRGb3JtYXR0ZXJzIiwiWSIsInNpZ25lZFdlZWtZZWFyIiwid2Vla1llYXIiLCJSIiwidSIsIlEiLCJxIiwiTSIsIkwiLCJ3Iiwid2VlayIsImdldFVUQ1dlZWsiLCJJIiwiaXNvV2VlayIsImdldFVUQ0lTT1dlZWsiLCJEIiwiZGF5T2ZZZWFyIiwic2V0VVRDTW9udGgiLCJzdGFydE9mWWVhclRpbWVzdGFtcCIsImRpZmZlcmVuY2UiLCJnZXRVVENEYXlPZlllYXIiLCJFIiwiZGF5T2ZXZWVrIiwibG9jYWxEYXlPZldlZWsiLCJjIiwiaXNvRGF5T2ZXZWVrIiwiZGF5UGVyaW9kRW51bVZhbHVlIiwidG9Mb3dlckNhc2UiLCJiIiwiQiIsImgiLCJIIiwiSyIsImsiLCJtIiwicyIsIlMiLCJYIiwiX2xvY2FsaXplIiwidGltZXpvbmVPZmZzZXQiLCJfb3JpZ2luYWxEYXRlIiwiZ2V0VGltZXpvbmVPZmZzZXQiLCJPIiwieiIsInQiLCJvcmlnaW5hbERhdGUiLCJUIiwiZGF0ZUxvbmdGb3JtYXR0ZXIiLCJ0aW1lTG9uZ0Zvcm1hdHRlciIsIlAiLCJkYXRlVGltZUZvcm1hdCIsImRhdGVQYXR0ZXJuIiwidGltZVBhdHRlcm4iLCJwcm90ZWN0ZWREYXlPZlllYXJUb2tlbnMiLCJwcm90ZWN0ZWRXZWVrWWVhclRva2VucyIsImlzUHJvdGVjdGVkRGF5T2ZZZWFyVG9rZW4iLCJpbmRleE9mIiwiaXNQcm90ZWN0ZWRXZWVrWWVhclRva2VuIiwidGhyb3dQcm90ZWN0ZWRFcnJvciIsImlucHV0IiwiZm9ybWF0dGluZ1Rva2Vuc1JlZ0V4cCIsImxvbmdGb3JtYXR0aW5nVG9rZW5zUmVnRXhwIiwiZXNjYXBlZFN0cmluZ1JlZ0V4cCIsImRvdWJsZVF1b3RlUmVnRXhwIiwidW5lc2NhcGVkTGF0aW5DaGFyYWN0ZXJSZWdFeHAiLCJkaXJ0eUZvcm1hdFN0ciIsImZvcm1hdFN0ciIsImZvcm1hdHRlck9wdGlvbnMiLCJzdWJzdHJpbmciLCJmaXJzdENoYXJhY3RlciIsImxvbmdGb3JtYXR0ZXIiLCJjbGVhbkVzY2FwZWRTdHJpbmciLCJmb3JtYXR0ZXIiLCJ1c2VBZGRpdGlvbmFsV2Vla1llYXJUb2tlbnMiLCJ1c2VBZGRpdGlvbmFsRGF5T2ZZZWFyVG9rZW5zIiwidGFza0ZhY3RvcnkiLCJwYXJ0cyIsInBhcnNlSlNPTiIsImZvcm1hdERhdGUiLCJ0YXNrcyIsImFkZFRhc2siLCJ0YXNrSW5kZXgiLCJhc3NpZ24iLCJjb3JlUHJvamVjdHMiLCJuYXZPcGVuIiwiaGVhZGVyIiwiYm9keSIsImRpc3BsYXlOYXZCdG4iLCJ0ZXh0Q29udGVudCIsImNsYXNzTGlzdCIsImFkZCIsIm5hdiIsImNvcmVQcm9qZWN0c0RpdiIsIm15UHJvamVjdHNIZWFkaW5nIiwidXNlclByb2plY3RzRGl2IiwiYWRkUHJvamVjdEJ0biIsInByb2plY3RGb3JtIiwiaW5uZXJIVE1MIiwicHJvamVjdERpdiIsImVkaXRGb3JtIiwidXBkYXRlVGFza3MiLCJ1cGRhdGVQcm9qZWN0cyIsInBvcHVsYXRlTmF2RGl2Iiwibm9kZSIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJidG4iLCJhZGRFdmVudExpc3RlbmVyIiwiZGF0YXNldCIsImlkeCIsInBvcHVsYXRlUHJvamVjdCIsImRlbGV0ZVByb2plY3QiLCJkZWxldGVkIiwicmVtb3ZlVGFzayIsInJlbW92ZURlbGV0ZWRQcm9qZWN0VGFza3MiLCJwcm9qZWN0Tm9kZSIsInRhc2tzRGl2IiwicG9wdWxhdGVUYXNrcyIsInRhc2tzTm9kZSIsImZvcm0iLCJwcmV2ZW50RGVmYXVsdCIsIm5ld1Rhc2tUaXRsZSIsImNyZWF0ZVRhc2siLCJyZXNldCIsImFkZFRhc2tidG4iLCJ0YXNrc0FyciIsImN1cnJlbnRQcm9qZWN0IiwiYnV0dG9ucyIsImRpc2FibGVkIiwiZGF0ZVZhbHVlIiwiY3VycmVudCIsImVkaXRUYXNrIiwic3VibWl0dGVyIiwiY2FuY2VsYnRuIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInRpdGxlaW5wdXQiLCJwcm9qZWN0c2VsZWN0IiwiZGF0ZWlucHV0IiwicmVwbGFjZUFsbCIsImhhbmRsZURhdGVJbnB1dCIsImVkaXRUYXNrRm9ybSIsIm5ld1Byb2plY3RUaXRsZSIsIm5hdk5vZGUiLCJzZXRUaW1lb3V0IiwiY29udGFpbnMiLCJtb3ZpbGVOYXZFbnRlciJdLCJzb3VyY2VSb290IjoiIn0=