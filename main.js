(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>c});var r=e(15),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,'html {\n    min-height: 100%;\n    font-size: 50%;\n    line-height: 1.5;\n}\n\nbody {\n    margin: 0;\n    background-color: #FCF6BD;;\n}\n\nbody.edit-task .edit-form {\n    display: flex;\n    visibility: visible;\n    opacity: 1;\n}\n\nheader {\n    display: none;\n    opacity: 0;\n    position: absolute;\n}\n\n#content {\n    display: flex;\n    min-height: 100vh;\n    font-size: 3em;\n}\n\nnav {\n    flex: 1;\n    max-width: 300px;\n    background-color: #FCF6BD;\n    background-color: #D0F4DE;\n    display: flex;\n    flex-direction: column;\n}\n\n.myprojects-heading {\n    align-self: center;\n    font-size: 1.2em;\n}\n\n.project-icon {\n    width: 8%;\n    height: 100%;\n}\n\n.nav-project-btn {\n    max-width: 100%;\n    flex: 1;\n    background-color: transparent;\n    border: none;\n    text-align: start;\n    font-size: 0.8em;\n    cursor: pointer;\n}\n\n.rm-project-btn {\n    max-width: 100%;\n    flex: 0.2;\n    background-color: transparent;\n    border: none;\n    color: red;\n    font-size: 0.8em;\n    cursor: pointer;\n}\n\n.core-projects {\n    display: flex;\n    flex-direction: column;\n    padding-top: 10px;\n}\n\n.user-projects {\n    display: flex;\n    flex-direction: column;\n    padding-top: 10px;\n}\n\n.user-project-nav {\n    display: flex;\n    padding-left: 20px;\n}\n\n.core-project-nav {\n    width: 100%;\n    display: flex;\n    padding-top: 10px;\n    padding-left: 20px;\n    background-color: #D0F4DE;\n}\n\n.core-project-nav:hover {\n    background-color: #D0F4DE;\n    background-color: #6bfca0\n}\n\n.user-project-nav:hover {\n    background-color: #6bfca0\n}\n\n.add-project.active {\n    display: block;\n    align-self: center;\n    margin-top: 10px;\n    cursor: pointer;\n    width: 50%;\n}\n\n.add-project {\n    display: none;\n}\n\n.add-project-form {\n    display: none;\n}\n\n.add-project-form.active {\n    display: block;\n    width: 50%;\n    align-self: center;\n}\n\n.add-project-input {\n    width: 100%;\n}\n\n.project {\n    flex: 3;\n    background-color: #D0F4DE;\n    background-color: #FCF6BD;\n    display: flex;\n    flex-direction: column;\n    padding-left: 50px;\n}\n\n\n.project-tasks {\n    display: flex;\n    flex-direction: column;\n}\n\n.task {\n    display: flex;\n    text-align: center;\n    align-items: center;\n}\n\n.task input {\n    display: none;\n}\n\n.task input + div:before {\n    content: "○";\n    margin-right: 10px;\n    align-self: center;\n    font-size: 2em;\n  }\n  \n.task input:checked + div:before {\n    content: "✔";\n}\n\n.task input:checked + div p {\n    text-decoration: line-through;\n}\n\n.task-title-date {\n    display: flex;\n    padding-left: 5px;\n    padding-right: 5px;\n    flex: 1;\n    text-align: center;\n}\n\n.task-title {\n    text-align: center;\n    padding-left: 5px;\n}\n\n.task-date{\n    padding-right: 5px;\n    background-color: #b8b1715e;\n    padding-left: 5px;\n}\n\n.task-btns {\n    display: inline;\n    text-align: center;\n    justify-self: center;\n    align-self: center;\n    flex: 1;\n}\n\n.rm-task-btn {\n    background-color: transparent;\n    border: none;\n    color: red;\n    font-size: 1em;\n    cursor: pointer;\n}\n\n.edit-task-btn {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n    font-size: 1em;\n}\n\n.store-task-btn {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n}\n\n.add-task-btn.active {\n    display: block;\n    align-self: center;\n    width: 25%;\n}\n\n.add-task-btn {\n    display: none;\n}\n\n.add-task-form.active {\n    display: block;\n    align-self: center;\n    width: 25%;\n}\n\n.add-task-form {\n    display: none;\n}\n\n.add-task-input {\n    width: 100%;\n    align-self: center;\n    padding-left: 10px;\n}\n\n.edit-form {\n    visibility: hidden;\n    opacity: 0;\n    min-height: 100%;\n    width: 300px;\n    background-color: #A9DEF9;\n    flex-direction: column;\n    justify-content: space-around;\n    padding-left: 20px;\n    box-sizing: border-box;\n    padding-right: 20px;\n}\n\n\n.submit-edit-btn {\n    align-self: center;\n}\n\n\n.submit-edit-btn  button {\n    cursor: pointer;\n}\n\n@media (max-width: 1000px) {\n\n    html {\n        font-size: 80%;\n    }\n\n    body {\n        margin: 0;\n        min-width: 100%;\n        display: flex;\n        flex-direction: column;\n    }\n\n    #content {\n        flex-direction: column;\n        min-width: 100vw;\n        overflow: hidden;\n    }\n\n    header {\n        display: block;\n        position: relative;\n        opacity: 1;\n        min-width: 100vw;\n        display: flex;\n        background-color: black;\n    }\n\n    .button-nav-open {\n        max-width: 4em;\n        max-height: 4em;\n        text-align: center;\n        font-size: 15em;\n        color: white;\n        background-color: transparent;\n        border: none;\n        padding: 0;\n        padding-left: 50px;\n    }\n\n    nav {\n        max-width: none;\n        min-width: 100vw;\n        display: none;\n        opacity: 0;\n    }  \n\n    .nav-enter {\n        display: flex;\n    }\n    \n    .nav-enter-active {\n        opacity: 1;\n    }\n\n    .project-icon {\n        font-size: 5em;\n        width: 0.5em;\n    }\n\n    .nav-project-btn {\n        font-size: 1.5em;\n        padding-left: 10px;\n        padding-top: 12px;\n    }\n\n    .core-project-nav {\n        padding-top: 20px;\n        padding-bottom: 20px;\n    }\n\n    .myprojects-heading {\n        font-size: 2.2em;\n    }\n\n    .user-projects {\n        flex: 1;\n    }\n\n    .add-project.active {\n        margin-top: 40px;\n        width: 100%;\n        font-size: 2em;\n        flex: 0.5;\n    }\n\n    .add-project-form.active {\n        margin-top: 40px;\n        display: flex;\n        width: 100%;\n        flex: 1;\n    }\n\n    .add-project-input {\n    width: 100%;\n    font-size: 2em;\n    }\n\n    h1 {\n       font-size: 3em;\n       flex: 0.1;\n       max-height: 10vh;\n    }\n\n    .project-tasks {\n        flex: 3;\n        max-height: 60vh;\n        overflow: scroll;\n    }\n\n    .task {\n        font-size: 2em;\n    }\n\n    .store-img {\n        font-size: 2em;\n        width: 2em;\n        height: 2em;\n    }\n\n    .add-task-btn.active {\n        width: 50%;\n        flex: 1;\n        font-size: 2em;\n        max-height: 10vh;\n        margin-top: 30px\n    }\n\n    .add-task-form.active {\n        width: 50%;\n        flex: 1;\n        margin-top: 30px\n    }\n\n    .add-task-input {\n        font-size: 2em;\n        height: 3em;\n    }\n\n    body.edit-task .edit-form {\n        position: absolute;\n        width: 100%;\n        justify-content: flex-start;\n        padding-top: 40px;\n    }\n\n    form.edit-form p {\n        font-size: 3em;\n        margin-bottom: 0;\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        max-height: 22vh;\n        margin: 0;\n    }\n\n    form.edit-form > p > input {\n        font-size: 1em;\n    }\n\n    select {\n        font-size: 1em;\n    }\n\n    .submit-edit-btn {\n        flex: 1;\n        max-height: 15vh;\n        width: 100%;\n        display: flex;\n        justify-content: center;\n    }\n\n    .submit-edit-btn button {\n        flex: 1;\n        font-size: 2em;\n    }\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['html {\n    min-height: 100%;\n    font-size: 50%;\n    line-height: 1.5;\n}\n\nbody {\n    margin: 0;\n    background-color: #FCF6BD;;\n}\n\nbody.edit-task .edit-form {\n    display: flex;\n    visibility: visible;\n    opacity: 1;\n}\n\nheader {\n    display: none;\n    opacity: 0;\n    position: absolute;\n}\n\n#content {\n    display: flex;\n    min-height: 100vh;\n    font-size: 3em;\n}\n\nnav {\n    flex: 1;\n    max-width: 300px;\n    background-color: #FCF6BD;\n    background-color: #D0F4DE;\n    display: flex;\n    flex-direction: column;\n}\n\n.myprojects-heading {\n    align-self: center;\n    font-size: 1.2em;\n}\n\n.project-icon {\n    width: 8%;\n    height: 100%;\n}\n\n.nav-project-btn {\n    max-width: 100%;\n    flex: 1;\n    background-color: transparent;\n    border: none;\n    text-align: start;\n    font-size: 0.8em;\n    cursor: pointer;\n}\n\n.rm-project-btn {\n    max-width: 100%;\n    flex: 0.2;\n    background-color: transparent;\n    border: none;\n    color: red;\n    font-size: 0.8em;\n    cursor: pointer;\n}\n\n.core-projects {\n    display: flex;\n    flex-direction: column;\n    padding-top: 10px;\n}\n\n.user-projects {\n    display: flex;\n    flex-direction: column;\n    padding-top: 10px;\n}\n\n.user-project-nav {\n    display: flex;\n    padding-left: 20px;\n}\n\n.core-project-nav {\n    width: 100%;\n    display: flex;\n    padding-top: 10px;\n    padding-left: 20px;\n    background-color: #D0F4DE;\n}\n\n.core-project-nav:hover {\n    background-color: #D0F4DE;\n    background-color: #6bfca0\n}\n\n.user-project-nav:hover {\n    background-color: #6bfca0\n}\n\n.add-project.active {\n    display: block;\n    align-self: center;\n    margin-top: 10px;\n    cursor: pointer;\n    width: 50%;\n}\n\n.add-project {\n    display: none;\n}\n\n.add-project-form {\n    display: none;\n}\n\n.add-project-form.active {\n    display: block;\n    width: 50%;\n    align-self: center;\n}\n\n.add-project-input {\n    width: 100%;\n}\n\n.project {\n    flex: 3;\n    background-color: #D0F4DE;\n    background-color: #FCF6BD;\n    display: flex;\n    flex-direction: column;\n    padding-left: 50px;\n}\n\n\n.project-tasks {\n    display: flex;\n    flex-direction: column;\n}\n\n.task {\n    display: flex;\n    text-align: center;\n    align-items: center;\n}\n\n.task input {\n    display: none;\n}\n\n.task input + div:before {\n    content: "○";\n    margin-right: 10px;\n    align-self: center;\n    font-size: 2em;\n  }\n  \n.task input:checked + div:before {\n    content: "✔";\n}\n\n.task input:checked + div p {\n    text-decoration: line-through;\n}\n\n.task-title-date {\n    display: flex;\n    padding-left: 5px;\n    padding-right: 5px;\n    flex: 1;\n    text-align: center;\n}\n\n.task-title {\n    text-align: center;\n    padding-left: 5px;\n}\n\n.task-date{\n    padding-right: 5px;\n    background-color: #b8b1715e;\n    padding-left: 5px;\n}\n\n.task-btns {\n    display: inline;\n    text-align: center;\n    justify-self: center;\n    align-self: center;\n    flex: 1;\n}\n\n.rm-task-btn {\n    background-color: transparent;\n    border: none;\n    color: red;\n    font-size: 1em;\n    cursor: pointer;\n}\n\n.edit-task-btn {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n    font-size: 1em;\n}\n\n.store-task-btn {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n}\n\n.add-task-btn.active {\n    display: block;\n    align-self: center;\n    width: 25%;\n}\n\n.add-task-btn {\n    display: none;\n}\n\n.add-task-form.active {\n    display: block;\n    align-self: center;\n    width: 25%;\n}\n\n.add-task-form {\n    display: none;\n}\n\n.add-task-input {\n    width: 100%;\n    align-self: center;\n    padding-left: 10px;\n}\n\n.edit-form {\n    visibility: hidden;\n    opacity: 0;\n    min-height: 100%;\n    width: 300px;\n    background-color: #A9DEF9;\n    flex-direction: column;\n    justify-content: space-around;\n    padding-left: 20px;\n    box-sizing: border-box;\n    padding-right: 20px;\n}\n\n\n.submit-edit-btn {\n    align-self: center;\n}\n\n\n.submit-edit-btn  button {\n    cursor: pointer;\n}\n\n@media (max-width: 1000px) {\n\n    html {\n        font-size: 80%;\n    }\n\n    body {\n        margin: 0;\n        min-width: 100%;\n        display: flex;\n        flex-direction: column;\n    }\n\n    #content {\n        flex-direction: column;\n        min-width: 100vw;\n        overflow: hidden;\n    }\n\n    header {\n        display: block;\n        position: relative;\n        opacity: 1;\n        min-width: 100vw;\n        display: flex;\n        background-color: black;\n    }\n\n    .button-nav-open {\n        max-width: 4em;\n        max-height: 4em;\n        text-align: center;\n        font-size: 15em;\n        color: white;\n        background-color: transparent;\n        border: none;\n        padding: 0;\n        padding-left: 50px;\n    }\n\n    nav {\n        max-width: none;\n        min-width: 100vw;\n        display: none;\n        opacity: 0;\n    }  \n\n    .nav-enter {\n        display: flex;\n    }\n    \n    .nav-enter-active {\n        opacity: 1;\n    }\n\n    .project-icon {\n        font-size: 5em;\n        width: 0.5em;\n    }\n\n    .nav-project-btn {\n        font-size: 1.5em;\n        padding-left: 10px;\n        padding-top: 12px;\n    }\n\n    .core-project-nav {\n        padding-top: 20px;\n        padding-bottom: 20px;\n    }\n\n    .myprojects-heading {\n        font-size: 2.2em;\n    }\n\n    .user-projects {\n        flex: 1;\n    }\n\n    .add-project.active {\n        margin-top: 40px;\n        width: 100%;\n        font-size: 2em;\n        flex: 0.5;\n    }\n\n    .add-project-form.active {\n        margin-top: 40px;\n        display: flex;\n        width: 100%;\n        flex: 1;\n    }\n\n    .add-project-input {\n    width: 100%;\n    font-size: 2em;\n    }\n\n    h1 {\n       font-size: 3em;\n       flex: 0.1;\n       max-height: 10vh;\n    }\n\n    .project-tasks {\n        flex: 3;\n        max-height: 60vh;\n        overflow: scroll;\n    }\n\n    .task {\n        font-size: 2em;\n    }\n\n    .store-img {\n        font-size: 2em;\n        width: 2em;\n        height: 2em;\n    }\n\n    .add-task-btn.active {\n        width: 50%;\n        flex: 1;\n        font-size: 2em;\n        max-height: 10vh;\n        margin-top: 30px\n    }\n\n    .add-task-form.active {\n        width: 50%;\n        flex: 1;\n        margin-top: 30px\n    }\n\n    .add-task-input {\n        font-size: 2em;\n        height: 3em;\n    }\n\n    body.edit-task .edit-form {\n        position: absolute;\n        width: 100%;\n        justify-content: flex-start;\n        padding-top: 40px;\n    }\n\n    form.edit-form p {\n        font-size: 3em;\n        margin-bottom: 0;\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        max-height: 22vh;\n        margin: 0;\n    }\n\n    form.edit-form > p > input {\n        font-size: 1em;\n    }\n\n    select {\n        font-size: 1em;\n    }\n\n    .submit-edit-btn {\n        flex: 1;\n        max-height: 15vh;\n        width: 100%;\n        display: flex;\n        justify-content: center;\n    }\n\n    .submit-edit-btn button {\n        flex: 1;\n        font-size: 2em;\n    }\n}'],sourceRoot:""}]);const c=o},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=n(t);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,r){"string"==typeof n&&(n=[[null,n,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var c=0;c<n.length;c++){var s=[].concat(n[c]);r&&a[s[0]]||(e&&(s[2]?s[2]="".concat(e," and ").concat(s[2]):s[2]=e),t.push(s))}},t}},15:n=>{function t(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}n.exports=function(n){var e,r,a=(r=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var r,a,i=[],o=!0,c=!1;try{for(e=e.call(n);!(o=(r=e.next()).done)&&(i.push(r.value),!t||i.length!==t);o=!0);}catch(n){c=!0,a=n}finally{try{o||null==e.return||e.return()}finally{if(c)throw a}}return i}}(e,r)||function(n,e){if(n){if("string"==typeof n)return t(n,e);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(n,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[1],o=a[3];if(!o)return i;if("function"==typeof btoa){var c=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),s="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(c),d="/*# ".concat(s," */"),u=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[i].concat(u).concat([d]).join("\n")}return[i].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var i={},o=[],c=0;c<n.length;c++){var s=n[c],d=r.base?s[0]+r.base:s[0],u=i[d]||0,l="".concat(d," ").concat(u);i[d]=u+1;var A=e(l),f={css:s[1],media:s[2],sourceMap:s[3]};-1!==A?(t[A].references++,t[A].updater(f)):t.push({identifier:l,updater:a(f,r),references:1}),o.push(l)}return o}function a(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;e.update(n=t)}else e.remove()}}n.exports=function(n,a){var i=r(n=n||[],a=a||{});return function(n){n=n||[];for(var o=0;o<i.length;o++){var c=e(i[o]);t[c].references--}for(var s=r(n,a),d=0;d<i.length;d++){var u=e(i[d]);0===t[u].references&&(t[u].updater(),t.splice(u,1))}i=s}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r=e.css,a=e.media,i=e.sourceMap;a?n.setAttribute("media",a):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,n)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},721:(n,t,e)=>{n.exports=e.p+"8b0764482e8019516ad6.png"},529:(n,t,e)=>{n.exports=e.p+"16fea52aac827e91dd9f.png"},82:(n,t,e)=>{n.exports=e.p+"ee9ad128812b5b3450a5.png"},861:(n,t,e)=>{n.exports=e.p+"e76c6684388e542abc05.png"},41:(n,t,e)=>{n.exports=e.p+"1e90d9acf720a6463d93.png"},987:(n,t,e)=>{n.exports=e.p+"77125d863b7005502ea3.png"}},t={};function e(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,exports:{}};return n[r](i,i.exports,e),i.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),(()=>{function n(n){return function(n){if(Array.isArray(n))return t(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||function(n,e){if(n){if("string"==typeof n)return t(n,e);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(n,e):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function t(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}const r=function(){var t={};return{on:function(n,e){t[n]=t[n]||[],t[n].push(e)},off:function(n,e){if(t[n])for(var r=0;r<t[n].length;r++)if(t[n][r]===e){t[n].splice(r,1);break}},emit:function e(r,a){var i=!1;arguments.length>e.length&&(a=Array.prototype.slice.call(arguments).slice(1),i=!0),t[r]&&!i&&t[r].forEach((function(n){return n(a)})),t[r]&&i&&t[r].forEach((function(t){return t.apply(void 0,n(a))}))}}}();function a(n){if(null===n||!0===n||!1===n)return NaN;var t=Number(n);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function i(n,t){if(t.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+t.length+" present")}function o(n){i(1,arguments);var t=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===t?new Date(n.getTime()):"number"==typeof n||"[object Number]"===t?new Date(n):("string"!=typeof n&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function c(n,t){i(2,arguments);var e=o(n),r=a(t);return isNaN(r)?new Date(NaN):r?(e.setDate(e.getDate()+r),e):e}function s(n,t){i(2,arguments);var e=a(t);return c(n,-e)}function d(n){var t=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return t.setUTCFullYear(n.getFullYear()),n.getTime()-t.getTime()}function u(n){i(1,arguments);var t=o(n);return t.setHours(0,0,0,0),t}var l=864e5;function A(n,t){i(2,arguments);var e=u(n),r=u(t),a=e.getTime()-d(e),o=r.getTime()-d(r);return Math.round((a-o)/l)}function f(n){i(1,arguments);var t=o(n),e=t.getDay();return e}function p(n,t){i(2,arguments);var e=t-f(n);return e<=0&&(e+=7),c(n,e)}function m(n,t){i(1,arguments);var e=t||{},r=e.locale,c=r&&r.options&&r.options.weekStartsOn,s=null==c?0:a(c),d=null==e.weekStartsOn?s:a(e.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=o(n),l=u.getDay(),A=(l<d?7:0)+l-d;return u.setDate(u.getDate()-A),u.setHours(0,0,0,0),u}var h=6048e5,g=e(529),v=e(721),b=e(987),C=e(82),y=e(41),B=e(861);function w(n){return function(n){if(Array.isArray(n))return x(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||function(n,t){if(n){if("string"==typeof n)return x(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?x(n,t):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function x(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}function I(n){i(1,arguments);var t=o(n);return!isNaN(t)}(function(){var n=[{title:"Inbox",icon:g,displayRule:function(n){return n.project===this.title},type:"core",storeTaskBtn:!0,addTaskBtn:!0},{title:"Today",icon:v,get date(){return s(new Date,0)},displayRule:function(n){return 0===A(this.date,n.date)},type:"core"},{title:"Tomorrow",icon:b,get date(){return s(new Date,-1)},displayRule:function(n){return 0===A(this.date,n.date)},type:"core"},{title:"This Week",icon:C,get date(){return function(n){return i(1,arguments),p(o(n),0)}(new Date)},displayRule:function(n){return 0===function(n,t,e){i(2,arguments);var r=m(n,e),a=m(t,e),o=r.getTime()-d(r),c=a.getTime()-d(a);return Math.round((o-c)/h)}(this.date,n.date,{weekStartsOn:1})},type:"core"},{title:"Someday",icon:B,displayRule:function(n){return n.project===this.title},type:"core"}],t=[],e=JSON.parse(localStorage.getItem("projects"))||[];function a(n){var e=function(n){var e=y,r=t.slice();function a(n){return r.reduce((function(t,e){return e.title===n&&t++,t}),0)}var i=a(n);return function t(e){var r;a(e)<1?n=e:(r=n+"(".concat(i,")"),i++,t(r))}(n),{title:n,icon:e,displayRule:function(n){return n.project===this.title},type:"user"}}(n);t.push(e),localStorage.setItem("projects",JSON.stringify(t.slice()))}return localStorage.getItem("projects")&&e.forEach((function(n){return a(n.title)})),r.on("updateCoreProjects",(function(){var t=n.slice();r.emit("deliverCoreProjects",t)})),r.on("updateUserProjects",(function(){var n=t.slice();r.emit("deliverUserProjects",n)})),r.on("createProject",a),r.on("removeProject",(function(n){var e=t.findIndex((function(t){return t===n}));t=[].concat(w(t.slice(0,e)),w(t.slice(e+1))),localStorage.setItem("projects",JSON.stringify(t.slice()))})),{}})().projects;var k={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function E(n){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.width?String(t.width):n.defaultWidth,r=n.formats[e]||n.formats[n.defaultWidth];return r}}var j,T={date:E({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:E({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:E({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},S={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function M(n){return function(t,e){var r,a=e||{};if("formatting"===(a.context?String(a.context):"standalone")&&n.formattingValues){var i=n.defaultFormattingWidth||n.defaultWidth,o=a.width?String(a.width):i;r=n.formattingValues[o]||n.formattingValues[i]}else{var c=n.defaultWidth,s=a.width?String(a.width):n.defaultWidth;r=n.values[s]||n.values[c]}return r[n.argumentCallback?n.argumentCallback(t):t]}}function D(n){return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.width,a=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],i=t.match(a);if(!i)return null;var o,c=i[0],s=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],d=Array.isArray(s)?Q(s,(function(n){return n.test(c)})):U(s,(function(n){return n.test(c)}));o=n.valueCallback?n.valueCallback(d):d,o=e.valueCallback?e.valueCallback(o):o;var u=t.slice(c.length);return{value:o,rest:u}}}function U(n,t){for(var e in n)if(n.hasOwnProperty(e)&&t(n[e]))return e}function Q(n,t){for(var e=0;e<n.length;e++)if(t(n[e]))return e}const P={code:"en-US",formatDistance:function(n,t,e){var r;return e=e||{},r="string"==typeof k[n]?k[n]:1===t?k[n].one:k[n].other.replace("{{count}}",t),e.addSuffix?e.comparison>0?"in "+r:r+" ago":r},formatLong:T,formatRelative:function(n,t,e,r){return S[n]},localize:{ordinalNumber:function(n,t){var e=Number(n),r=e%100;if(r>20||r<10)switch(r%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:M({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:M({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return Number(n)-1}}),month:M({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:M({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:M({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(j={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.match(j.matchPattern);if(!e)return null;var r=e[0],a=n.match(j.parsePattern);if(!a)return null;var i=j.valueCallback?j.valueCallback(a[0]):a[0];i=t.valueCallback?t.valueCallback(i):i;var o=n.slice(r.length);return{value:i,rest:o}}),era:D({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:D({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:D({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:D({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:D({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function O(n,t){i(2,arguments);var e=o(n).getTime(),r=a(t);return new Date(e+r)}function z(n,t){i(2,arguments);var e=a(t);return O(n,-e)}function L(n,t){for(var e=n<0?"-":"",r=Math.abs(n).toString();r.length<t;)r="0"+r;return e+r}const W=function(n,t){var e=n.getUTCFullYear(),r=e>0?e:1-e;return L("yy"===t?r%100:r,t.length)},Y=function(n,t){var e=n.getUTCMonth();return"M"===t?String(e+1):L(e+1,2)},N=function(n,t){return L(n.getUTCDate(),t.length)},F=function(n,t){return L(n.getUTCHours()%12||12,t.length)},q=function(n,t){return L(n.getUTCHours(),t.length)},H=function(n,t){return L(n.getUTCMinutes(),t.length)},X=function(n,t){return L(n.getUTCSeconds(),t.length)},R=function(n,t){var e=t.length,r=n.getUTCMilliseconds();return L(Math.floor(r*Math.pow(10,e-3)),t.length)};var G=864e5;function J(n){i(1,arguments);var t=1,e=o(n),r=e.getUTCDay(),a=(r<t?7:0)+r-t;return e.setUTCDate(e.getUTCDate()-a),e.setUTCHours(0,0,0,0),e}function Z(n){i(1,arguments);var t=o(n),e=t.getUTCFullYear(),r=new Date(0);r.setUTCFullYear(e+1,0,4),r.setUTCHours(0,0,0,0);var a=J(r),c=new Date(0);c.setUTCFullYear(e,0,4),c.setUTCHours(0,0,0,0);var s=J(c);return t.getTime()>=a.getTime()?e+1:t.getTime()>=s.getTime()?e:e-1}function V(n){i(1,arguments);var t=Z(n),e=new Date(0);e.setUTCFullYear(t,0,4),e.setUTCHours(0,0,0,0);var r=J(e);return r}var $=6048e5;function _(n,t){i(1,arguments);var e=t||{},r=e.locale,c=r&&r.options&&r.options.weekStartsOn,s=null==c?0:a(c),d=null==e.weekStartsOn?s:a(e.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=o(n),l=u.getUTCDay(),A=(l<d?7:0)+l-d;return u.setUTCDate(u.getUTCDate()-A),u.setUTCHours(0,0,0,0),u}function K(n,t){i(1,arguments);var e=o(n,t),r=e.getUTCFullYear(),c=t||{},s=c.locale,d=s&&s.options&&s.options.firstWeekContainsDate,u=null==d?1:a(d),l=null==c.firstWeekContainsDate?u:a(c.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var A=new Date(0);A.setUTCFullYear(r+1,0,l),A.setUTCHours(0,0,0,0);var f=_(A,t),p=new Date(0);p.setUTCFullYear(r,0,l),p.setUTCHours(0,0,0,0);var m=_(p,t);return e.getTime()>=f.getTime()?r+1:e.getTime()>=m.getTime()?r:r-1}function nn(n,t){i(1,arguments);var e=t||{},r=e.locale,o=r&&r.options&&r.options.firstWeekContainsDate,c=null==o?1:a(o),s=null==e.firstWeekContainsDate?c:a(e.firstWeekContainsDate),d=K(n,t),u=new Date(0);u.setUTCFullYear(d,0,s),u.setUTCHours(0,0,0,0);var l=_(u,t);return l}var tn=6048e5;function en(n,t){var e=n>0?"-":"+",r=Math.abs(n),a=Math.floor(r/60),i=r%60;if(0===i)return e+String(a);var o=t||"";return e+String(a)+o+L(i,2)}function rn(n,t){return n%60==0?(n>0?"-":"+")+L(Math.abs(n)/60,2):an(n,t)}function an(n,t){var e=t||"",r=n>0?"-":"+",a=Math.abs(n);return r+L(Math.floor(a/60),2)+e+L(a%60,2)}const on={G:function(n,t,e){var r=n.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return e.era(r,{width:"abbreviated"});case"GGGGG":return e.era(r,{width:"narrow"});case"GGGG":default:return e.era(r,{width:"wide"})}},y:function(n,t,e){if("yo"===t){var r=n.getUTCFullYear(),a=r>0?r:1-r;return e.ordinalNumber(a,{unit:"year"})}return W(n,t)},Y:function(n,t,e,r){var a=K(n,r),i=a>0?a:1-a;return"YY"===t?L(i%100,2):"Yo"===t?e.ordinalNumber(i,{unit:"year"}):L(i,t.length)},R:function(n,t){return L(Z(n),t.length)},u:function(n,t){return L(n.getUTCFullYear(),t.length)},Q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return L(r,2);case"Qo":return e.ordinalNumber(r,{unit:"quarter"});case"QQQ":return e.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return e.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return L(r,2);case"qo":return e.ordinalNumber(r,{unit:"quarter"});case"qqq":return e.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return e.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,t,e){var r=n.getUTCMonth();switch(t){case"M":case"MM":return Y(n,t);case"Mo":return e.ordinalNumber(r+1,{unit:"month"});case"MMM":return e.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return e.month(r,{width:"wide",context:"formatting"})}},L:function(n,t,e){var r=n.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return L(r+1,2);case"Lo":return e.ordinalNumber(r+1,{unit:"month"});case"LLL":return e.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return e.month(r,{width:"wide",context:"standalone"})}},w:function(n,t,e,r){var a=function(n,t){i(1,arguments);var e=o(n),r=_(e,t).getTime()-nn(e,t).getTime();return Math.round(r/tn)+1}(n,r);return"wo"===t?e.ordinalNumber(a,{unit:"week"}):L(a,t.length)},I:function(n,t,e){var r=function(n){i(1,arguments);var t=o(n),e=J(t).getTime()-V(t).getTime();return Math.round(e/$)+1}(n);return"Io"===t?e.ordinalNumber(r,{unit:"week"}):L(r,t.length)},d:function(n,t,e){return"do"===t?e.ordinalNumber(n.getUTCDate(),{unit:"date"}):N(n,t)},D:function(n,t,e){var r=function(n){i(1,arguments);var t=o(n),e=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var r=t.getTime(),a=e-r;return Math.floor(a/G)+1}(n);return"Do"===t?e.ordinalNumber(r,{unit:"dayOfYear"}):L(r,t.length)},E:function(n,t,e){var r=n.getUTCDay();switch(t){case"E":case"EE":case"EEE":return e.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(r,{width:"short",context:"formatting"});case"EEEE":default:return e.day(r,{width:"wide",context:"formatting"})}},e:function(n,t,e,r){var a=n.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return L(i,2);case"eo":return e.ordinalNumber(i,{unit:"day"});case"eee":return e.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(a,{width:"short",context:"formatting"});case"eeee":default:return e.day(a,{width:"wide",context:"formatting"})}},c:function(n,t,e,r){var a=n.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return L(i,t.length);case"co":return e.ordinalNumber(i,{unit:"day"});case"ccc":return e.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(a,{width:"narrow",context:"standalone"});case"cccccc":return e.day(a,{width:"short",context:"standalone"});case"cccc":default:return e.day(a,{width:"wide",context:"standalone"})}},i:function(n,t,e){var r=n.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return L(a,t.length);case"io":return e.ordinalNumber(a,{unit:"day"});case"iii":return e.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(r,{width:"short",context:"formatting"});case"iiii":default:return e.day(r,{width:"wide",context:"formatting"})}},a:function(n,t,e){var r=n.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,t,e){var r,a=n.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,t,e){var r,a=n.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,t,e){if("ho"===t){var r=n.getUTCHours()%12;return 0===r&&(r=12),e.ordinalNumber(r,{unit:"hour"})}return F(n,t)},H:function(n,t,e){return"Ho"===t?e.ordinalNumber(n.getUTCHours(),{unit:"hour"}):q(n,t)},K:function(n,t,e){var r=n.getUTCHours()%12;return"Ko"===t?e.ordinalNumber(r,{unit:"hour"}):L(r,t.length)},k:function(n,t,e){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===t?e.ordinalNumber(r,{unit:"hour"}):L(r,t.length)},m:function(n,t,e){return"mo"===t?e.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):H(n,t)},s:function(n,t,e){return"so"===t?e.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):X(n,t)},S:function(n,t){return R(n,t)},X:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return rn(a);case"XXXX":case"XX":return an(a);case"XXXXX":case"XXX":default:return an(a,":")}},x:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"x":return rn(a);case"xxxx":case"xx":return an(a);case"xxxxx":case"xxx":default:return an(a,":")}},O:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+en(a,":");case"OOOO":default:return"GMT"+an(a,":")}},z:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+en(a,":");case"zzzz":default:return"GMT"+an(a,":")}},t:function(n,t,e,r){var a=r._originalDate||n;return L(Math.floor(a.getTime()/1e3),t.length)},T:function(n,t,e,r){return L((r._originalDate||n).getTime(),t.length)}};function cn(n,t){switch(n){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function sn(n,t){switch(n){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}const dn={p:sn,P:function(n,t){var e,r=n.match(/(P+)(p+)?/),a=r[1],i=r[2];if(!i)return cn(n,t);switch(a){case"P":e=t.dateTime({width:"short"});break;case"PP":e=t.dateTime({width:"medium"});break;case"PPP":e=t.dateTime({width:"long"});break;case"PPPP":default:e=t.dateTime({width:"full"})}return e.replace("{{date}}",cn(a,t)).replace("{{time}}",sn(i,t))}};var un=["D","DD"],ln=["YY","YYYY"];function An(n){return-1!==un.indexOf(n)}function fn(n){return-1!==ln.indexOf(n)}function pn(n,t,e){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://git.io/fxCyr"))}var mn=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,hn=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,gn=/^'([^]*?)'?$/,vn=/''/g,bn=/[a-zA-Z]/;function Cn(n,t,e){i(2,arguments);var r=String(t),c=e||{},s=c.locale||P,u=s.options&&s.options.firstWeekContainsDate,l=null==u?1:a(u),A=null==c.firstWeekContainsDate?l:a(c.firstWeekContainsDate);if(!(A>=1&&A<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=s.options&&s.options.weekStartsOn,p=null==f?0:a(f),m=null==c.weekStartsOn?p:a(c.weekStartsOn);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!s.localize)throw new RangeError("locale must contain localize property");if(!s.formatLong)throw new RangeError("locale must contain formatLong property");var h=o(n);if(!I(h))throw new RangeError("Invalid time value");var g=d(h),v=z(h,g),b={firstWeekContainsDate:A,weekStartsOn:m,locale:s,_originalDate:h},C=r.match(hn).map((function(n){var t=n[0];return"p"===t||"P"===t?(0,dn[t])(n,s.formatLong,b):n})).join("").match(mn).map((function(e){if("''"===e)return"'";var r=e[0];if("'"===r)return yn(e);var a=on[r];if(a)return!c.useAdditionalWeekYearTokens&&fn(e)&&pn(e,t,n),!c.useAdditionalDayOfYearTokens&&An(e)&&pn(e,t,n),a(v,e,s.localize,b);if(r.match(bn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return e})).join("");return C}function yn(n){return n.match(gn)[1].replace(vn,"'")}function Bn(n){if(i(1,arguments),"string"==typeof n){var t=n.match(/(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})(?:\.(\d{0,7}))?(?:Z|(.)(\d{2}):?(\d{2})?)?/);return t?new Date(Date.UTC(+t[1],+t[2]-1,+t[3],+t[4]-(+t[9]||0)*("-"==t[8]?-1:1),+t[5]-(+t[10]||0)*("-"==t[8]?-1:1),+t[6],+((t[7]||"0")+"00").substring(0,3))):new Date(NaN)}return o(n)}function wn(n){return function(n){if(Array.isArray(n))return xn(n)}(n)||function(n){if("undefined"!=typeof Symbol&&null!=n[Symbol.iterator]||null!=n["@@iterator"])return Array.from(n)}(n)||function(n,t){if(n){if("string"==typeof n)return xn(n,t);var e=Object.prototype.toString.call(n).slice(8,-1);return"Object"===e&&n.constructor&&(e=n.constructor.name),"Map"===e||"Set"===e?Array.from(n):"Arguments"===e||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(e)?xn(n,t):void 0}}(n)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()}function xn(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}!function(){var n=[];function t(t){var e=function(n,t){var e=arguments.length>2&&void 0!==arguments[2]&&arguments[2],r=arguments.length>3&&void 0!==arguments[3]&&arguments[3];function a(){if(this.date)return Cn(this.date,"d.MMM")}return r&&(r=Bn(r)),{title:n,project:t,done:e,date:r,formatDate:a}}(t.title,t.project,t.done,t.date);n.push(e),localStorage.setItem("tasks",JSON.stringify(n.slice()))}localStorage.getItem("tasks")&&JSON.parse(localStorage.getItem("tasks")).forEach((function(n){return t(n)})),r.on("updateTasks",(function(){r.emit("deliverTasks",n.slice())})),r.on("createTask",t),r.on("removeTask",(function(t){var e=n.findIndex((function(n){return n===t}));n=[].concat(wn(n.slice(0,e)),wn(n.slice(e+1))),localStorage.setItem("tasks",JSON.stringify(n.slice()))})),r.on("editTask",(function(t,e){var r=n.findIndex((function(n){return n===t}));Object.assign(n[r],e),localStorage.setItem("tasks",JSON.stringify(n.slice()))}))}();var In=e(379),kn=e.n(In),En=e(795),jn=e.n(En),Tn=e(569),Sn=e.n(Tn),Mn=e(565),Dn=e.n(Mn),Un=e(216),Qn=e.n(Un),Pn=e(589),On=e.n(Pn),zn=e(426),Ln={};Ln.styleTagTransform=On(),Ln.setAttributes=Dn(),Ln.insert=Sn().bind(null,"head"),Ln.domAPI=jn(),Ln.insertStyleElement=Qn(),kn()(zn.Z,Ln),zn.Z&&zn.Z.locals&&zn.Z.locals,function(){var n=[],t=[],e=[],a=!1,i=document.createElement("header");document.body.appendChild(i);var o=document.createElement("button");o.textContent="≡",o.classList.add("button-nav-open"),i.appendChild(o);var c=document.createElement("div");c.id="content",document.body.appendChild(c);var s=document.createElement("nav");s.id="nav",c.appendChild(s);var d=document.createElement("div");d.classList.add("core-projects"),s.appendChild(d);var u=document.createElement("h2");u.classList.add("myprojects-heading"),u.textContent="My Projects",s.appendChild(u);var l=document.createElement("div");l.classList.add("user-projects"),s.appendChild(l);var A=document.createElement("button");A.textContent="➕ New Project",A.classList.add("add-project","active"),s.appendChild(A);var f=document.createElement("form");f.classList.add("add-project-form"),f.innerHTML='<input class="add-project-input" name="newProjectTitle" type="text" placeholder="Project Title" value="New Project" required>',s.appendChild(f);var p=document.createElement("div");p.classList.add("project"),c.appendChild(p);var m=document.createElement("form");function h(){r.emit("updateTasks")}function g(){r.emit("updateCoreProjects"),r.emit("updateUserProjects")}function v(a,i){g(),a.innerHTML=i.map((function(n,t){return'\n            <div class="'.concat(n.type,'-project-nav">\n            <img class="project-icon" src="').concat(n.icon,'">\n            <button data-idx="').concat(t,'" class="nav-project-btn">').concat(n.title,"</button>\n            ").concat("user"===n.type?'<button data-idx="'.concat(t,'" class="rm-project-btn">❌</button>'):"","\n            </div>\n            ")})).join(""),a.querySelectorAll(".nav-project-btn").forEach((function(n){return n.addEventListener("click",(function(){var n=parseInt(this.dataset.idx);b(i.slice()[n],p)}))})),a.querySelectorAll(".rm-project-btn").forEach((function(o){return o.addEventListener("click",(function(){var o,c=parseInt(this.dataset.idx),s=i.slice()[c];o=s,r.emit("removeProject",o),g(),g(),function(n,t){t.length>0&&t.map((function(t){t.project===n.title&&y(t)}))}(s,e),v(a,n),b(n[c-1]||t[0],p)}))}))}function b(n,t){t.innerHTML="";var a=document.createElement("h1");a.textContent=n.title,t.appendChild(a);var i=document.createElement("div");i.classList.add("project-tasks"),t.appendChild(i),C(i,n,e),("user"===n.type||"addTaskBtn"in n)&&function(n,t,a){var i=document.createElement("button");i.classList.add("add-task-btn","active"),i.textContent="➕ New Task",n.appendChild(i);var o=document.createElement("form");o.classList.add("add-task-form"),o.innerHTML='<input class="add-task-input" name="newTaskTitle" type="text" placeholder="Task Title" value="New Task" required>',n.appendChild(o),i.addEventListener("click",(function(){o.classList.add("active"),i.classList.remove("active")})),o.addEventListener("submit",(function(n){n.preventDefault();var c=this.newTaskTitle.value;!function(n,t){r.emit("createTask",{project:n,title:t}),h()}(t.title,c),o.classList.remove("active"),i.classList.add("active"),C(a,t,e),this.reset()}))}(t,n,i)}function C(t,a,i){h(),t.innerHTML="",t.innerHTML=i.map((function(n,t){if(a.displayRule(n)){var e=n.title;return"core"===a.type&&n.project!==a.title&&(e+=" ("+n.project+")"),'\n            <label class="task" for="task'.concat(t,'">\n            <input data-idx="').concat(t,'" class="task-checkbox" id="task').concat(t,'" type="checkbox" name="tasks" value="').concat(n.title,'" ').concat(n.done?"checked":"",'/>\n            <div class="task-title-date">').concat(n.date?'<p class="task-date">'+n.formatDate()+"</p>":"",'<p class="task-title" style="display: inline">').concat(e,'</p>\n            </div>\n            <div class="task-btns">\n            <button data-idx="').concat(t,'" class="rm-task-btn">❌</button>\n            <button data-idx="').concat(t,'" class="edit-task-btn">🖉</button>\n            ').concat("user"===a.type||"storeTaskBtn"in a?'<button data-idx="'.concat(t,'" class="store-task-btn"><img class="store-img" src="').concat(B,'"></button>'):"","\n            </div>\n            </label>\n            ")}})).join(""),t.querySelectorAll(".rm-task-btn").forEach((function(n){return n.addEventListener("click",(function(){var n=parseInt(this.dataset.idx);y(e.slice()[n]),C(t,a,e)}))})),t.querySelectorAll(".edit-task-btn").forEach((function(i){return i.addEventListener("click",(function(){var i=parseInt(this.dataset.idx);!function(t,a,i,o){o.innerHTML="";var c=document.querySelectorAll("button");c.forEach((function(n){return n.disabled=!0})),document.body.classList.add("edit-task");var s,d,u=!1;t.date&&(u=Cn(t.date,"yyyy-MM-dd")),o.innerHTML='\n        <p>Title: <input type="text" name="titleinput" placeholder="Title" value="'.concat(t.title,'" required></p>\n        <p>Project: <select name="projectselect"><option value="').concat(t.project,'">').concat(t.project,"</option>").concat((s=n,d=t.project,s.map((function(n){if(n.title!==d)return'<option value="'.concat(n.title,'">').concat(n.title,"</option>")})).join("")),'</select></p>\n        <p>Due-date: <input type="date" name="dateinput" value="').concat(u||"",' pattern="d{4}-d{2}-d{2}""></p>\n        <div class="submit-edit-btn">\n        <button type="submit" name="submitbtn">Edit</button>\n        <button name="cancelbtn">Cancel</button>\n        </div>'),o.addEventListener("submit",(function n(s){if(s.preventDefault(),s.submitter===o.cancelbtn)return c.forEach((function(n){return n.disabled=!1})),o.removeEventListener("submit",n),o.reset(),void document.body.classList.remove("edit-task");var d=this.titleinput.value,u=this.projectselect.value,l=this.dateinput.value||null;"string"==typeof l?(l=function(n){return new Date(n.replaceAll("-",","))}(l),r.emit("editTask",t,{title:d,project:u,date:l})):r.emit("editTask",t,{title:d,project:u}),C(a,i,e),document.body.classList.remove("edit-task"),c.forEach((function(n){return n.disabled=!1})),o.removeEventListener("submit",n)})),o.reset()}(e.slice()[i],t,a,m)}))})),t.querySelectorAll(".store-task-btn").forEach((function(n){return n.addEventListener("click",(function(){var n=parseInt(this.dataset.idx),i=e.slice()[n];r.emit("editTask",i,{project:"Someday"}),C(t,a,e)}))})),t.querySelectorAll(".task-checkbox").forEach((function(n){return n.addEventListener("click",(function(){var n=parseInt(this.dataset.idx),t=e.slice()[n],a=!t.done;r.emit("editTask",t,{done:a})}))}))}function y(n){r.emit("removeTask",n),h()}m.classList.add("edit-form"),c.appendChild(m),r.on("deliverUserProjects",(function(t){n=t})),r.on("deliverCoreProjects",(function(n){t=n})),r.on("deliverTasks",(function(n){e=n})),g(),h(),v(d,t),v(l,n),b(t[0],p),A.addEventListener("click",(function(n){f.classList.add("active"),A.classList.remove("active")})),f.addEventListener("submit",(function(t){var e;t.preventDefault(),e=this.newProjectTitle.value,r.emit("createProject",e),g(),v(l,n),f.classList.remove("active"),A.classList.add("active"),this.reset()})),o.addEventListener("click",(function(){var n;a?(a=!a,(n=s).classList.remove("nav-enter"),n.classList.remove("nav-enter-active")):function(n){a=!a,n.classList.add("nav-enter"),setTimeout((function(){return n.classList.contains("nav-enter")&&n.classList.add("nav-enter-active")}),150)}(s)}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,