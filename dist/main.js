(()=>{"use strict";var n={426:(n,t,e)=>{e.d(t,{Z:()=>s});var r=e(15),a=e.n(r),i=e(645),o=e.n(i)()(a());o.push([n.id,'html {\n    min-height: 100%;\n    font-size: 50%;\n    line-height: 1.5;\n}\n\nbody {\n    margin: 0;\n    background-color: #FCF6BD;;\n}\n\nbody.edit-task .edit-form {\n    display: flex;\n    visibility: visible;\n    opacity: 1;\n}\n\nheader {\n    display: none;\n    opacity: 0;\n    position: absolute;\n}\n\n#content {\n    display: flex;\n    min-height: 100vh;\n    font-size: 3em;\n}\n\nnav {\n    flex: 1;\n    max-width: 300px;\n    background-color: #FCF6BD;\n    background-color: #D0F4DE;\n    display: flex;\n    flex-direction: column;\n}\n\n.myprojects-heading {\n    align-self: center;\n    font-size: 1.2em;\n}\n\n.project-icon {\n    width: 8%;\n    height: 100%;\n}\n\n.nav-project-btn {\n    max-width: 100%;\n    flex: 1;\n    background-color: transparent;\n    border: none;\n    text-align: start;\n    font-size: 0.8em;\n    cursor: pointer;\n}\n\n.rm-project-btn {\n    max-width: 100%;\n    flex: 0.2;\n    background-color: transparent;\n    border: none;\n    color: red;\n    font-size: 0.8em;\n    cursor: pointer;\n}\n\n.core-projects {\n    display: flex;\n    flex-direction: column;\n    padding-top: 10px;\n}\n\n.user-projects {\n    display: flex;\n    flex-direction: column;\n    padding-top: 10px;\n}\n\n.user-project-nav {\n    display: flex;\n    padding-left: 20px;\n}\n\n.core-project-nav {\n    width: 100%;\n    display: flex;\n    padding-top: 10px;\n    padding-left: 20px;\n    background-color: #D0F4DE;\n}\n\n.core-project-nav:hover {\n    background-color: #D0F4DE;\n    background-color: #6bfca0\n}\n\n.user-project-nav:hover {\n    background-color: #6bfca0\n}\n\n.add-project.active {\n    display: block;\n    align-self: center;\n    margin-top: 10px;\n    cursor: pointer;\n    width: 50%;\n}\n\n.add-project {\n    display: none;\n}\n\n.add-project-form {\n    display: none;\n}\n\n.add-project-form.active {\n    display: block;\n    width: 50%;\n    align-self: center;\n}\n\n.add-project-input {\n    width: 100%;\n}\n\n.project {\n    flex: 3;\n    background-color: #D0F4DE;\n    background-color: #FCF6BD;\n    display: flex;\n    flex-direction: column;\n    padding-left: 50px;\n}\n\n\n.project-tasks {\n    display: flex;\n    flex-direction: column;\n}\n\n.task {\n    display: flex;\n    text-align: center;\n    align-items: center;\n}\n\n.task input {\n    display: none;\n}\n\n.task input + div:before {\n    content: "○";\n    margin-right: 10px;\n    align-self: center;\n    font-size: 2em;\n  }\n  \n.task input:checked + div:before {\n    content: "✔";\n}\n\n.task input:checked + div p {\n    text-decoration: line-through;\n}\n\n.task-title-date {\n    display: flex;\n    padding-left: 5px;\n    padding-right: 5px;\n    flex: 1;\n    text-align: center;\n}\n\n.task-title {\n    text-align: center;\n    padding-left: 5px;\n}\n\n.task-date{\n    padding-right: 5px;\n    background-color: #b8b1715e;\n    padding-left: 5px;\n}\n\n.task-btns {\n    display: inline;\n    text-align: center;\n    justify-self: center;\n    align-self: center;\n    flex: 1;\n}\n\n.rm-task-btn {\n    background-color: transparent;\n    border: none;\n    color: red;\n    font-size: 1em;\n    cursor: pointer;\n}\n\n.edit-task-btn {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n    font-size: 1em;\n}\n\n.store-task-btn {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n}\n\n.add-task-btn.active {\n    display: block;\n    align-self: center;\n    width: 25%;\n}\n\n.add-task-btn {\n    display: none;\n}\n\n.add-task-form.active {\n    display: block;\n    align-self: center;\n    width: 25%;\n}\n\n.add-task-form {\n    display: none;\n}\n\n.add-task-input {\n    width: 100%;\n    align-self: center;\n    padding-left: 10px;\n}\n\n.edit-form {\n    visibility: hidden;\n    opacity: 0;\n    min-height: 100%;\n    width: 300px;\n    background-color: #A9DEF9;\n    flex-direction: column;\n    justify-content: space-around;\n    padding-left: 20px;\n    box-sizing: border-box;\n    padding-right: 20px;\n}\n\n\n.submit-edit-btn {\n    align-self: center;\n}\n\n\n.submit-edit-btn  button {\n    cursor: pointer;\n}\n\n@media (max-width: 1000px) {\n\n    html {\n        font-size: 80%;\n    }\n\n    body {\n        margin: 0;\n        min-width: 100%;\n        display: flex;\n        flex-direction: column;\n    }\n\n    #content {\n        flex-direction: column;\n        min-width: 100vw;\n        overflow: hidden;\n    }\n\n    header {\n        display: block;\n        position: relative;\n        opacity: 1;\n        min-width: 100vw;\n        display: flex;\n        background-color: black;\n    }\n\n    .button-nav-open {\n        max-width: 4em;\n        max-height: 4em;\n        text-align: center;\n        font-size: 15em;\n        color: white;\n        background-color: transparent;\n        border: none;\n        padding: 0;\n        padding-left: 50px;\n    }\n\n    nav {\n        max-width: none;\n        min-width: 100vw;\n        display: none;\n        opacity: 0;\n    }  \n\n    .nav-enter {\n        display: flex;\n    }\n    \n    .nav-enter-active {\n        opacity: 1;\n    }\n\n    .project-icon {\n        font-size: 5em;\n        width: 0.5em;\n    }\n\n    .nav-project-btn {\n        font-size: 1.5em;\n        padding-left: 10px;\n        padding-top: 12px;\n    }\n\n    .core-project-nav {\n        padding-top: 20px;\n        padding-bottom: 20px;\n    }\n\n    .myprojects-heading {\n        font-size: 2.2em;\n    }\n\n    .user-projects {\n        flex: 1;\n    }\n\n    .add-project.active {\n        margin-top: 40px;\n        width: 100%;\n        font-size: 2em;\n        flex: 0.5;\n    }\n\n    .add-project-form.active {\n        margin-top: 40px;\n        display: flex;\n        width: 100%;\n        flex: 1;\n    }\n\n    .add-project-input {\n    width: 100%;\n    font-size: 2em;\n    }\n\n    h1 {\n       font-size: 3em;\n       flex: 0.1;\n       max-height: 10vh;\n    }\n\n    .project-tasks {\n        flex: 3;\n        max-height: 60vh;\n        overflow: scroll;\n    }\n\n    .task {\n        font-size: 2em;\n    }\n\n    .store-img {\n        font-size: 2em;\n        width: 2em;\n        height: 2em;\n    }\n\n    .add-task-btn.active {\n        width: 50%;\n        flex: 1;\n        font-size: 2em;\n        max-height: 10vh;\n        margin-top: 30px\n    }\n\n    .add-task-form.active {\n        width: 50%;\n        flex: 1;\n        margin-top: 30px\n    }\n\n    .add-task-input {\n        font-size: 2em;\n        height: 3em;\n    }\n\n    body.edit-task .edit-form {\n        position: absolute;\n        width: 100%;\n        justify-content: flex-start;\n        padding-top: 40px;\n    }\n\n    form.edit-form p {\n        font-size: 3em;\n        margin-bottom: 0;\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        max-height: 22vh;\n        margin: 0;\n    }\n\n    form.edit-form > p > input {\n        font-size: 1em;\n    }\n\n    select {\n        font-size: 1em;\n    }\n\n    .submit-edit-btn {\n        flex: 1;\n        max-height: 15vh;\n        width: 100%;\n        display: flex;\n        justify-content: center;\n    }\n\n    .submit-edit-btn button {\n        flex: 1;\n        font-size: 2em;\n    }\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"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",sourcesContent:['html {\n    min-height: 100%;\n    font-size: 50%;\n    line-height: 1.5;\n}\n\nbody {\n    margin: 0;\n    background-color: #FCF6BD;;\n}\n\nbody.edit-task .edit-form {\n    display: flex;\n    visibility: visible;\n    opacity: 1;\n}\n\nheader {\n    display: none;\n    opacity: 0;\n    position: absolute;\n}\n\n#content {\n    display: flex;\n    min-height: 100vh;\n    font-size: 3em;\n}\n\nnav {\n    flex: 1;\n    max-width: 300px;\n    background-color: #FCF6BD;\n    background-color: #D0F4DE;\n    display: flex;\n    flex-direction: column;\n}\n\n.myprojects-heading {\n    align-self: center;\n    font-size: 1.2em;\n}\n\n.project-icon {\n    width: 8%;\n    height: 100%;\n}\n\n.nav-project-btn {\n    max-width: 100%;\n    flex: 1;\n    background-color: transparent;\n    border: none;\n    text-align: start;\n    font-size: 0.8em;\n    cursor: pointer;\n}\n\n.rm-project-btn {\n    max-width: 100%;\n    flex: 0.2;\n    background-color: transparent;\n    border: none;\n    color: red;\n    font-size: 0.8em;\n    cursor: pointer;\n}\n\n.core-projects {\n    display: flex;\n    flex-direction: column;\n    padding-top: 10px;\n}\n\n.user-projects {\n    display: flex;\n    flex-direction: column;\n    padding-top: 10px;\n}\n\n.user-project-nav {\n    display: flex;\n    padding-left: 20px;\n}\n\n.core-project-nav {\n    width: 100%;\n    display: flex;\n    padding-top: 10px;\n    padding-left: 20px;\n    background-color: #D0F4DE;\n}\n\n.core-project-nav:hover {\n    background-color: #D0F4DE;\n    background-color: #6bfca0\n}\n\n.user-project-nav:hover {\n    background-color: #6bfca0\n}\n\n.add-project.active {\n    display: block;\n    align-self: center;\n    margin-top: 10px;\n    cursor: pointer;\n    width: 50%;\n}\n\n.add-project {\n    display: none;\n}\n\n.add-project-form {\n    display: none;\n}\n\n.add-project-form.active {\n    display: block;\n    width: 50%;\n    align-self: center;\n}\n\n.add-project-input {\n    width: 100%;\n}\n\n.project {\n    flex: 3;\n    background-color: #D0F4DE;\n    background-color: #FCF6BD;\n    display: flex;\n    flex-direction: column;\n    padding-left: 50px;\n}\n\n\n.project-tasks {\n    display: flex;\n    flex-direction: column;\n}\n\n.task {\n    display: flex;\n    text-align: center;\n    align-items: center;\n}\n\n.task input {\n    display: none;\n}\n\n.task input + div:before {\n    content: "○";\n    margin-right: 10px;\n    align-self: center;\n    font-size: 2em;\n  }\n  \n.task input:checked + div:before {\n    content: "✔";\n}\n\n.task input:checked + div p {\n    text-decoration: line-through;\n}\n\n.task-title-date {\n    display: flex;\n    padding-left: 5px;\n    padding-right: 5px;\n    flex: 1;\n    text-align: center;\n}\n\n.task-title {\n    text-align: center;\n    padding-left: 5px;\n}\n\n.task-date{\n    padding-right: 5px;\n    background-color: #b8b1715e;\n    padding-left: 5px;\n}\n\n.task-btns {\n    display: inline;\n    text-align: center;\n    justify-self: center;\n    align-self: center;\n    flex: 1;\n}\n\n.rm-task-btn {\n    background-color: transparent;\n    border: none;\n    color: red;\n    font-size: 1em;\n    cursor: pointer;\n}\n\n.edit-task-btn {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n    font-size: 1em;\n}\n\n.store-task-btn {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n}\n\n.add-task-btn.active {\n    display: block;\n    align-self: center;\n    width: 25%;\n}\n\n.add-task-btn {\n    display: none;\n}\n\n.add-task-form.active {\n    display: block;\n    align-self: center;\n    width: 25%;\n}\n\n.add-task-form {\n    display: none;\n}\n\n.add-task-input {\n    width: 100%;\n    align-self: center;\n    padding-left: 10px;\n}\n\n.edit-form {\n    visibility: hidden;\n    opacity: 0;\n    min-height: 100%;\n    width: 300px;\n    background-color: #A9DEF9;\n    flex-direction: column;\n    justify-content: space-around;\n    padding-left: 20px;\n    box-sizing: border-box;\n    padding-right: 20px;\n}\n\n\n.submit-edit-btn {\n    align-self: center;\n}\n\n\n.submit-edit-btn  button {\n    cursor: pointer;\n}\n\n@media (max-width: 1000px) {\n\n    html {\n        font-size: 80%;\n    }\n\n    body {\n        margin: 0;\n        min-width: 100%;\n        display: flex;\n        flex-direction: column;\n    }\n\n    #content {\n        flex-direction: column;\n        min-width: 100vw;\n        overflow: hidden;\n    }\n\n    header {\n        display: block;\n        position: relative;\n        opacity: 1;\n        min-width: 100vw;\n        display: flex;\n        background-color: black;\n    }\n\n    .button-nav-open {\n        max-width: 4em;\n        max-height: 4em;\n        text-align: center;\n        font-size: 15em;\n        color: white;\n        background-color: transparent;\n        border: none;\n        padding: 0;\n        padding-left: 50px;\n    }\n\n    nav {\n        max-width: none;\n        min-width: 100vw;\n        display: none;\n        opacity: 0;\n    }  \n\n    .nav-enter {\n        display: flex;\n    }\n    \n    .nav-enter-active {\n        opacity: 1;\n    }\n\n    .project-icon {\n        font-size: 5em;\n        width: 0.5em;\n    }\n\n    .nav-project-btn {\n        font-size: 1.5em;\n        padding-left: 10px;\n        padding-top: 12px;\n    }\n\n    .core-project-nav {\n        padding-top: 20px;\n        padding-bottom: 20px;\n    }\n\n    .myprojects-heading {\n        font-size: 2.2em;\n    }\n\n    .user-projects {\n        flex: 1;\n    }\n\n    .add-project.active {\n        margin-top: 40px;\n        width: 100%;\n        font-size: 2em;\n        flex: 0.5;\n    }\n\n    .add-project-form.active {\n        margin-top: 40px;\n        display: flex;\n        width: 100%;\n        flex: 1;\n    }\n\n    .add-project-input {\n    width: 100%;\n    font-size: 2em;\n    }\n\n    h1 {\n       font-size: 3em;\n       flex: 0.1;\n       max-height: 10vh;\n    }\n\n    .project-tasks {\n        flex: 3;\n        max-height: 60vh;\n        overflow: scroll;\n    }\n\n    .task {\n        font-size: 2em;\n    }\n\n    .store-img {\n        font-size: 2em;\n        width: 2em;\n        height: 2em;\n    }\n\n    .add-task-btn.active {\n        width: 50%;\n        flex: 1;\n        font-size: 2em;\n        max-height: 10vh;\n        margin-top: 30px\n    }\n\n    .add-task-form.active {\n        width: 50%;\n        flex: 1;\n        margin-top: 30px\n    }\n\n    .add-task-input {\n        font-size: 2em;\n        height: 3em;\n    }\n\n    body.edit-task .edit-form {\n        position: absolute;\n        width: 100%;\n        justify-content: flex-start;\n        padding-top: 40px;\n    }\n\n    form.edit-form p {\n        font-size: 3em;\n        margin-bottom: 0;\n        flex: 1;\n        display: flex;\n        flex-direction: column;\n        max-height: 22vh;\n        margin: 0;\n    }\n\n    form.edit-form > p > input {\n        font-size: 1em;\n    }\n\n    select {\n        font-size: 1em;\n    }\n\n    .submit-edit-btn {\n        flex: 1;\n        max-height: 15vh;\n        width: 100%;\n        display: flex;\n        justify-content: center;\n    }\n\n    .submit-edit-btn button {\n        flex: 1;\n        font-size: 2em;\n    }\n}'],sourceRoot:""}]);const s=o},645:n=>{n.exports=function(n){var t=[];return t.toString=function(){return this.map((function(t){var e=n(t);return t[2]?"@media ".concat(t[2]," {").concat(e,"}"):e})).join("")},t.i=function(n,e,r){"string"==typeof n&&(n=[[null,n,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var s=0;s<n.length;s++){var c=[].concat(n[s]);r&&a[c[0]]||(e&&(c[2]?c[2]="".concat(e," and ").concat(c[2]):c[2]=e),t.push(c))}},t}},15:n=>{function t(n,t){(null==t||t>n.length)&&(t=n.length);for(var e=0,r=new Array(t);e<t;e++)r[e]=n[e];return r}n.exports=function(n){var e,r,a=(r=4,function(n){if(Array.isArray(n))return n}(e=n)||function(n,t){var e=null==n?null:"undefined"!=typeof Symbol&&n[Symbol.iterator]||n["@@iterator"];if(null!=e){var r,a,i=[],o=!0,s=!1;try{for(e=e.call(n);!(o=(r=e.next()).done)&&(i.push(r.value),!t||i.length!==t);o=!0);}catch(n){s=!0,a=n}finally{try{o||null==e.return||e.return()}finally{if(s)throw a}}return i}}(e,r)||function(n,e){if(n){if("string"==typeof n)return t(n,e);var r=Object.prototype.toString.call(n).slice(8,-1);return"Object"===r&&n.constructor&&(r=n.constructor.name),"Map"===r||"Set"===r?Array.from(n):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?t(n,e):void 0}}(e,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[1],o=a[3];if(!o)return i;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),d="/*# ".concat(c," */"),l=o.sources.map((function(n){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(n," */")}));return[i].concat(l).concat([d]).join("\n")}return[i].join("\n")}},379:n=>{var t=[];function e(n){for(var e=-1,r=0;r<t.length;r++)if(t[r].identifier===n){e=r;break}return e}function r(n,r){for(var i={},o=[],s=0;s<n.length;s++){var c=n[s],d=r.base?c[0]+r.base:c[0],l=i[d]||0,u="".concat(d," ").concat(l);i[d]=l+1;var A=e(u),f={css:c[1],media:c[2],sourceMap:c[3]};-1!==A?(t[A].references++,t[A].updater(f)):t.push({identifier:u,updater:a(f,r),references:1}),o.push(u)}return o}function a(n,t){var e=t.domAPI(t);return e.update(n),function(t){if(t){if(t.css===n.css&&t.media===n.media&&t.sourceMap===n.sourceMap)return;e.update(n=t)}else e.remove()}}n.exports=function(n,a){var i=r(n=n||[],a=a||{});return function(n){n=n||[];for(var o=0;o<i.length;o++){var s=e(i[o]);t[s].references--}for(var c=r(n,a),d=0;d<i.length;d++){var l=e(i[d]);0===t[l].references&&(t[l].updater(),t.splice(l,1))}i=c}}},569:n=>{var t={};n.exports=function(n,e){var r=function(n){if(void 0===t[n]){var e=document.querySelector(n);if(window.HTMLIFrameElement&&e instanceof window.HTMLIFrameElement)try{e=e.contentDocument.head}catch(n){e=null}t[n]=e}return t[n]}(n);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(e)}},216:n=>{n.exports=function(n){var t=document.createElement("style");return n.setAttributes(t,n.attributes),n.insert(t),t}},565:(n,t,e)=>{n.exports=function(n){var t=e.nc;t&&n.setAttribute("nonce",t)}},795:n=>{n.exports=function(n){var t=n.insertStyleElement(n);return{update:function(e){!function(n,t,e){var r=e.css,a=e.media,i=e.sourceMap;a?n.setAttribute("media",a):n.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),t.styleTagTransform(r,n)}(t,n,e)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(t)}}}},589:n=>{n.exports=function(n,t){if(t.styleSheet)t.styleSheet.cssText=n;else{for(;t.firstChild;)t.removeChild(t.firstChild);t.appendChild(document.createTextNode(n))}}},721:(n,t,e)=>{n.exports=e.p+"8b0764482e8019516ad6.png"},529:(n,t,e)=>{n.exports=e.p+"16fea52aac827e91dd9f.png"},82:(n,t,e)=>{n.exports=e.p+"ee9ad128812b5b3450a5.png"},861:(n,t,e)=>{n.exports=e.p+"e76c6684388e542abc05.png"},41:(n,t,e)=>{n.exports=e.p+"1e90d9acf720a6463d93.png"},987:(n,t,e)=>{n.exports=e.p+"77125d863b7005502ea3.png"}},t={};function e(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,exports:{}};return n[r](i,i.exports,e),i.exports}e.n=n=>{var t=n&&n.__esModule?()=>n.default:()=>n;return e.d(t,{a:t}),t},e.d=(n,t)=>{for(var r in t)e.o(t,r)&&!e.o(n,r)&&Object.defineProperty(n,r,{enumerable:!0,get:t[r]})},e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),e.o=(n,t)=>Object.prototype.hasOwnProperty.call(n,t),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var r=t.getElementsByTagName("script");r.length&&(n=r[r.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),(()=>{const n=function(){let n={};return{on:function(t,e){n[t]=n[t]||[],n[t].push(e)},off:function(t,e){if(n[t])for(let r=0;r<n[t].length;r++)if(n[t][r]===e){n[t].splice(r,1);break}},emit:function t(e,r){let a=!1;arguments.length>t.length&&(r=[...arguments].slice(1),a=!0),n[e]&&!a&&n[e].forEach((n=>n(r))),n[e]&&a&&n[e].forEach((n=>n(...r)))}}}();function t(n){if(null===n||!0===n||!1===n)return NaN;var t=Number(n);return isNaN(t)?t:t<0?Math.ceil(t):Math.floor(t)}function r(n,t){if(t.length<n)throw new TypeError(n+" argument"+(n>1?"s":"")+" required, but only "+t.length+" present")}function a(n){r(1,arguments);var t=Object.prototype.toString.call(n);return n instanceof Date||"object"==typeof n&&"[object Date]"===t?new Date(n.getTime()):"number"==typeof n||"[object Number]"===t?new Date(n):("string"!=typeof n&&"[object String]"!==t||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function i(n,e){r(2,arguments);var i=a(n),o=t(e);return isNaN(o)?new Date(NaN):o?(i.setDate(i.getDate()+o),i):i}function o(n,e){r(2,arguments);var a=t(e);return i(n,-a)}function s(n){var t=new Date(Date.UTC(n.getFullYear(),n.getMonth(),n.getDate(),n.getHours(),n.getMinutes(),n.getSeconds(),n.getMilliseconds()));return t.setUTCFullYear(n.getFullYear()),n.getTime()-t.getTime()}function c(n){r(1,arguments);var t=a(n);return t.setHours(0,0,0,0),t}var d=864e5;function l(n,t){r(2,arguments);var e=c(n),a=c(t),i=e.getTime()-s(e),o=a.getTime()-s(a);return Math.round((i-o)/d)}function u(n){r(1,arguments);var t=a(n),e=t.getDay();return e}function A(n,t){r(2,arguments);var e=t-u(n);return e<=0&&(e+=7),i(n,e)}function f(n,e){r(1,arguments);var i=e||{},o=i.locale,s=o&&o.options&&o.options.weekStartsOn,c=null==s?0:t(s),d=null==i.weekStartsOn?c:t(i.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=a(n),u=l.getDay(),A=(u<d?7:0)+u-d;return l.setDate(l.getDate()-A),l.setHours(0,0,0,0),l}var p=6048e5,m=e(529),h=e(721),g=e(987),C=e(82),b=e(41),v=e(861);function y(n){r(1,arguments);var t=a(n);return!isNaN(t)}(function(){const t=n=>{const t=b,e=i.slice();function r(n){return e.reduce(((t,e)=>(e.title===n&&t++,t)),0)}let a=r(n);return function t(e){if(r(e)<1)return void(n=e);let i=e;i=n+`(${a})`,a++,t(i)}(n),{title:n,icon:t,displayRule:function(n){return n.project===this.title},type:"user"}},e=[{title:"Inbox",icon:m,displayRule:function(n){return n.project===this.title},type:"core",storeTaskBtn:!0,addTaskBtn:!0},{title:"Today",icon:h,get date(){return o(new Date,0)},displayRule:function(n){return 0===l(this.date,n.date)},type:"core"},{title:"Tomorrow",icon:g,get date(){return o(new Date,-1)},displayRule:function(n){return 0===l(this.date,n.date)},type:"core"},{title:"This Week",icon:C,get date(){return function(n){return r(1,arguments),A(a(n),0)}(new Date)},displayRule:function(n){return 0===function(n,t,e){r(2,arguments);var a=f(n,e),i=f(t,e),o=a.getTime()-s(a),c=i.getTime()-s(i);return Math.round((o-c)/p)}(this.date,n.date,{weekStartsOn:1})},type:"core"},{title:"Someday",icon:v,displayRule:function(n){return n.project===this.title},type:"core"}];let i=[];const c=JSON.parse(localStorage.getItem("projects"))||[];function d(n){const e=t(n);i.push(e),localStorage.setItem("projects",JSON.stringify(i.slice()))}return localStorage.getItem("projects")&&c.forEach((n=>d(n.title))),n.on("updateCoreProjects",(function(){const t=e.slice();n.emit("deliverCoreProjects",t)})),n.on("updateUserProjects",(function(){const t=i.slice();n.emit("deliverUserProjects",t)})),n.on("createProject",d),n.on("removeProject",(function(n){const t=i.findIndex((t=>t===n));i=[...i.slice(0,t),...i.slice(t+1)],localStorage.setItem("projects",JSON.stringify(i.slice()))})),{}})().projects;var B={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function w(n){return function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=t.width?String(t.width):n.defaultWidth,r=n.formats[e]||n.formats[n.defaultWidth];return r}}var x,I={date:w({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:w({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:w({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},k={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function E(n){return function(t,e){var r,a=e||{};if("formatting"===(a.context?String(a.context):"standalone")&&n.formattingValues){var i=n.defaultFormattingWidth||n.defaultWidth,o=a.width?String(a.width):i;r=n.formattingValues[o]||n.formattingValues[i]}else{var s=n.defaultWidth,c=a.width?String(a.width):n.defaultWidth;r=n.values[c]||n.values[s]}return r[n.argumentCallback?n.argumentCallback(t):t]}}function T(n){return function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=e.width,a=r&&n.matchPatterns[r]||n.matchPatterns[n.defaultMatchWidth],i=t.match(a);if(!i)return null;var o,s=i[0],c=r&&n.parsePatterns[r]||n.parsePatterns[n.defaultParseWidth],d=Array.isArray(c)?M(c,(function(n){return n.test(s)})):j(c,(function(n){return n.test(s)}));o=n.valueCallback?n.valueCallback(d):d,o=e.valueCallback?e.valueCallback(o):o;var l=t.slice(s.length);return{value:o,rest:l}}}function j(n,t){for(var e in n)if(n.hasOwnProperty(e)&&t(n[e]))return e}function M(n,t){for(var e=0;e<n.length;e++)if(t(n[e]))return e}const D={code:"en-US",formatDistance:function(n,t,e){var r;return e=e||{},r="string"==typeof B[n]?B[n]:1===t?B[n].one:B[n].other.replace("{{count}}",t),e.addSuffix?e.comparison>0?"in "+r:r+" ago":r},formatLong:I,formatRelative:function(n,t,e,r){return k[n]},localize:{ordinalNumber:function(n,t){var e=Number(n),r=e%100;if(r>20||r<10)switch(r%10){case 1:return e+"st";case 2:return e+"nd";case 3:return e+"rd"}return e+"th"},era:E({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:E({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(n){return Number(n)-1}}),month:E({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:E({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:E({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(x={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(n){return parseInt(n,10)}},function(n){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},e=n.match(x.matchPattern);if(!e)return null;var r=e[0],a=n.match(x.parsePattern);if(!a)return null;var i=x.valueCallback?x.valueCallback(a[0]):a[0];i=t.valueCallback?t.valueCallback(i):i;var o=n.slice(r.length);return{value:i,rest:o}}),era:T({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:T({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(n){return n+1}}),month:T({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:T({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:T({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function S(n,e){r(2,arguments);var i=a(n).getTime(),o=t(e);return new Date(i+o)}function Q(n,e){r(2,arguments);var a=t(e);return S(n,-a)}function U(n,t){for(var e=n<0?"-":"",r=Math.abs(n).toString();r.length<t;)r="0"+r;return e+r}const P=function(n,t){var e=n.getUTCFullYear(),r=e>0?e:1-e;return U("yy"===t?r%100:r,t.length)},O=function(n,t){var e=n.getUTCMonth();return"M"===t?String(e+1):U(e+1,2)},z=function(n,t){return U(n.getUTCDate(),t.length)},L=function(n,t){return U(n.getUTCHours()%12||12,t.length)},W=function(n,t){return U(n.getUTCHours(),t.length)},Y=function(n,t){return U(n.getUTCMinutes(),t.length)},N=function(n,t){return U(n.getUTCSeconds(),t.length)},F=function(n,t){var e=t.length,r=n.getUTCMilliseconds();return U(Math.floor(r*Math.pow(10,e-3)),t.length)};var q=864e5;function H(n){r(1,arguments);var t=1,e=a(n),i=e.getUTCDay(),o=(i<t?7:0)+i-t;return e.setUTCDate(e.getUTCDate()-o),e.setUTCHours(0,0,0,0),e}function X(n){r(1,arguments);var t=a(n),e=t.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(e+1,0,4),i.setUTCHours(0,0,0,0);var o=H(i),s=new Date(0);s.setUTCFullYear(e,0,4),s.setUTCHours(0,0,0,0);var c=H(s);return t.getTime()>=o.getTime()?e+1:t.getTime()>=c.getTime()?e:e-1}function $(n){r(1,arguments);var t=X(n),e=new Date(0);e.setUTCFullYear(t,0,4),e.setUTCHours(0,0,0,0);var a=H(e);return a}var R=6048e5;function G(n,e){r(1,arguments);var i=e||{},o=i.locale,s=o&&o.options&&o.options.weekStartsOn,c=null==s?0:t(s),d=null==i.weekStartsOn?c:t(i.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var l=a(n),u=l.getUTCDay(),A=(u<d?7:0)+u-d;return l.setUTCDate(l.getUTCDate()-A),l.setUTCHours(0,0,0,0),l}function J(n,e){r(1,arguments);var i=a(n,e),o=i.getUTCFullYear(),s=e||{},c=s.locale,d=c&&c.options&&c.options.firstWeekContainsDate,l=null==d?1:t(d),u=null==s.firstWeekContainsDate?l:t(s.firstWeekContainsDate);if(!(u>=1&&u<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var A=new Date(0);A.setUTCFullYear(o+1,0,u),A.setUTCHours(0,0,0,0);var f=G(A,e),p=new Date(0);p.setUTCFullYear(o,0,u),p.setUTCHours(0,0,0,0);var m=G(p,e);return i.getTime()>=f.getTime()?o+1:i.getTime()>=m.getTime()?o:o-1}function Z(n,e){r(1,arguments);var a=e||{},i=a.locale,o=i&&i.options&&i.options.firstWeekContainsDate,s=null==o?1:t(o),c=null==a.firstWeekContainsDate?s:t(a.firstWeekContainsDate),d=J(n,e),l=new Date(0);l.setUTCFullYear(d,0,c),l.setUTCHours(0,0,0,0);var u=G(l,e);return u}var V=6048e5;function _(n,t){var e=n>0?"-":"+",r=Math.abs(n),a=Math.floor(r/60),i=r%60;if(0===i)return e+String(a);var o=t||"";return e+String(a)+o+U(i,2)}function K(n,t){return n%60==0?(n>0?"-":"+")+U(Math.abs(n)/60,2):nn(n,t)}function nn(n,t){var e=t||"",r=n>0?"-":"+",a=Math.abs(n);return r+U(Math.floor(a/60),2)+e+U(a%60,2)}const tn={G:function(n,t,e){var r=n.getUTCFullYear()>0?1:0;switch(t){case"G":case"GG":case"GGG":return e.era(r,{width:"abbreviated"});case"GGGGG":return e.era(r,{width:"narrow"});case"GGGG":default:return e.era(r,{width:"wide"})}},y:function(n,t,e){if("yo"===t){var r=n.getUTCFullYear(),a=r>0?r:1-r;return e.ordinalNumber(a,{unit:"year"})}return P(n,t)},Y:function(n,t,e,r){var a=J(n,r),i=a>0?a:1-a;return"YY"===t?U(i%100,2):"Yo"===t?e.ordinalNumber(i,{unit:"year"}):U(i,t.length)},R:function(n,t){return U(X(n),t.length)},u:function(n,t){return U(n.getUTCFullYear(),t.length)},Q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"Q":return String(r);case"QQ":return U(r,2);case"Qo":return e.ordinalNumber(r,{unit:"quarter"});case"QQQ":return e.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return e.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return e.quarter(r,{width:"wide",context:"formatting"})}},q:function(n,t,e){var r=Math.ceil((n.getUTCMonth()+1)/3);switch(t){case"q":return String(r);case"qq":return U(r,2);case"qo":return e.ordinalNumber(r,{unit:"quarter"});case"qqq":return e.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return e.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return e.quarter(r,{width:"wide",context:"standalone"})}},M:function(n,t,e){var r=n.getUTCMonth();switch(t){case"M":case"MM":return O(n,t);case"Mo":return e.ordinalNumber(r+1,{unit:"month"});case"MMM":return e.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return e.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return e.month(r,{width:"wide",context:"formatting"})}},L:function(n,t,e){var r=n.getUTCMonth();switch(t){case"L":return String(r+1);case"LL":return U(r+1,2);case"Lo":return e.ordinalNumber(r+1,{unit:"month"});case"LLL":return e.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return e.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return e.month(r,{width:"wide",context:"standalone"})}},w:function(n,t,e,i){var o=function(n,t){r(1,arguments);var e=a(n),i=G(e,t).getTime()-Z(e,t).getTime();return Math.round(i/V)+1}(n,i);return"wo"===t?e.ordinalNumber(o,{unit:"week"}):U(o,t.length)},I:function(n,t,e){var i=function(n){r(1,arguments);var t=a(n),e=H(t).getTime()-$(t).getTime();return Math.round(e/R)+1}(n);return"Io"===t?e.ordinalNumber(i,{unit:"week"}):U(i,t.length)},d:function(n,t,e){return"do"===t?e.ordinalNumber(n.getUTCDate(),{unit:"date"}):z(n,t)},D:function(n,t,e){var i=function(n){r(1,arguments);var t=a(n),e=t.getTime();t.setUTCMonth(0,1),t.setUTCHours(0,0,0,0);var i=t.getTime(),o=e-i;return Math.floor(o/q)+1}(n);return"Do"===t?e.ordinalNumber(i,{unit:"dayOfYear"}):U(i,t.length)},E:function(n,t,e){var r=n.getUTCDay();switch(t){case"E":case"EE":case"EEE":return e.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return e.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return e.day(r,{width:"short",context:"formatting"});case"EEEE":default:return e.day(r,{width:"wide",context:"formatting"})}},e:function(n,t,e,r){var a=n.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"e":return String(i);case"ee":return U(i,2);case"eo":return e.ordinalNumber(i,{unit:"day"});case"eee":return e.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return e.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return e.day(a,{width:"short",context:"formatting"});case"eeee":default:return e.day(a,{width:"wide",context:"formatting"})}},c:function(n,t,e,r){var a=n.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(t){case"c":return String(i);case"cc":return U(i,t.length);case"co":return e.ordinalNumber(i,{unit:"day"});case"ccc":return e.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return e.day(a,{width:"narrow",context:"standalone"});case"cccccc":return e.day(a,{width:"short",context:"standalone"});case"cccc":default:return e.day(a,{width:"wide",context:"standalone"})}},i:function(n,t,e){var r=n.getUTCDay(),a=0===r?7:r;switch(t){case"i":return String(a);case"ii":return U(a,t.length);case"io":return e.ordinalNumber(a,{unit:"day"});case"iii":return e.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return e.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return e.day(r,{width:"short",context:"formatting"});case"iiii":default:return e.day(r,{width:"wide",context:"formatting"})}},a:function(n,t,e){var r=n.getUTCHours()/12>=1?"pm":"am";switch(t){case"a":case"aa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return e.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(n,t,e){var r,a=n.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",t){case"b":case"bb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return e.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(n,t,e){var r,a=n.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",t){case"B":case"BB":case"BBB":return e.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return e.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return e.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(n,t,e){if("ho"===t){var r=n.getUTCHours()%12;return 0===r&&(r=12),e.ordinalNumber(r,{unit:"hour"})}return L(n,t)},H:function(n,t,e){return"Ho"===t?e.ordinalNumber(n.getUTCHours(),{unit:"hour"}):W(n,t)},K:function(n,t,e){var r=n.getUTCHours()%12;return"Ko"===t?e.ordinalNumber(r,{unit:"hour"}):U(r,t.length)},k:function(n,t,e){var r=n.getUTCHours();return 0===r&&(r=24),"ko"===t?e.ordinalNumber(r,{unit:"hour"}):U(r,t.length)},m:function(n,t,e){return"mo"===t?e.ordinalNumber(n.getUTCMinutes(),{unit:"minute"}):Y(n,t)},s:function(n,t,e){return"so"===t?e.ordinalNumber(n.getUTCSeconds(),{unit:"second"}):N(n,t)},S:function(n,t){return F(n,t)},X:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();if(0===a)return"Z";switch(t){case"X":return K(a);case"XXXX":case"XX":return nn(a);case"XXXXX":case"XXX":default:return nn(a,":")}},x:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"x":return K(a);case"xxxx":case"xx":return nn(a);case"xxxxx":case"xxx":default:return nn(a,":")}},O:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"O":case"OO":case"OOO":return"GMT"+_(a,":");case"OOOO":default:return"GMT"+nn(a,":")}},z:function(n,t,e,r){var a=(r._originalDate||n).getTimezoneOffset();switch(t){case"z":case"zz":case"zzz":return"GMT"+_(a,":");case"zzzz":default:return"GMT"+nn(a,":")}},t:function(n,t,e,r){var a=r._originalDate||n;return U(Math.floor(a.getTime()/1e3),t.length)},T:function(n,t,e,r){return U((r._originalDate||n).getTime(),t.length)}};function en(n,t){switch(n){case"P":return t.date({width:"short"});case"PP":return t.date({width:"medium"});case"PPP":return t.date({width:"long"});case"PPPP":default:return t.date({width:"full"})}}function rn(n,t){switch(n){case"p":return t.time({width:"short"});case"pp":return t.time({width:"medium"});case"ppp":return t.time({width:"long"});case"pppp":default:return t.time({width:"full"})}}const an={p:rn,P:function(n,t){var e,r=n.match(/(P+)(p+)?/),a=r[1],i=r[2];if(!i)return en(n,t);switch(a){case"P":e=t.dateTime({width:"short"});break;case"PP":e=t.dateTime({width:"medium"});break;case"PPP":e=t.dateTime({width:"long"});break;case"PPPP":default:e=t.dateTime({width:"full"})}return e.replace("{{date}}",en(a,t)).replace("{{time}}",rn(i,t))}};var on=["D","DD"],sn=["YY","YYYY"];function cn(n){return-1!==on.indexOf(n)}function dn(n){return-1!==sn.indexOf(n)}function ln(n,t,e){if("YYYY"===n)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("YY"===n)throw new RangeError("Use `yy` instead of `YY` (in `".concat(t,"`) for formatting years to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("D"===n)throw new RangeError("Use `d` instead of `D` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://git.io/fxCyr"));if("DD"===n)throw new RangeError("Use `dd` instead of `DD` (in `".concat(t,"`) for formatting days of the month to the input `").concat(e,"`; see: https://git.io/fxCyr"))}var un=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,An=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,fn=/^'([^]*?)'?$/,pn=/''/g,mn=/[a-zA-Z]/;function hn(n,e,i){r(2,arguments);var o=String(e),c=i||{},d=c.locale||D,l=d.options&&d.options.firstWeekContainsDate,u=null==l?1:t(l),A=null==c.firstWeekContainsDate?u:t(c.firstWeekContainsDate);if(!(A>=1&&A<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=d.options&&d.options.weekStartsOn,p=null==f?0:t(f),m=null==c.weekStartsOn?p:t(c.weekStartsOn);if(!(m>=0&&m<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!d.localize)throw new RangeError("locale must contain localize property");if(!d.formatLong)throw new RangeError("locale must contain formatLong property");var h=a(n);if(!y(h))throw new RangeError("Invalid time value");var g=s(h),C=Q(h,g),b={firstWeekContainsDate:A,weekStartsOn:m,locale:d,_originalDate:h},v=o.match(An).map((function(n){var t=n[0];return"p"===t||"P"===t?(0,an[t])(n,d.formatLong,b):n})).join("").match(un).map((function(t){if("''"===t)return"'";var r=t[0];if("'"===r)return gn(t);var a=tn[r];if(a)return!c.useAdditionalWeekYearTokens&&dn(t)&&ln(t,e,n),!c.useAdditionalDayOfYearTokens&&cn(t)&&ln(t,e,n),a(C,t,d.localize,b);if(r.match(mn))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return t})).join("");return v}function gn(n){return n.match(fn)[1].replace(pn,"'")}const Cn=(n,t,e=!1,i=!1)=>(i&&(i=function(n){if(r(1,arguments),"string"==typeof n){var t=n.match(/(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})(?:\.(\d{0,7}))?(?:Z|(.)(\d{2}):?(\d{2})?)?/);return t?new Date(Date.UTC(+t[1],+t[2]-1,+t[3],+t[4]-(+t[9]||0)*("-"==t[8]?-1:1),+t[5]-(+t[10]||0)*("-"==t[8]?-1:1),+t[6],+((t[7]||"0")+"00").substring(0,3))):new Date(NaN)}return a(n)}(i)),{title:n,project:t,done:e,date:i,formatDate:function(){if(this.date)return hn(this.date,"d.MMM")}});!function(){let t=[];function e(n){const e=Cn(n.title,n.project,n.done,n.date);t.push(e),localStorage.setItem("tasks",JSON.stringify(t.slice()))}localStorage.getItem("tasks")&&JSON.parse(localStorage.getItem("tasks")).forEach((n=>e(n))),n.on("updateTasks",(function(){n.emit("deliverTasks",t.slice())})),n.on("createTask",e),n.on("removeTask",(function(n){const e=t.findIndex((t=>t===n));t=[...t.slice(0,e),...t.slice(e+1)],localStorage.setItem("tasks",JSON.stringify(t.slice()))})),n.on("editTask",(function(n,e){const r=t.findIndex((t=>t===n));Object.assign(t[r],e),localStorage.setItem("tasks",JSON.stringify(t.slice()))}))}();var bn=e(379),vn=e.n(bn),yn=e(795),Bn=e.n(yn),wn=e(569),xn=e.n(wn),In=e(565),kn=e.n(In),En=e(216),Tn=e.n(En),jn=e(589),Mn=e.n(jn),Dn=e(426),Sn={};Sn.styleTagTransform=Mn(),Sn.setAttributes=kn(),Sn.insert=xn().bind(null,"head"),Sn.domAPI=Bn(),Sn.insertStyleElement=Tn(),vn()(Dn.Z,Sn),Dn.Z&&Dn.Z.locals&&Dn.Z.locals,function(){let t=[],e=[],r=[],a=!1;const i=document.createElement("header");document.body.appendChild(i);const o=document.createElement("button");o.textContent="≡",o.classList.add("button-nav-open"),i.appendChild(o);const s=document.createElement("div");s.id="content",document.body.appendChild(s);const c=document.createElement("nav");c.id="nav",s.appendChild(c);const d=document.createElement("div");d.classList.add("core-projects"),c.appendChild(d);const l=document.createElement("h2");l.classList.add("myprojects-heading"),l.textContent="My Projects",c.appendChild(l);const u=document.createElement("div");u.classList.add("user-projects"),c.appendChild(u);const A=document.createElement("button");A.textContent="➕ New Project",A.classList.add("add-project","active"),c.appendChild(A);const f=document.createElement("form");f.classList.add("add-project-form"),f.innerHTML='<input class="add-project-input" name="newProjectTitle" type="text" placeholder="Project Title" value="New Project" required>',c.appendChild(f);const p=document.createElement("div");p.classList.add("project"),s.appendChild(p);const m=document.createElement("form");function h(){n.emit("updateTasks")}function g(){n.emit("updateCoreProjects"),n.emit("updateUserProjects")}function C(a,i){g(),a.innerHTML=i.map(((n,t)=>`\n            <div class="${n.type}-project-nav">\n            <img class="project-icon" src="${n.icon}">\n            <button data-idx="${t}" class="nav-project-btn">${n.title}</button>\n            ${"user"===n.type?`<button data-idx="${t}" class="rm-project-btn">❌</button>`:""}\n            </div>\n            `)).join(""),a.querySelectorAll(".nav-project-btn").forEach((n=>n.addEventListener("click",(function(){const n=parseInt(this.dataset.idx);b(i.slice()[n],p)})))),a.querySelectorAll(".rm-project-btn").forEach((o=>o.addEventListener("click",(function(){const o=parseInt(this.dataset.idx),s=i.slice()[o];var c;c=s,n.emit("removeProject",c),g(),g(),function(n,t){t.length>0&&t.map((t=>{t.project===n.title&&B(t)}))}(s,r),C(a,t),b(t[o-1]||e[0],p)}))))}function b(t,e){e.innerHTML="";const a=document.createElement("h1");a.textContent=t.title,e.appendChild(a);const i=document.createElement("div");i.classList.add("project-tasks"),e.appendChild(i),y(i,t,r),("user"===t.type||"addTaskBtn"in t)&&function(t,e,a){const i=document.createElement("button");i.classList.add("add-task-btn","active"),i.textContent="➕ New Task",t.appendChild(i);const o=document.createElement("form");o.classList.add("add-task-form"),o.innerHTML='<input class="add-task-input" name="newTaskTitle" type="text" placeholder="Task Title" value="New Task" required>',t.appendChild(o),i.addEventListener("click",(function(){o.classList.add("active"),i.classList.remove("active")})),o.addEventListener("submit",(function(t){t.preventDefault();const s=this.newTaskTitle.value;!function(t,e){n.emit("createTask",{project:t,title:e}),h()}(e.title,s),o.classList.remove("active"),i.classList.add("active"),y(a,e,r),this.reset()}))}(e,t,i)}function y(e,a,i){h(),e.innerHTML="",e.innerHTML=i.map(((n,t)=>{if(!a.displayRule(n))return;let e=n.title;return"core"===a.type&&n.project!==a.title&&(e+=" ("+n.project+")"),`\n            <label class="task" for="task${t}">\n            <input data-idx="${t}" class="task-checkbox" id="task${t}" type="checkbox" name="tasks" value="${n.title}" ${n.done?"checked":""}/>\n            <div class="task-title-date">${n.date?'<p class="task-date">'+n.formatDate()+"</p>":""}<p class="task-title" style="display: inline">${e}</p>\n            </div>\n            <div class="task-btns">\n            <button data-idx="${t}" class="rm-task-btn">❌</button>\n            <button data-idx="${t}" class="edit-task-btn">🖉</button>\n            ${"user"===a.type||"storeTaskBtn"in a?`<button data-idx="${t}" class="store-task-btn"><img class="store-img" src="${v}"></button>`:""}\n            </div>\n            </label>\n            `})).join(""),e.querySelectorAll(".rm-task-btn").forEach((n=>n.addEventListener("click",(function(){const n=parseInt(this.dataset.idx);B(r.slice()[n]),y(e,a,r)})))),e.querySelectorAll(".edit-task-btn").forEach((i=>i.addEventListener("click",(function(){const i=parseInt(this.dataset.idx);!function(e,a,i,o){o.innerHTML="";const s=document.querySelectorAll("button");s.forEach((n=>n.disabled=!0)),document.body.classList.add("edit-task");let c=!1;var d,l;e.date&&(c=hn(e.date,"yyyy-MM-dd")),o.innerHTML=`\n        <p>Title: <input type="text" name="titleinput" placeholder="Title" value="${e.title}" required></p>\n        <p>Project: <select name="projectselect"><option value="${e.project}">${e.project}</option>${d=t,l=e.project,d.map((n=>{if(n.title!==l)return`<option value="${n.title}">${n.title}</option>`})).join("")}</select></p>\n        <p>Due-date: <input type="date" name="dateinput" value="${c||""} pattern="d{4}-d{2}-d{2}""></p>\n        <div class="submit-edit-btn">\n        <button type="submit" name="submitbtn">Edit</button>\n        <button name="cancelbtn">Cancel</button>\n        </div>`,o.addEventListener("submit",(function t(c){if(c.preventDefault(),console.log("edit"),c.submitter===o.cancelbtn)return s.forEach((n=>n.disabled=!1)),o.removeEventListener("submit",t),o.reset(),void document.body.classList.remove("edit-task");const d=this.titleinput.value,l=this.projectselect.value;let u=this.dateinput.value||null;"string"==typeof u?(u=function(n){return new Date(n.replaceAll("-",","))}(u),n.emit("editTask",e,{title:d,project:l,date:u})):n.emit("editTask",e,{title:d,project:l}),y(a,i,r),document.body.classList.remove("edit-task"),s.forEach((n=>n.disabled=!1)),o.removeEventListener("submit",t)})),o.reset()}(r.slice()[i],e,a,m)})))),e.querySelectorAll(".store-task-btn").forEach((t=>t.addEventListener("click",(function(){const t=parseInt(this.dataset.idx),i=r.slice()[t];n.emit("editTask",i,{project:"Someday"}),y(e,a,r)})))),e.querySelectorAll(".task-checkbox").forEach((t=>t.addEventListener("click",(function(){const t=parseInt(this.dataset.idx),e=r.slice()[t],a=!e.done;n.emit("editTask",e,{done:a})}))))}function B(t){n.emit("removeTask",t),h()}m.classList.add("edit-form"),s.appendChild(m),n.on("deliverUserProjects",(function(n){t=n})),n.on("deliverCoreProjects",(function(n){e=n})),n.on("deliverTasks",(function(n){r=n})),g(),h(),C(d,e),C(u,t),b(e[0],p),A.addEventListener("click",(function(n){f.classList.add("active"),A.classList.remove("active")})),f.addEventListener("submit",(function(e){var r;e.preventDefault(),r=this.newProjectTitle.value,n.emit("createProject",r),g(),C(u,t),f.classList.remove("active"),A.classList.add("active"),this.reset()})),o.addEventListener("click",(()=>{var n;a?(a=!a,(n=c).classList.remove("nav-enter"),n.classList.remove("nav-enter-active")):function(n){a=!a,n.classList.add("nav-enter"),setTimeout((()=>n.classList.contains("nav-enter")&&n.classList.add("nav-enter-active")),150)}(c)}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,