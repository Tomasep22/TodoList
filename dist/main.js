(()=>{"use strict";var t={426:(t,e,n)=>{n.d(e,{Z:()=>s});var r=n(15),a=n.n(r),i=n(645),o=n.n(i)()(a());o.push([t.id,'html {\n    min-height: 100%;\n    font-size: 50%;\n    line-height: 1.5;\n}\n\nbody {\n    margin: 0;\n    background-color: #FCF6BD;;\n}\n\nbody.edit-task .edit-form {\n    display: flex;\n    visibility: visible;\n    opacity: 1;\n}\n\n\n#content {\n    display: flex;\n    min-height: 100vh;\n    font-size: 3em;\n}\n\n#nav {\n    flex: 1;\n    max-width: 300px;\n    background-color: #FCF6BD;\n    background-color: #D0F4DE;\n    display: flex;\n    flex-direction: column;\n}\n\n.myprojects-heading {\n    align-self: center;\n    font-size: 1.2em;\n}\n\n.project-icon {\n    width: 8%;\n    height: 100%;\n}\n\n.nav-project-btn {\n    max-width: 100%;\n    flex: 1;\n    background-color: transparent;\n    border: none;\n    text-align: start;\n    font-size: 0.8em;\n    cursor: pointer;\n}\n\n.rm-project-btn {\n    max-width: 100%;\n    flex: 0.2;\n    background-color: transparent;\n    border: none;\n    color: red;\n    font-size: 0.8em;\n    cursor: pointer;\n}\n\n.core-projects {\n    display: flex;\n    flex-direction: column;\n    padding-top: 10px;\n}\n\n.user-projects {\n    display: flex;\n    flex-direction: column;\n    padding-top: 10px;\n}\n\n.user-project-nav {\n    display: flex;\n    padding-left: 20px;\n}\n\n.core-project-nav {\n    width: 100%;\n    display: flex;\n    padding-top: 10px;\n    padding-left: 20px;\n    background-color: #D0F4DE;\n}\n\n.core-project-nav:hover {\n    background-color: #D0F4DE;\n    background-color: #6bfca0\n}\n\n.user-project-nav:hover {\n    background-color: #6bfca0\n}\n\n.add-project.active {\n    display: block;\n    align-self: center;\n    margin-top: 10px;\n    cursor: pointer;\n    width: 50%;\n}\n\n.add-project {\n    display: none;\n}\n\n.add-project-form {\n    display: none;\n}\n\n.add-project-form.active {\n    display: block;\n    width: 50%;\n    align-self: center;\n}\n\n.add-project-input {\n    width: 100%;\n}\n\n.project {\n    flex: 3;\n    background-color: #D0F4DE;\n    background-color: #FCF6BD;\n    display: flex;\n    flex-direction: column;\n    padding-left: 50px;\n}\n\n\n.project-tasks {\n    display: flex;\n    flex-direction: column;\n}\n\n.task {\n    display: flex;\n    text-align: center;\n    align-items: center;\n}\n\n.task input {\n    display: none;\n}\n\n.task input + div:before {\n    content: "○";\n    margin-right: 10px;\n    align-self: center;\n    font-size: 2em;\n  }\n  \n.task input:checked + div:before {\n    content: "✔";\n}\n\n.task input:checked + div p {\n    text-decoration: line-through;\n}\n\n.task-title-date {\n    display: flex;\n    padding-left: 5px;\n    padding-right: 5px;\n    flex: 1;\n    text-align: center;\n}\n\n.task-title {\n    text-align: center;\n    padding-left: 5px;\n}\n\n.task-date{\n    padding-right: 5px;\n    background-color: #b8b1715e;\n    padding-left: 5px;\n}\n\n.task-btns {\n    display: inline;\n    text-align: center;\n    justify-self: center;\n    align-self: center;\n    flex: 1;\n}\n\n.rm-task-btn {\n    background-color: transparent;\n    border: none;\n    color: red;\n    font-size: 1em;\n    cursor: pointer;\n}\n\n.edit-task-btn {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n    font-size: 1em;\n}\n\n.store-task-btn {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n}\n\n.add-task-btn.active {\n    display: block;\n    align-self: center;\n    width: 25%;\n}\n\n.add-task-btn {\n    display: none;\n}\n\n.add-task-form.active {\n    display: block;\n    align-self: center;\n    width: 25%;\n}\n\n.add-task-form {\n    display: none;\n}\n\n.add-task-input {\n    width: 100%;\n    align-self: center;\n    padding-left: 10px;\n}\n\n.edit-form {\n    visibility: hidden;\n    opacity: 0;\n    min-height: 100%;\n    width: 300px;\n    background-color: #A9DEF9;\n    flex-direction: column;\n    justify-content: space-around;\n    padding-left: 20px;\n    box-sizing: border-box;\n    padding-right: 20px;\n}\n\n\n.submit-edit-btn {\n    align-self: center;\n}\n\n\n.submit-edit-btn  button {\n    cursor: pointer;\n}',"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;IACI,gBAAgB;IAChB,cAAc;IACd,gBAAgB;AACpB;;AAEA;IACI,SAAS;IACT,yBAAyB;AAC7B;;AAEA;IACI,aAAa;IACb,mBAAmB;IACnB,UAAU;AACd;;;AAGA;IACI,aAAa;IACb,iBAAiB;IACjB,cAAc;AAClB;;AAEA;IACI,OAAO;IACP,gBAAgB;IAChB,yBAAyB;IACzB,yBAAyB;IACzB,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,kBAAkB;IAClB,gBAAgB;AACpB;;AAEA;IACI,SAAS;IACT,YAAY;AAChB;;AAEA;IACI,eAAe;IACf,OAAO;IACP,6BAA6B;IAC7B,YAAY;IACZ,iBAAiB;IACjB,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,eAAe;IACf,SAAS;IACT,6BAA6B;IAC7B,YAAY;IACZ,UAAU;IACV,gBAAgB;IAChB,eAAe;AACnB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,sBAAsB;IACtB,iBAAiB;AACrB;;AAEA;IACI,aAAa;IACb,kBAAkB;AACtB;;AAEA;IACI,WAAW;IACX,aAAa;IACb,iBAAiB;IACjB,kBAAkB;IAClB,yBAAyB;AAC7B;;AAEA;IACI,yBAAyB;IACzB;AACJ;;AAEA;IACI;AACJ;;AAEA;IACI,cAAc;IACd,kBAAkB;IAClB,gBAAgB;IAChB,eAAe;IACf,UAAU;AACd;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,cAAc;IACd,UAAU;IACV,kBAAkB;AACtB;;AAEA;IACI,WAAW;AACf;;AAEA;IACI,OAAO;IACP,yBAAyB;IACzB,yBAAyB;IACzB,aAAa;IACb,sBAAsB;IACtB,kBAAkB;AACtB;;;AAGA;IACI,aAAa;IACb,sBAAsB;AAC1B;;AAEA;IACI,aAAa;IACb,kBAAkB;IAClB,mBAAmB;AACvB;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,YAAY;IACZ,kBAAkB;IAClB,kBAAkB;IAClB,cAAc;EAChB;;AAEF;IACI,YAAY;AAChB;;AAEA;IACI,6BAA6B;AACjC;;AAEA;IACI,aAAa;IACb,iBAAiB;IACjB,kBAAkB;IAClB,OAAO;IACP,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,iBAAiB;AACrB;;AAEA;IACI,kBAAkB;IAClB,2BAA2B;IAC3B,iBAAiB;AACrB;;AAEA;IACI,eAAe;IACf,kBAAkB;IAClB,oBAAoB;IACpB,kBAAkB;IAClB,OAAO;AACX;;AAEA;IACI,6BAA6B;IAC7B,YAAY;IACZ,UAAU;IACV,cAAc;IACd,eAAe;AACnB;;AAEA;IACI,6BAA6B;IAC7B,YAAY;IACZ,eAAe;IACf,cAAc;AAClB;;AAEA;IACI,6BAA6B;IAC7B,YAAY;IACZ,eAAe;AACnB;;AAEA;IACI,cAAc;IACd,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,cAAc;IACd,kBAAkB;IAClB,UAAU;AACd;;AAEA;IACI,aAAa;AACjB;;AAEA;IACI,WAAW;IACX,kBAAkB;IAClB,kBAAkB;AACtB;;AAEA;IACI,kBAAkB;IAClB,UAAU;IACV,gBAAgB;IAChB,YAAY;IACZ,yBAAyB;IACzB,sBAAsB;IACtB,6BAA6B;IAC7B,kBAAkB;IAClB,sBAAsB;IACtB,mBAAmB;AACvB;;;AAGA;IACI,kBAAkB;AACtB;;;AAGA;IACI,eAAe;AACnB",sourcesContent:['html {\n    min-height: 100%;\n    font-size: 50%;\n    line-height: 1.5;\n}\n\nbody {\n    margin: 0;\n    background-color: #FCF6BD;;\n}\n\nbody.edit-task .edit-form {\n    display: flex;\n    visibility: visible;\n    opacity: 1;\n}\n\n\n#content {\n    display: flex;\n    min-height: 100vh;\n    font-size: 3em;\n}\n\n#nav {\n    flex: 1;\n    max-width: 300px;\n    background-color: #FCF6BD;\n    background-color: #D0F4DE;\n    display: flex;\n    flex-direction: column;\n}\n\n.myprojects-heading {\n    align-self: center;\n    font-size: 1.2em;\n}\n\n.project-icon {\n    width: 8%;\n    height: 100%;\n}\n\n.nav-project-btn {\n    max-width: 100%;\n    flex: 1;\n    background-color: transparent;\n    border: none;\n    text-align: start;\n    font-size: 0.8em;\n    cursor: pointer;\n}\n\n.rm-project-btn {\n    max-width: 100%;\n    flex: 0.2;\n    background-color: transparent;\n    border: none;\n    color: red;\n    font-size: 0.8em;\n    cursor: pointer;\n}\n\n.core-projects {\n    display: flex;\n    flex-direction: column;\n    padding-top: 10px;\n}\n\n.user-projects {\n    display: flex;\n    flex-direction: column;\n    padding-top: 10px;\n}\n\n.user-project-nav {\n    display: flex;\n    padding-left: 20px;\n}\n\n.core-project-nav {\n    width: 100%;\n    display: flex;\n    padding-top: 10px;\n    padding-left: 20px;\n    background-color: #D0F4DE;\n}\n\n.core-project-nav:hover {\n    background-color: #D0F4DE;\n    background-color: #6bfca0\n}\n\n.user-project-nav:hover {\n    background-color: #6bfca0\n}\n\n.add-project.active {\n    display: block;\n    align-self: center;\n    margin-top: 10px;\n    cursor: pointer;\n    width: 50%;\n}\n\n.add-project {\n    display: none;\n}\n\n.add-project-form {\n    display: none;\n}\n\n.add-project-form.active {\n    display: block;\n    width: 50%;\n    align-self: center;\n}\n\n.add-project-input {\n    width: 100%;\n}\n\n.project {\n    flex: 3;\n    background-color: #D0F4DE;\n    background-color: #FCF6BD;\n    display: flex;\n    flex-direction: column;\n    padding-left: 50px;\n}\n\n\n.project-tasks {\n    display: flex;\n    flex-direction: column;\n}\n\n.task {\n    display: flex;\n    text-align: center;\n    align-items: center;\n}\n\n.task input {\n    display: none;\n}\n\n.task input + div:before {\n    content: "○";\n    margin-right: 10px;\n    align-self: center;\n    font-size: 2em;\n  }\n  \n.task input:checked + div:before {\n    content: "✔";\n}\n\n.task input:checked + div p {\n    text-decoration: line-through;\n}\n\n.task-title-date {\n    display: flex;\n    padding-left: 5px;\n    padding-right: 5px;\n    flex: 1;\n    text-align: center;\n}\n\n.task-title {\n    text-align: center;\n    padding-left: 5px;\n}\n\n.task-date{\n    padding-right: 5px;\n    background-color: #b8b1715e;\n    padding-left: 5px;\n}\n\n.task-btns {\n    display: inline;\n    text-align: center;\n    justify-self: center;\n    align-self: center;\n    flex: 1;\n}\n\n.rm-task-btn {\n    background-color: transparent;\n    border: none;\n    color: red;\n    font-size: 1em;\n    cursor: pointer;\n}\n\n.edit-task-btn {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n    font-size: 1em;\n}\n\n.store-task-btn {\n    background-color: transparent;\n    border: none;\n    cursor: pointer;\n}\n\n.add-task-btn.active {\n    display: block;\n    align-self: center;\n    width: 25%;\n}\n\n.add-task-btn {\n    display: none;\n}\n\n.add-task-form.active {\n    display: block;\n    align-self: center;\n    width: 25%;\n}\n\n.add-task-form {\n    display: none;\n}\n\n.add-task-input {\n    width: 100%;\n    align-self: center;\n    padding-left: 10px;\n}\n\n.edit-form {\n    visibility: hidden;\n    opacity: 0;\n    min-height: 100%;\n    width: 300px;\n    background-color: #A9DEF9;\n    flex-direction: column;\n    justify-content: space-around;\n    padding-left: 20px;\n    box-sizing: border-box;\n    padding-right: 20px;\n}\n\n\n.submit-edit-btn {\n    align-self: center;\n}\n\n\n.submit-edit-btn  button {\n    cursor: pointer;\n}'],sourceRoot:""}]);const s=o},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,r){"string"==typeof t&&(t=[[null,t,""]]);var a={};if(r)for(var i=0;i<this.length;i++){var o=this[i][0];null!=o&&(a[o]=!0)}for(var s=0;s<t.length;s++){var c=[].concat(t[s]);r&&a[c[0]]||(n&&(c[2]?c[2]="".concat(n," and ").concat(c[2]):c[2]=n),e.push(c))}},e}},15:t=>{function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,r=new Array(e);n<e;n++)r[n]=t[n];return r}t.exports=function(t){var n,r,a=(r=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var r,a,i=[],o=!0,s=!1;try{for(n=n.call(t);!(o=(r=n.next()).done)&&(i.push(r.value),!e||i.length!==e);o=!0);}catch(t){s=!0,a=t}finally{try{o||null==n.return||n.return()}finally{if(s)throw a}}return i}}(n,r)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var r=Object.prototype.toString.call(t).slice(8,-1);return"Object"===r&&t.constructor&&(r=t.constructor.name),"Map"===r||"Set"===r?Array.from(t):"Arguments"===r||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r)?e(t,n):void 0}}(n,r)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),i=a[1],o=a[3];if(!o)return i;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),d="/*# ".concat(c," */"),u=o.sources.map((function(t){return"/*# sourceURL=".concat(o.sourceRoot||"").concat(t," */")}));return[i].concat(u).concat([d]).join("\n")}return[i].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},o=[],s=0;s<t.length;s++){var c=t[s],d=r.base?c[0]+r.base:c[0],u=i[d]||0,l="".concat(d," ").concat(u);i[d]=u+1;var f=n(l),A={css:c[1],media:c[2],sourceMap:c[3]};-1!==f?(e[f].references++,e[f].updater(A)):e.push({identifier:l,updater:a(A,r),references:1}),o.push(l)}return o}function a(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,a){var i=r(t=t||[],a=a||{});return function(t){t=t||[];for(var o=0;o<i.length;o++){var s=n(i[o]);e[s].references--}for(var c=r(t,a),d=0;d<i.length;d++){var u=n(i[d]);0===e[u].references&&(e[u].updater(),e.splice(u,1))}i=c}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r=n.css,a=n.media,i=n.sourceMap;a?t.setAttribute("media",a):t.removeAttribute("media"),i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},721:(t,e,n)=>{t.exports=n.p+"8b0764482e8019516ad6.png"},529:(t,e,n)=>{t.exports=n.p+"16fea52aac827e91dd9f.png"},82:(t,e,n)=>{t.exports=n.p+"ee9ad128812b5b3450a5.png"},861:(t,e,n)=>{t.exports=n.p+"e76c6684388e542abc05.png"},41:(t,e,n)=>{t.exports=n.p+"1e90d9acf720a6463d93.png"},987:(t,e,n)=>{t.exports=n.p+"77125d863b7005502ea3.png"}},e={};function n(r){var a=e[r];if(void 0!==a)return a.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");r.length&&(t=r[r.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),(()=>{const t=function(){let t={};return{on:function(e,n){t[e]=t[e]||[],t[e].push(n)},off:function(e,n){if(t[e])for(let r=0;r<t[e].length;r++)if(t[e][r]===n){t[e].splice(r,1);break}},emit:function e(n,r){let a=!1;arguments.length>e.length&&(r=[...arguments].slice(1),a=!0),t[n]&&!a&&t[n].forEach((t=>t(r))),t[n]&&a&&t[n].forEach((t=>t(...r)))}}}();function e(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}function r(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function a(t){r(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"==typeof t&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://git.io/fjule"),console.warn((new Error).stack)),new Date(NaN))}function i(t,n){r(2,arguments);var i=a(t),o=e(n);return isNaN(o)?new Date(NaN):o?(i.setDate(i.getDate()+o),i):i}function o(t,n){r(2,arguments);var a=e(n);return i(t,-a)}function s(t){var e=new Date(Date.UTC(t.getFullYear(),t.getMonth(),t.getDate(),t.getHours(),t.getMinutes(),t.getSeconds(),t.getMilliseconds()));return e.setUTCFullYear(t.getFullYear()),t.getTime()-e.getTime()}function c(t){r(1,arguments);var e=a(t);return e.setHours(0,0,0,0),e}var d=864e5;function u(t,e){r(2,arguments);var n=c(t),a=c(e),i=n.getTime()-s(n),o=a.getTime()-s(a);return Math.round((i-o)/d)}function l(t){r(1,arguments);var e=a(t),n=e.getDay();return n}function f(t,e){r(2,arguments);var n=e-l(t);return n<=0&&(n+=7),i(t,n)}function A(t,n){r(1,arguments);var i=n||{},o=i.locale,s=o&&o.options&&o.options.weekStartsOn,c=null==s?0:e(s),d=null==i.weekStartsOn?c:e(i.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=a(t),l=u.getDay(),f=(l<d?7:0)+l-d;return u.setDate(u.getDate()-f),u.setHours(0,0,0,0),u}var p=6048e5,h=n(529),m=n(721),g=n(987),b=n(82),v=n(41),y=n(861);function C(t){r(1,arguments);var e=a(t);return!isNaN(e)}(function(){const e=t=>{const e=v,n=i.slice();function r(t){return n.reduce(((e,n)=>(n.title===t&&e++,e)),0)}let a=r(t);return function e(n){if(r(n)<1)return void(t=n);let i=n;i=t+`(${a})`,a++,e(i)}(t),{title:t,icon:e,displayRule:function(t){return t.project===this.title},type:"user"}},n=[{title:"Inbox",icon:h,displayRule:function(t){return t.project===this.title},type:"core",storeTaskBtn:!0,addTaskBtn:!0},{title:"Today",icon:m,get date(){return o(new Date,0)},displayRule:function(t){return 0===u(this.date,t.date)},type:"core"},{title:"Tomorrow",icon:g,get date(){return o(new Date,-1)},displayRule:function(t){return 0===u(this.date,t.date)},type:"core"},{title:"This Week",icon:b,get date(){return function(t){return r(1,arguments),f(a(t),0)}(new Date)},displayRule:function(t){return 0===function(t,e,n){r(2,arguments);var a=A(t,n),i=A(e,n),o=a.getTime()-s(a),c=i.getTime()-s(i);return Math.round((o-c)/p)}(this.date,t.date,{weekStartsOn:1})},type:"core"},{title:"Someday",icon:y,displayRule:function(t){return t.project===this.title},type:"core"}];let i=[];const c=JSON.parse(localStorage.getItem("projects"))||[];function d(t){const n=e(t);i.push(n),localStorage.setItem("projects",JSON.stringify(i.slice()))}return localStorage.getItem("projects")&&c.forEach((t=>d(t.title))),t.on("updateCoreProjects",(function(){const e=n.slice();t.emit("deliverCoreProjects",e)})),t.on("updateUserProjects",(function(){const e=i.slice();t.emit("deliverUserProjects",e)})),t.on("createProject",d),t.on("removeProject",(function(t){const e=i.findIndex((e=>e===t));i=[...i.slice(0,e),...i.slice(e+1)],localStorage.setItem("projects",JSON.stringify(i.slice()))})),{}})().projects;var w={lessThanXSeconds:{one:"less than a second",other:"less than {{count}} seconds"},xSeconds:{one:"1 second",other:"{{count}} seconds"},halfAMinute:"half a minute",lessThanXMinutes:{one:"less than a minute",other:"less than {{count}} minutes"},xMinutes:{one:"1 minute",other:"{{count}} minutes"},aboutXHours:{one:"about 1 hour",other:"about {{count}} hours"},xHours:{one:"1 hour",other:"{{count}} hours"},xDays:{one:"1 day",other:"{{count}} days"},aboutXWeeks:{one:"about 1 week",other:"about {{count}} weeks"},xWeeks:{one:"1 week",other:"{{count}} weeks"},aboutXMonths:{one:"about 1 month",other:"about {{count}} months"},xMonths:{one:"1 month",other:"{{count}} months"},aboutXYears:{one:"about 1 year",other:"about {{count}} years"},xYears:{one:"1 year",other:"{{count}} years"},overXYears:{one:"over 1 year",other:"over {{count}} years"},almostXYears:{one:"almost 1 year",other:"almost {{count}} years"}};function k(t){return function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=e.width?String(e.width):t.defaultWidth,r=t.formats[n]||t.formats[t.defaultWidth];return r}}var B,x={date:k({formats:{full:"EEEE, MMMM do, y",long:"MMMM do, y",medium:"MMM d, y",short:"MM/dd/yyyy"},defaultWidth:"full"}),time:k({formats:{full:"h:mm:ss a zzzz",long:"h:mm:ss a z",medium:"h:mm:ss a",short:"h:mm a"},defaultWidth:"full"}),dateTime:k({formats:{full:"{{date}} 'at' {{time}}",long:"{{date}} 'at' {{time}}",medium:"{{date}}, {{time}}",short:"{{date}}, {{time}}"},defaultWidth:"full"})},I={lastWeek:"'last' eeee 'at' p",yesterday:"'yesterday at' p",today:"'today at' p",tomorrow:"'tomorrow at' p",nextWeek:"eeee 'at' p",other:"P"};function T(t){return function(e,n){var r,a=n||{};if("formatting"===(a.context?String(a.context):"standalone")&&t.formattingValues){var i=t.defaultFormattingWidth||t.defaultWidth,o=a.width?String(a.width):i;r=t.formattingValues[o]||t.formattingValues[i]}else{var s=t.defaultWidth,c=a.width?String(a.width):t.defaultWidth;r=t.values[c]||t.values[s]}return r[t.argumentCallback?t.argumentCallback(e):e]}}function j(t){return function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=n.width,a=r&&t.matchPatterns[r]||t.matchPatterns[t.defaultMatchWidth],i=e.match(a);if(!i)return null;var o,s=i[0],c=r&&t.parsePatterns[r]||t.parsePatterns[t.defaultParseWidth],d=Array.isArray(c)?M(c,(function(t){return t.test(s)})):E(c,(function(t){return t.test(s)}));o=t.valueCallback?t.valueCallback(d):d,o=n.valueCallback?n.valueCallback(o):o;var u=e.slice(s.length);return{value:o,rest:u}}}function E(t,e){for(var n in t)if(t.hasOwnProperty(n)&&e(t[n]))return n}function M(t,e){for(var n=0;n<t.length;n++)if(e(t[n]))return n}const D={code:"en-US",formatDistance:function(t,e,n){var r;return n=n||{},r="string"==typeof w[t]?w[t]:1===e?w[t].one:w[t].other.replace("{{count}}",e),n.addSuffix?n.comparison>0?"in "+r:r+" ago":r},formatLong:x,formatRelative:function(t,e,n,r){return I[t]},localize:{ordinalNumber:function(t,e){var n=Number(t),r=n%100;if(r>20||r<10)switch(r%10){case 1:return n+"st";case 2:return n+"nd";case 3:return n+"rd"}return n+"th"},era:T({values:{narrow:["B","A"],abbreviated:["BC","AD"],wide:["Before Christ","Anno Domini"]},defaultWidth:"wide"}),quarter:T({values:{narrow:["1","2","3","4"],abbreviated:["Q1","Q2","Q3","Q4"],wide:["1st quarter","2nd quarter","3rd quarter","4th quarter"]},defaultWidth:"wide",argumentCallback:function(t){return Number(t)-1}}),month:T({values:{narrow:["J","F","M","A","M","J","J","A","S","O","N","D"],abbreviated:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],wide:["January","February","March","April","May","June","July","August","September","October","November","December"]},defaultWidth:"wide"}),day:T({values:{narrow:["S","M","T","W","T","F","S"],short:["Su","Mo","Tu","We","Th","Fr","Sa"],abbreviated:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],wide:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"]},defaultWidth:"wide"}),dayPeriod:T({values:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"morning",afternoon:"afternoon",evening:"evening",night:"night"}},defaultWidth:"wide",formattingValues:{narrow:{am:"a",pm:"p",midnight:"mi",noon:"n",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},abbreviated:{am:"AM",pm:"PM",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"},wide:{am:"a.m.",pm:"p.m.",midnight:"midnight",noon:"noon",morning:"in the morning",afternoon:"in the afternoon",evening:"in the evening",night:"at night"}},defaultFormattingWidth:"wide"})},match:{ordinalNumber:(B={matchPattern:/^(\d+)(th|st|nd|rd)?/i,parsePattern:/\d+/i,valueCallback:function(t){return parseInt(t,10)}},function(t){var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.match(B.matchPattern);if(!n)return null;var r=n[0],a=t.match(B.parsePattern);if(!a)return null;var i=B.valueCallback?B.valueCallback(a[0]):a[0];i=e.valueCallback?e.valueCallback(i):i;var o=t.slice(r.length);return{value:i,rest:o}}),era:j({matchPatterns:{narrow:/^(b|a)/i,abbreviated:/^(b\.?\s?c\.?|b\.?\s?c\.?\s?e\.?|a\.?\s?d\.?|c\.?\s?e\.?)/i,wide:/^(before christ|before common era|anno domini|common era)/i},defaultMatchWidth:"wide",parsePatterns:{any:[/^b/i,/^(a|c)/i]},defaultParseWidth:"any"}),quarter:j({matchPatterns:{narrow:/^[1234]/i,abbreviated:/^q[1234]/i,wide:/^[1234](th|st|nd|rd)? quarter/i},defaultMatchWidth:"wide",parsePatterns:{any:[/1/i,/2/i,/3/i,/4/i]},defaultParseWidth:"any",valueCallback:function(t){return t+1}}),month:j({matchPatterns:{narrow:/^[jfmasond]/i,abbreviated:/^(jan|feb|mar|apr|may|jun|jul|aug|sep|oct|nov|dec)/i,wide:/^(january|february|march|april|may|june|july|august|september|october|november|december)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^j/i,/^f/i,/^m/i,/^a/i,/^m/i,/^j/i,/^j/i,/^a/i,/^s/i,/^o/i,/^n/i,/^d/i],any:[/^ja/i,/^f/i,/^mar/i,/^ap/i,/^may/i,/^jun/i,/^jul/i,/^au/i,/^s/i,/^o/i,/^n/i,/^d/i]},defaultParseWidth:"any"}),day:j({matchPatterns:{narrow:/^[smtwf]/i,short:/^(su|mo|tu|we|th|fr|sa)/i,abbreviated:/^(sun|mon|tue|wed|thu|fri|sat)/i,wide:/^(sunday|monday|tuesday|wednesday|thursday|friday|saturday)/i},defaultMatchWidth:"wide",parsePatterns:{narrow:[/^s/i,/^m/i,/^t/i,/^w/i,/^t/i,/^f/i,/^s/i],any:[/^su/i,/^m/i,/^tu/i,/^w/i,/^th/i,/^f/i,/^sa/i]},defaultParseWidth:"any"}),dayPeriod:j({matchPatterns:{narrow:/^(a|p|mi|n|(in the|at) (morning|afternoon|evening|night))/i,any:/^([ap]\.?\s?m\.?|midnight|noon|(in the|at) (morning|afternoon|evening|night))/i},defaultMatchWidth:"any",parsePatterns:{any:{am:/^a/i,pm:/^p/i,midnight:/^mi/i,noon:/^no/i,morning:/morning/i,afternoon:/afternoon/i,evening:/evening/i,night:/night/i}},defaultParseWidth:"any"})},options:{weekStartsOn:0,firstWeekContainsDate:1}};function S(t,n){r(2,arguments);var i=a(t).getTime(),o=e(n);return new Date(i+o)}function P(t,n){r(2,arguments);var a=e(n);return S(t,-a)}function U(t,e){for(var n=t<0?"-":"",r=Math.abs(t).toString();r.length<e;)r="0"+r;return n+r}const L=function(t,e){var n=t.getUTCFullYear(),r=n>0?n:1-n;return U("yy"===e?r%100:r,e.length)},O=function(t,e){var n=t.getUTCMonth();return"M"===e?String(n+1):U(n+1,2)},Y=function(t,e){return U(t.getUTCDate(),e.length)},N=function(t,e){return U(t.getUTCHours()%12||12,e.length)},W=function(t,e){return U(t.getUTCHours(),e.length)},F=function(t,e){return U(t.getUTCMinutes(),e.length)},z=function(t,e){return U(t.getUTCSeconds(),e.length)},q=function(t,e){var n=e.length,r=t.getUTCMilliseconds();return U(Math.floor(r*Math.pow(10,n-3)),e.length)};var H=864e5;function $(t){r(1,arguments);var e=1,n=a(t),i=n.getUTCDay(),o=(i<e?7:0)+i-e;return n.setUTCDate(n.getUTCDate()-o),n.setUTCHours(0,0,0,0),n}function R(t){r(1,arguments);var e=a(t),n=e.getUTCFullYear(),i=new Date(0);i.setUTCFullYear(n+1,0,4),i.setUTCHours(0,0,0,0);var o=$(i),s=new Date(0);s.setUTCFullYear(n,0,4),s.setUTCHours(0,0,0,0);var c=$(s);return e.getTime()>=o.getTime()?n+1:e.getTime()>=c.getTime()?n:n-1}function X(t){r(1,arguments);var e=R(t),n=new Date(0);n.setUTCFullYear(e,0,4),n.setUTCHours(0,0,0,0);var a=$(n);return a}var G=6048e5;function Q(t,n){r(1,arguments);var i=n||{},o=i.locale,s=o&&o.options&&o.options.weekStartsOn,c=null==s?0:e(s),d=null==i.weekStartsOn?c:e(i.weekStartsOn);if(!(d>=0&&d<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var u=a(t),l=u.getUTCDay(),f=(l<d?7:0)+l-d;return u.setUTCDate(u.getUTCDate()-f),u.setUTCHours(0,0,0,0),u}function J(t,n){r(1,arguments);var i=a(t,n),o=i.getUTCFullYear(),s=n||{},c=s.locale,d=c&&c.options&&c.options.firstWeekContainsDate,u=null==d?1:e(d),l=null==s.firstWeekContainsDate?u:e(s.firstWeekContainsDate);if(!(l>=1&&l<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var f=new Date(0);f.setUTCFullYear(o+1,0,l),f.setUTCHours(0,0,0,0);var A=Q(f,n),p=new Date(0);p.setUTCFullYear(o,0,l),p.setUTCHours(0,0,0,0);var h=Q(p,n);return i.getTime()>=A.getTime()?o+1:i.getTime()>=h.getTime()?o:o-1}function Z(t,n){r(1,arguments);var a=n||{},i=a.locale,o=i&&i.options&&i.options.firstWeekContainsDate,s=null==o?1:e(o),c=null==a.firstWeekContainsDate?s:e(a.firstWeekContainsDate),d=J(t,n),u=new Date(0);u.setUTCFullYear(d,0,c),u.setUTCHours(0,0,0,0);var l=Q(u,n);return l}var _=6048e5;function V(t,e){var n=t>0?"-":"+",r=Math.abs(t),a=Math.floor(r/60),i=r%60;if(0===i)return n+String(a);var o=e||"";return n+String(a)+o+U(i,2)}function K(t,e){return t%60==0?(t>0?"-":"+")+U(Math.abs(t)/60,2):tt(t,e)}function tt(t,e){var n=e||"",r=t>0?"-":"+",a=Math.abs(t);return r+U(Math.floor(a/60),2)+n+U(a%60,2)}const et={G:function(t,e,n){var r=t.getUTCFullYear()>0?1:0;switch(e){case"G":case"GG":case"GGG":return n.era(r,{width:"abbreviated"});case"GGGGG":return n.era(r,{width:"narrow"});case"GGGG":default:return n.era(r,{width:"wide"})}},y:function(t,e,n){if("yo"===e){var r=t.getUTCFullYear(),a=r>0?r:1-r;return n.ordinalNumber(a,{unit:"year"})}return L(t,e)},Y:function(t,e,n,r){var a=J(t,r),i=a>0?a:1-a;return"YY"===e?U(i%100,2):"Yo"===e?n.ordinalNumber(i,{unit:"year"}):U(i,e.length)},R:function(t,e){return U(R(t),e.length)},u:function(t,e){return U(t.getUTCFullYear(),e.length)},Q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"Q":return String(r);case"QQ":return U(r,2);case"Qo":return n.ordinalNumber(r,{unit:"quarter"});case"QQQ":return n.quarter(r,{width:"abbreviated",context:"formatting"});case"QQQQQ":return n.quarter(r,{width:"narrow",context:"formatting"});case"QQQQ":default:return n.quarter(r,{width:"wide",context:"formatting"})}},q:function(t,e,n){var r=Math.ceil((t.getUTCMonth()+1)/3);switch(e){case"q":return String(r);case"qq":return U(r,2);case"qo":return n.ordinalNumber(r,{unit:"quarter"});case"qqq":return n.quarter(r,{width:"abbreviated",context:"standalone"});case"qqqqq":return n.quarter(r,{width:"narrow",context:"standalone"});case"qqqq":default:return n.quarter(r,{width:"wide",context:"standalone"})}},M:function(t,e,n){var r=t.getUTCMonth();switch(e){case"M":case"MM":return O(t,e);case"Mo":return n.ordinalNumber(r+1,{unit:"month"});case"MMM":return n.month(r,{width:"abbreviated",context:"formatting"});case"MMMMM":return n.month(r,{width:"narrow",context:"formatting"});case"MMMM":default:return n.month(r,{width:"wide",context:"formatting"})}},L:function(t,e,n){var r=t.getUTCMonth();switch(e){case"L":return String(r+1);case"LL":return U(r+1,2);case"Lo":return n.ordinalNumber(r+1,{unit:"month"});case"LLL":return n.month(r,{width:"abbreviated",context:"standalone"});case"LLLLL":return n.month(r,{width:"narrow",context:"standalone"});case"LLLL":default:return n.month(r,{width:"wide",context:"standalone"})}},w:function(t,e,n,i){var o=function(t,e){r(1,arguments);var n=a(t),i=Q(n,e).getTime()-Z(n,e).getTime();return Math.round(i/_)+1}(t,i);return"wo"===e?n.ordinalNumber(o,{unit:"week"}):U(o,e.length)},I:function(t,e,n){var i=function(t){r(1,arguments);var e=a(t),n=$(e).getTime()-X(e).getTime();return Math.round(n/G)+1}(t);return"Io"===e?n.ordinalNumber(i,{unit:"week"}):U(i,e.length)},d:function(t,e,n){return"do"===e?n.ordinalNumber(t.getUTCDate(),{unit:"date"}):Y(t,e)},D:function(t,e,n){var i=function(t){r(1,arguments);var e=a(t),n=e.getTime();e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0);var i=e.getTime(),o=n-i;return Math.floor(o/H)+1}(t);return"Do"===e?n.ordinalNumber(i,{unit:"dayOfYear"}):U(i,e.length)},E:function(t,e,n){var r=t.getUTCDay();switch(e){case"E":case"EE":case"EEE":return n.day(r,{width:"abbreviated",context:"formatting"});case"EEEEE":return n.day(r,{width:"narrow",context:"formatting"});case"EEEEEE":return n.day(r,{width:"short",context:"formatting"});case"EEEE":default:return n.day(r,{width:"wide",context:"formatting"})}},e:function(t,e,n,r){var a=t.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"e":return String(i);case"ee":return U(i,2);case"eo":return n.ordinalNumber(i,{unit:"day"});case"eee":return n.day(a,{width:"abbreviated",context:"formatting"});case"eeeee":return n.day(a,{width:"narrow",context:"formatting"});case"eeeeee":return n.day(a,{width:"short",context:"formatting"});case"eeee":default:return n.day(a,{width:"wide",context:"formatting"})}},c:function(t,e,n,r){var a=t.getUTCDay(),i=(a-r.weekStartsOn+8)%7||7;switch(e){case"c":return String(i);case"cc":return U(i,e.length);case"co":return n.ordinalNumber(i,{unit:"day"});case"ccc":return n.day(a,{width:"abbreviated",context:"standalone"});case"ccccc":return n.day(a,{width:"narrow",context:"standalone"});case"cccccc":return n.day(a,{width:"short",context:"standalone"});case"cccc":default:return n.day(a,{width:"wide",context:"standalone"})}},i:function(t,e,n){var r=t.getUTCDay(),a=0===r?7:r;switch(e){case"i":return String(a);case"ii":return U(a,e.length);case"io":return n.ordinalNumber(a,{unit:"day"});case"iii":return n.day(r,{width:"abbreviated",context:"formatting"});case"iiiii":return n.day(r,{width:"narrow",context:"formatting"});case"iiiiii":return n.day(r,{width:"short",context:"formatting"});case"iiii":default:return n.day(r,{width:"wide",context:"formatting"})}},a:function(t,e,n){var r=t.getUTCHours()/12>=1?"pm":"am";switch(e){case"a":case"aa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"aaa":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"aaaaa":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"aaaa":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},b:function(t,e,n){var r,a=t.getUTCHours();switch(r=12===a?"noon":0===a?"midnight":a/12>=1?"pm":"am",e){case"b":case"bb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"bbb":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"}).toLowerCase();case"bbbbb":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"bbbb":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},B:function(t,e,n){var r,a=t.getUTCHours();switch(r=a>=17?"evening":a>=12?"afternoon":a>=4?"morning":"night",e){case"B":case"BB":case"BBB":return n.dayPeriod(r,{width:"abbreviated",context:"formatting"});case"BBBBB":return n.dayPeriod(r,{width:"narrow",context:"formatting"});case"BBBB":default:return n.dayPeriod(r,{width:"wide",context:"formatting"})}},h:function(t,e,n){if("ho"===e){var r=t.getUTCHours()%12;return 0===r&&(r=12),n.ordinalNumber(r,{unit:"hour"})}return N(t,e)},H:function(t,e,n){return"Ho"===e?n.ordinalNumber(t.getUTCHours(),{unit:"hour"}):W(t,e)},K:function(t,e,n){var r=t.getUTCHours()%12;return"Ko"===e?n.ordinalNumber(r,{unit:"hour"}):U(r,e.length)},k:function(t,e,n){var r=t.getUTCHours();return 0===r&&(r=24),"ko"===e?n.ordinalNumber(r,{unit:"hour"}):U(r,e.length)},m:function(t,e,n){return"mo"===e?n.ordinalNumber(t.getUTCMinutes(),{unit:"minute"}):F(t,e)},s:function(t,e,n){return"so"===e?n.ordinalNumber(t.getUTCSeconds(),{unit:"second"}):z(t,e)},S:function(t,e){return q(t,e)},X:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();if(0===a)return"Z";switch(e){case"X":return K(a);case"XXXX":case"XX":return tt(a);case"XXXXX":case"XXX":default:return tt(a,":")}},x:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"x":return K(a);case"xxxx":case"xx":return tt(a);case"xxxxx":case"xxx":default:return tt(a,":")}},O:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"O":case"OO":case"OOO":return"GMT"+V(a,":");case"OOOO":default:return"GMT"+tt(a,":")}},z:function(t,e,n,r){var a=(r._originalDate||t).getTimezoneOffset();switch(e){case"z":case"zz":case"zzz":return"GMT"+V(a,":");case"zzzz":default:return"GMT"+tt(a,":")}},t:function(t,e,n,r){var a=r._originalDate||t;return U(Math.floor(a.getTime()/1e3),e.length)},T:function(t,e,n,r){return U((r._originalDate||t).getTime(),e.length)}};function nt(t,e){switch(t){case"P":return e.date({width:"short"});case"PP":return e.date({width:"medium"});case"PPP":return e.date({width:"long"});case"PPPP":default:return e.date({width:"full"})}}function rt(t,e){switch(t){case"p":return e.time({width:"short"});case"pp":return e.time({width:"medium"});case"ppp":return e.time({width:"long"});case"pppp":default:return e.time({width:"full"})}}const at={p:rt,P:function(t,e){var n,r=t.match(/(P+)(p+)?/),a=r[1],i=r[2];if(!i)return nt(t,e);switch(a){case"P":n=e.dateTime({width:"short"});break;case"PP":n=e.dateTime({width:"medium"});break;case"PPP":n=e.dateTime({width:"long"});break;case"PPPP":default:n=e.dateTime({width:"full"})}return n.replace("{{date}}",nt(a,e)).replace("{{time}}",rt(i,e))}};var it=["D","DD"],ot=["YY","YYYY"];function st(t){return-1!==it.indexOf(t)}function ct(t){return-1!==ot.indexOf(t)}function dt(t,e,n){if("YYYY"===t)throw new RangeError("Use `yyyy` instead of `YYYY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("YY"===t)throw new RangeError("Use `yy` instead of `YY` (in `".concat(e,"`) for formatting years to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("D"===t)throw new RangeError("Use `d` instead of `D` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"));if("DD"===t)throw new RangeError("Use `dd` instead of `DD` (in `".concat(e,"`) for formatting days of the month to the input `").concat(n,"`; see: https://git.io/fxCyr"))}var ut=/[yYQqMLwIdDecihHKkms]o|(\w)\1*|''|'(''|[^'])+('|$)|./g,lt=/P+p+|P+|p+|''|'(''|[^'])+('|$)|./g,ft=/^'([^]*?)'?$/,At=/''/g,pt=/[a-zA-Z]/;function ht(t,n,i){r(2,arguments);var o=String(n),c=i||{},d=c.locale||D,u=d.options&&d.options.firstWeekContainsDate,l=null==u?1:e(u),f=null==c.firstWeekContainsDate?l:e(c.firstWeekContainsDate);if(!(f>=1&&f<=7))throw new RangeError("firstWeekContainsDate must be between 1 and 7 inclusively");var A=d.options&&d.options.weekStartsOn,p=null==A?0:e(A),h=null==c.weekStartsOn?p:e(c.weekStartsOn);if(!(h>=0&&h<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");if(!d.localize)throw new RangeError("locale must contain localize property");if(!d.formatLong)throw new RangeError("locale must contain formatLong property");var m=a(t);if(!C(m))throw new RangeError("Invalid time value");var g=s(m),b=P(m,g),v={firstWeekContainsDate:f,weekStartsOn:h,locale:d,_originalDate:m},y=o.match(lt).map((function(t){var e=t[0];return"p"===e||"P"===e?(0,at[e])(t,d.formatLong,v):t})).join("").match(ut).map((function(e){if("''"===e)return"'";var r=e[0];if("'"===r)return mt(e);var a=et[r];if(a)return!c.useAdditionalWeekYearTokens&&ct(e)&&dt(e,n,t),!c.useAdditionalDayOfYearTokens&&st(e)&&dt(e,n,t),a(b,e,d.localize,v);if(r.match(pt))throw new RangeError("Format string contains an unescaped latin alphabet character `"+r+"`");return e})).join("");return y}function mt(t){return t.match(ft)[1].replace(At,"'")}const gt=(t,e,n=!1,i=!1)=>(i&&(i=function(t){if(r(1,arguments),"string"==typeof t){var e=t.match(/(\d{4})-(\d{2})-(\d{2})[T ](\d{2}):(\d{2}):(\d{2})(?:\.(\d{0,7}))?(?:Z|(.)(\d{2}):?(\d{2})?)?/);return e?new Date(Date.UTC(+e[1],+e[2]-1,+e[3],+e[4]-(+e[9]||0)*("-"==e[8]?-1:1),+e[5]-(+e[10]||0)*("-"==e[8]?-1:1),+e[6],+((e[7]||"0")+"00").substring(0,3))):new Date(NaN)}return a(t)}(i)),{title:t,project:e,done:n,date:i,formatDate:function(){if(this.date)return ht(this.date,"d.MMM")}});!function(){let e=[];function n(t){const n=gt(t.title,t.project,t.done,t.date);e.push(n),localStorage.setItem("tasks",JSON.stringify(e.slice()))}localStorage.getItem("tasks")&&JSON.parse(localStorage.getItem("tasks")).forEach((t=>n(t))),t.on("updateTasks",(function(){t.emit("deliverTasks",e.slice())})),t.on("createTask",n),t.on("removeTask",(function(t){const n=e.findIndex((e=>e===t));e=[...e.slice(0,n),...e.slice(n+1)],localStorage.setItem("tasks",JSON.stringify(e.slice()))})),t.on("editTask",(function(t,n){const r=e.findIndex((e=>e===t));Object.assign(e[r],n),localStorage.setItem("tasks",JSON.stringify(e.slice()))}))}();var bt=n(379),vt=n.n(bt),yt=n(795),Ct=n.n(yt),wt=n(569),kt=n.n(wt),Bt=n(565),xt=n.n(Bt),It=n(216),Tt=n.n(It),jt=n(589),Et=n.n(jt),Mt=n(426),Dt={};Dt.styleTagTransform=Et(),Dt.setAttributes=xt(),Dt.insert=kt().bind(null,"head"),Dt.domAPI=Ct(),Dt.insertStyleElement=Tt(),vt()(Mt.Z,Dt),Mt.Z&&Mt.Z.locals&&Mt.Z.locals,function(){let e=[],n=[],r=[];const a=document.createElement("div");a.id="content",document.body.appendChild(a);const i=document.createElement("nav");i.id="nav",a.appendChild(i);const o=document.createElement("div");o.classList.add("core-projects"),i.appendChild(o);const s=document.createElement("h2");s.classList.add("myprojects-heading"),s.textContent="My Projects",i.appendChild(s);const c=document.createElement("div");c.classList.add("user-projects"),i.appendChild(c);const d=document.createElement("button");d.textContent="➕ Project",d.classList.add("add-project","active"),i.appendChild(d);const u=document.createElement("form");u.classList.add("add-project-form"),u.innerHTML='<input class="add-project-input" name="newProjectTitle" type="text" placeholder="Project Title" value="New Project" required>',i.appendChild(u);const l=document.createElement("div");l.classList.add("project"),a.appendChild(l);const f=document.createElement("form");function A(){t.emit("updateTasks")}function p(){t.emit("updateCoreProjects"),t.emit("updateUserProjects")}function h(a,i){p(),a.innerHTML=i.map(((t,e)=>`\n            <div class="${t.type}-project-nav">\n            <img class="project-icon" src="${t.icon}">\n            <button data-idx="${e}" class="nav-project-btn">${t.title}</button>\n            ${"user"===t.type?`<button data-idx="${e}" class="rm-project-btn">❌</button>`:""}\n            </div>\n            `)).join(""),a.querySelectorAll(".nav-project-btn").forEach((t=>t.addEventListener("click",(function(){const t=parseInt(this.dataset.idx);m(i.slice()[t],l)})))),a.querySelectorAll(".rm-project-btn").forEach((o=>o.addEventListener("click",(function(){const o=parseInt(this.dataset.idx),s=i.slice()[o];var c;c=s,t.emit("removeProject",c),p(),p(),function(t,e){e.length>0&&e.map((e=>{e.project===t.title&&b(e)}))}(s,r),h(a,e),m(e[o-1]||n[0],l)}))))}function m(e,n){n.innerHTML="";const a=document.createElement("h1");a.textContent=e.title,n.appendChild(a);const i=document.createElement("div");i.classList.add("project-tasks"),n.appendChild(i),g(i,e,r),("user"===e.type||"addTaskBtn"in e)&&function(e,n,a){const i=document.createElement("button");i.classList.add("add-task-btn","active"),i.textContent="➕ Task",e.appendChild(i);const o=document.createElement("form");o.classList.add("add-task-form"),o.innerHTML='<input class="add-task-input" name="newTaskTitle" type="text" placeholder="Task Title" value="New Task" required>',e.appendChild(o),i.addEventListener("click",(function(){o.classList.add("active"),i.classList.remove("active")})),o.addEventListener("submit",(function(e){e.preventDefault();const s=this.newTaskTitle.value;!function(e,n){t.emit("createTask",{project:e,title:n}),A()}(n.title,s),o.classList.remove("active"),i.classList.add("active"),g(a,n,r),this.reset()}))}(n,e,i)}function g(n,a,i){A(),n.innerHTML="",n.innerHTML=i.map(((t,e)=>{if(!a.displayRule(t))return;let n=t.title;return"core"===a.type&&t.project!==a.title&&(n+=" ("+t.project+")"),`\n            <label class="task" for="task${e}">\n            <input data-idx="${e}" class="task-checkbox" id="task${e}" type="checkbox" name="tasks" value="${t.title}" ${t.done?"checked":""}/>\n            <div class="task-title-date">${t.date?'<p class="task-date">'+t.formatDate()+"</p>":""}<p class="task-title" style="display: inline">${n}</p>\n            </div>\n            <div class="task-btns">\n            <button data-idx="${e}" class="rm-task-btn">❌</button>\n            <button data-idx="${e}" class="edit-task-btn">🖉</button>\n            ${"user"===a.type||"storeTaskBtn"in a?`<button data-idx="${e}" class="store-task-btn"><img src="${y}"></button>`:""}\n            </div>\n            </label>\n            `})).join(""),n.querySelectorAll(".rm-task-btn").forEach((t=>t.addEventListener("click",(function(){const t=parseInt(this.dataset.idx);b(r.slice()[t]),g(n,a,r)})))),n.querySelectorAll(".edit-task-btn").forEach((i=>i.addEventListener("click",(function(){const i=parseInt(this.dataset.idx);!function(n,a,i,o){o.innerHTML="";const s=document.querySelectorAll("button");s.forEach((t=>t.disabled=!0)),document.body.classList.add("edit-task");let c=!1;var d,u;n.date&&(c=ht(n.date,"yyyy-MM-dd")),o.innerHTML=`\n        <p>Title: <input type="text" name="titleinput" placeholder="Title" value="${n.title}" required></p>\n        <p>Project: <select name="projectselect"><option value="${n.project}">${n.project}</option>${d=e,u=n.project,d.map((t=>{if(t.title!==u)return`<option value="${t.title}">${t.title}</option>`})).join("")}</select></p>\n        <p>Due-date: <input type="date" name="dateinput" value="${c||""}"></p>\n        <div class="submit-edit-btn">\n        <button type="submit" name="submitbtn">Edit</button>\n        <button name="cancelbtn">Cancel</button>\n        </div>`,o.addEventListener("submit",(function e(c){if(c.preventDefault(),c.submitter===o.cancelbtn)return s.forEach((t=>t.disabled=!1)),o.removeEventListener("submit",e),o.reset(),void document.body.classList.remove("edit-task");const d=this.titleinput.value,u=this.projectselect.value;let l=this.dateinput.value||null;"string"==typeof l?(l=function(t){return new Date(t.replaceAll("-",","))}(l),t.emit("editTask",n,{title:d,project:u,date:l})):t.emit("editTask",n,{title:d,project:u}),g(a,i,r),document.body.classList.remove("edit-task"),s.forEach((t=>t.disabled=!1)),o.removeEventListener("submit",e)})),this.reset()}(r.slice()[i],n,a,f)})))),n.querySelectorAll(".store-task-btn").forEach((e=>e.addEventListener("click",(function(){const e=parseInt(this.dataset.idx),i=r.slice()[e];t.emit("editTask",i,{project:"Someday"}),g(n,a,r)})))),n.querySelectorAll(".task-checkbox").forEach((e=>e.addEventListener("click",(function(){const e=parseInt(this.dataset.idx),n=r.slice()[e],a=!n.done;t.emit("editTask",n,{done:a})}))))}function b(e){t.emit("removeTask",e),A()}f.classList.add("edit-form"),a.appendChild(f),t.on("deliverUserProjects",(function(t){e=t})),t.on("deliverCoreProjects",(function(t){n=t})),t.on("deliverTasks",(function(t){r=t})),p(),A(),h(o,n),h(c,e),m(n[0],l),d.addEventListener("click",(function(t){u.classList.add("active"),d.classList.remove("active")})),u.addEventListener("submit",(function(n){var r;n.preventDefault(),r=this.newProjectTitle.value,t.emit("createProject",r),p(),h(c,e),u.classList.remove("active"),d.classList.add("active"),this.reset()}))}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,